{"version":3,"sources":["../static/js/18.09228f88.chunk.js","../node_modules/lodash/isEqual.js","actions/dashboardAction.js","container/dashboard/jumpStart.js","../node_modules/react-chartjs-2/es/index.js","../node_modules/chart.js/dist/Chart.js","../node_modules/lodash/keyBy.js","../node_modules/lodash/_createAggregator.js","../node_modules/lodash/_arrayAggregator.js","../node_modules/lodash/_baseAggregator.js","container/dashboard/jumpStartModal.js","container/dashboard/jumpStartDetail.js"],"names":["webpackJsonp","1997","module","exports","__webpack_require__","isEqual","value","other","baseIsEqual","2083","__webpack_exports__","d","setJumpstartList","openJumpstartModal","closeJumpstartModal","sortJumpstartBox","__WEBPACK_IMPORTED_MODULE_0__types_dashboardActionTypes__","data","dispatch","console","log","type","SET_JUMPSTART_LIST","payload","id","OPEN_JUMPSTART_MODAL","CLOSE_JUMPSTART_MODAL","dragIndex","hoverIndex","SORT_JUMPSTART_BOX","payload2","2566","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","__WEBPACK_IMPORTED_MODULE_0_react__","__WEBPACK_IMPORTED_MODULE_0_react___default","n","__WEBPACK_IMPORTED_MODULE_1_redux__","__WEBPACK_IMPORTED_MODULE_2_react_redux__","__WEBPACK_IMPORTED_MODULE_4_classnames__","__WEBPACK_IMPORTED_MODULE_4_classnames___default","__WEBPACK_IMPORTED_MODULE_6__actions_dashboardAction__","__WEBPACK_IMPORTED_MODULE_7__jumpStartModal__","__WEBPACK_IMPORTED_MODULE_8__jumpStartDetail__","__WEBPACK_IMPORTED_MODULE_9__App_css__","__WEBPACK_IMPORTED_MODULE_10__dashboard_css__","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","JumpStartBox","_Component","this","getPrototypeOf","renderJumpStartBoxes","jumpStartData","filter","visible","map","jumpstartStyle","classNames","increase","progress","decrease","a","createElement","className","style","flexGrow","justifyContent","Component","mapStateToProps","state","dashboardReducer","jumpStartList","mapDispatchToProps","bindActionCreators","connect","2567","process","_objectWithoutProperties","obj","keys","indexOf","hasOwnProperty","__WEBPACK_IMPORTED_MODULE_1_prop_types__","__WEBPACK_IMPORTED_MODULE_1_prop_types___default","__WEBPACK_IMPORTED_MODULE_2_chart_js__","__WEBPACK_IMPORTED_MODULE_2_chart_js___default","__WEBPACK_IMPORTED_MODULE_3_lodash_isEqual__","__WEBPACK_IMPORTED_MODULE_3_lodash_isEqual___default","__WEBPACK_IMPORTED_MODULE_4_lodash_keyBy__","__WEBPACK_IMPORTED_MODULE_4_lodash_keyBy___default","_extends","assign","arguments","source","NODE_ENV","PUBLIC_URL","ChartComponent","_React$Component","_temp","_this","_ret","_len","args","Array","_key","apply","concat","handleOnClick","event","chartInstance","_this$props","getDatasetAtEvent","getElementAtEvent","getElementsAtEvent","onElementsClick","ref","element","componentWillMount","undefined","componentDidMount","renderChart","componentDidUpdate","redraw","destroyChart","updateChart","shouldComponentUpdate","nextProps","_props","options","plugins","legend","height","width","nextData","transformDataProp","shadowDataProp","componentWillUnmount","memoizeDataProps","datasets","set","saveCurrentDatasets","checkDatasets","isDev","usingCustomKeyProvider","datasetKeyProvider","getLabelAsKey","multipleDatasets","shouldWarn","forEach","dataset","label","error","getCurrentDatasets","config","_this2","_this3","helpers","configMerge","currentDatasets","nextDatasets","currentDatasetsIndexed","next","current","splice","point","pid","otherProps","rest","update","_props2","node","defaultProps","values","destroy","render","_props3","onClick","propTypes","oneOfType","object","func","isRequired","number","arrayOf","bool","propName","componentName","controllers","Error","display","position","_React$Component2","Doughnut","_this5","_ref","_React$Component3","Pie","_this7","_ref2","_React$Component4","Line","_this9","_ref3","_React$Component5","Bar","_this11","_ref4","_React$Component6","HorizontalBar","_this13","_ref5","_React$Component7","Radar","_this15","_ref6","_React$Component8","Polar","_this17","_ref7","_React$Component9","Bubble","_this19","_ref8","_React$Component10","Scatter","_this21","_ref9","defaults","2568","global","factory","e","moment","rgb2hsl","rgb","h","s","l","r","g","b","min","Math","max","delta","rgb2hsv","v","rgb2hwb","w","rgb2cmyk","c","m","y","k","rgb2keyword","reverseKeywords","JSON","stringify","rgb2xyz","pow","rgb2lab","xyz","x","z","rgb2lch","lab2lch","hsl2rgb","hsl","t1","t2","t3","val","hsl2hsv","sv","hsl2hwb","hsl2cmyk","hsl2keyword","hsv2rgb","hsv","hi","floor","f","p","q","t","hsv2hsl","sl","hsv2hwb","hsv2cmyk","hsv2keyword","hwb2rgb","hwb","wh","bl","ratio","hwb2hsl","hwb2hsv","hwb2cmyk","hwb2keyword","cmyk2rgb","cmyk","cmyk2hsl","cmyk2hsv","cmyk2hwb","cmyk2keyword","xyz2rgb","xyz2lab","xyz2lch","lab2xyz","lab","y2","hr","atan2","PI","sqrt","lab2rgb","lch2lab","lch","cos","sin","lch2xyz","lch2rgb","keyword2rgb","keyword","cssKeywords","keyword2hsl","keyword2hsv","keyword2hwb","keyword2cmyk","keyword2lab","keyword2xyz","getRgba","string","abbr","hex","rgba","per","match","hexAlpha","parseInt","round","slice","parseFloat","colorName","scale","getHsla","alpha","isNaN","getHwb","getRgb","getHsl","hsla","getAlpha","vals","hexString","hexDouble","rgbString","rgbaString","percentString","percentaString","hslString","hslaString","hwbString","reverseNames","num","str","toString","toUpperCase","toFontString","font","helpers_core","isNullOrUndef","size","family","weight","interpolate","start","view","model","ease","ilen","actual","origin","c0","c1","chartjsColor","valid","mix","helpers$1","isFinite","listenArrayEvents","array","listener","_chartjs","listeners","push","arrayEvents","method","charAt","base","res","each","unlistenArrayEvents","stub","index","xRange","mouseX","vm","_view","abs","radius","hitRadius","yRange","mouseY","isVertical","getBarBounds","x1","x2","y1","half","left","top","right","bottom","swap","orig","v1","v2","parseBorderSkipped","edge","borderSkipped","horizontal","parseBorderWidth","maxW","maxH","borderWidth","skip","isObject","boundingRects","bounds","border","outer","inner","inRange","skipX","skipY","computeMinSampleSize","pixels","prev","curr","isHorizontal","ticks","getTicks","getPixelForTick","computeFitCategoryTraits","ruler","thickness","barThickness","count","stackCount","categoryPercentage","barPercentage","chunk","computeFlexCategoryTraits","percent","end","lineEnabled","valueOrDefault$5","showLine","showLines","getRelativePosition","chart","native","parseVisibleItems","handler","meta","j","jlen","isDatasetVisible","getDatasetMeta","getIntersectItems","elements","getNearestItems","intersect","distanceMetric","minDistance","Number","POSITIVE_INFINITY","nearestItems","center","getCenterPoint","distance","getDistanceMetricForAxis","axis","useX","useY","pt1","pt2","deltaX","deltaY","indexMode","items","datasetIndex","_index","filterByPosition","where","sortByWeight","reverse","_tmpIndex_","sort","v0","findMaxPadding","boxes","box","getPadding","boxPadding","addSizeByPosition","readUsedSize","property","getStyle","matches","initCanvas","canvas","renderHeight","getAttribute","renderWidth","EXPANDO_KEY","initial","displayWidth","aspectRatio","displayHeight","addListener","addEventListener","eventListenerOptions","removeListener","removeEventListener","createEvent","nativeEvent","fromNativeEvent","EVENT_TYPES","pos","throttled","fn","thisArg","ticking","requestAnimFrame","window","createDiv","cls","el","document","createResizer","resizer","CSS_SIZE_MONITOR","expand","shrink","appendChild","_reset","scrollLeft","scrollTop","onScroll","bind","watchForRender","expando","proxy","renderProxy","animationName","CSS_RENDER_ANIMATION","ANIMATION_START_EVENTS","reflow","offsetParent","classList","add","CSS_RENDER_MONITOR","unwatchForRender","remove","addResizeListener","container","maintainAspectRatio","parentNode","clientWidth","insertBefore","firstChild","removeResizeListener","removeChild","injectCSS","platform","css","_style","setAttribute","getElementsByTagName","createTextNode","pushOrConcat","toPush","isArray","splitNewlines","String","split","createTooltipItem","xScale","_xScale","yScale","_yScale","_scale","_datasetIndex","controller","_chart","indexScale","_getIndexScale","valueScale","_getValueScale","xLabel","getLabelForIndex","yLabel","_model","getBaseModel","tooltipOpts","globalDefaults","core_defaults","xPadding","yPadding","xAlign","yAlign","bodyFontColor","_bodyFontFamily","valueOrDefault$7","bodyFontFamily","defaultFontFamily","_bodyFontStyle","bodyFontStyle","defaultFontStyle","_bodyAlign","bodyAlign","bodyFontSize","defaultFontSize","bodySpacing","titleFontColor","_titleFontFamily","titleFontFamily","_titleFontStyle","titleFontStyle","titleFontSize","_titleAlign","titleAlign","titleSpacing","titleMarginBottom","footerFontColor","_footerFontFamily","footerFontFamily","_footerFontStyle","footerFontStyle","footerFontSize","_footerAlign","footerAlign","footerSpacing","footerMarginTop","caretSize","cornerRadius","backgroundColor","opacity","legendColorBackground","multiKeyBackground","displayColors","borderColor","getTooltipSize","tooltip","ctx","body","combinedBodyLength","reduce","bodyItem","before","lines","after","beforeBody","afterBody","titleLineCount","title","footerLineCount","footer","widthPadding","maxLineWidth","line","measureText","fontString","determineAlignment","chartArea","lf","rf","olf","orf","yf","midX","midY","caretPadding","opts","_options","getBackgroundPoint","alignment","paddingAndSize","radiusAndPadding","getAlignedX","align","getBeforeAfterBodyLines","callback","mergeScaleConfig","merge","merger","slen","valueOrDefault$8","core_scaleService","getScaleDefaults","_merger","mergeConfig","tval","sval","initConfig","labels","updateConfig","newOptions","scales","core_layouts","removeBox","ensureScalesHaveIDs","buildOrUpdateScales","tooltips","initialize","positionIsHorizontal","abstract","DateAdapter","labelsFromTicks","getPixelForGridLine","offsetGridLines","lineValue","computeTextSize","context","tick","longestText","generateTicks","generationOptions","dataRange","factor","niceMin","niceMax","numSpaces","stepSize","unit","maxNumSpaces","maxTicks","precision","rmin","rmax","spacing","niceNum","ceil","_decimalPlaces","almostWhole","almostEquals","generateTicks$1","exp","significand","tickVal","valueOrDefault$a","log10","endExp","endSignificand","minNotZero","lastTick","nonNegativeOrDefault","defaultValue","getValueCount","angleLines","pointLabels","getTickBackdropHeight","tickOpts","valueOrDefault$b","fontSize","backdropPaddingY","measureLabelSize","lineHeight","determineLimits","angle","fitWithPointLabels","textSize","pointPosition","plFont","_parseFont","furthestLimits","paddingTop","furthestAngles","_pointLabelSizes","valueCount","getPointPosition","drawingArea","angleRadians","getIndexAngle","toDegrees","hLimits","vLimits","setReductions","getTextAlignForAngle","fillText","text","adjustPointPositionForLabelHeight","drawPointLabels","angleLineOpts","gridLineOpts","gridLines","pointLabelOpts","lineWidth","lineColor","color","tickBackdropHeight","save","strokeStyle","setLineDash","resolve$7","borderDash","lineDashOffset","borderDashOffset","outerDistance","getDistanceFromCenterForValue","textBaseline","outerPosition","beginPath","moveTo","xCenter","yCenter","lineTo","stroke","extra","pointLabelPosition","pointLabelFontColor","valueAtIndexOrDefault$1","fontColor","defaultFontColor","fillStyle","textAlign","restore","drawRadiusLine","circular","arc","closePath","numberOrZero","param","isNumber","sorter","arrayUnique","item","hash","out","buildLookupTable","timestamps","distribution","time","table","lookup","mid","i0","i1","lo","interpolate$1","skey","tkey","range","span","offset","toTimestamp","input","adapter","_adapter","parser","format","parse","getRightValue","startOf","determineStepSize","capacity","interval","INTERVALS","milliseconds","steps","determineUnitForAutoTicks","minUnit","UNITS","MAX_INTEGER","common","determineUnitForFormatting","diff","determineMajorUnit","generate","timeOpts","minor","major","valueOrDefault$c","unitStepSize","weekday","isoWeekday","majorTicksEnabled","enabled","first","last","computeOffsets","ticksFromTimestamps","majorUnit","decodeFill","fill","computeBoundary","scaleBottom","scaleTop","scaleZero","getBasePosition","getBasePixel","resolveTarget","sources","propagate","visited","createMapper","mappers","isDrawable","drawArea","curve0","curve1","len0","len1","doFill","points","mapper","loop","p0","p1","d0","d1","spanGaps","getBoxWidth","labelOpts","usePointStyle","boxWidth","createNewLegendAndAttach","legendOpts","Legend","configure","addBox","createNewTitleBlockAndAttach","titleOpts","Title","titleBlock","conversions","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","convert","Converter","arg","pair","exec","from","to","convs","routeSpace","space","getValues","setValues","fspace","colorConvert","colorString","name","Color","lightness","whiteness","isValid","setSpace","rgbArray","hslArray","hsvArray","hwbArray","cmykArray","rgbaArray","hslaArray","setChannel","hue","saturation","saturationv","blackness","rgbNumber","luminosity","lum","chan","contrast","color2","lum1","lum2","level","contrastRatio","dark","light","negate","lighten","darken","saturate","desaturate","whiten","blacken","greyscale","clearer","opaquer","rotate","degrees","mixinColor","color1","w1","w2","toJSON","clone","result","prop","spaces","maxes","chans","capped","sname","svalues","noop","uid","substr","valueOrDefault","valueAtIndexOrDefault","loopable","len","arrayEquals","a0","a1","klen","_mergerIf","mergeIf","extend","setFn","inherits","extensions","me","ChartElement","Surrogate","__super__","callCallback","fromIndex","getValueOrDefault","getValueAtIndexOrDefault","effects","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","asin","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","helpers_easing","easingEffects","RAD_PER_DEG","DOUBLE_PI","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","exports$1","clear","clearRect","roundedRect","rect","drawPoint","rotation","xOffset","yOffset","rad","drawImage","SQRT1_2","_isPointInArea","area","clipArea","clip","unclipArea","previous","flip","stepped","steppedLine","midpoint","tension","bezierCurveTo","controlPointPreviousX","controlPointNextX","controlPointPreviousY","controlPointNextY","helpers_canvas","drawRoundedRectangle","_set","scope","defaultColor","defaultLineHeight","helpers_options","toLineHeight","toPadding","fontFamily","fontStyle","resolve","inputs","easing","Element","configuration","hidden","pivot","_start","transition","tooltipPosition","hasValue","core_element","exports$2","currentStep","numSteps","onAnimationProgress","onAnimationComplete","core_animation","get","animation","duration","onProgress","onComplete","core_animations","animations","request","addAnimation","lazy","startTime","Date","now","animating","requestAnimationFrame","cancelAnimation","findIndex","startDigest","advance","nextStep","DatasetController","datasetElementType","dataElementType","linkScales","addElements","updateIndex","getMeta","getDataset","xAxisID","xAxes","yAxisID","yAxes","getScaleForId","scaleID","_getValueScaleId","_getIndexScaleId","reset","_data","createMetaDataset","createMetaData","metaData","addElementAndReset","updateElement","buildOrUpdateElements","isExtensible","resyncElements","easingValue","draw","removeHoverStyle","$previousStyle","setHoverStyle","custom","getHoverColor","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","numMeta","numData","insertElements","onDataPush","onDataPop","pop","onDataShift","shift","onDataSplice","onDataUnshift","core_datasetController","borderAlign","element_arc","inLabelRange","hoverRadius","chartX","chartY","pointRelativePosition","getAngleFromPoint","startAngle","endAngle","betweenAngles","withinRadius","innerRadius","outerRadius","halfAngle","halfRadius","getArea","centreAngle","rangeFromCentre","angleMargin","sA","eA","pixelMargin","lineJoin","valueOrDefault$1","borderCapStyle","borderJoinStyle","capBezierPoints","element_line","currentVM","_children","globalOptionLineElements","lastDrawnIndex","_loop","lineCap","previousItem","valueOrDefault$2","defaultColor$1","pointStyle","element_point","inXRange","inYRange","padding","defaultColor$2","rectangle","element_rectangle","rects","fillRect","Arc","Point","Rectangle","resolve$1","hover","mode","controller_bar","stack","bar","_ruler","getRuler","_resolveElementOptions","datasetLabel","_updateElementGeometry","vscale","vpixels","calculateBarValuePixels","ipixels","calculateBarIndexPixels","head","_getStacks","stacked","stacks","getStackCount","getStackIndex","getPixelForValue","imeta","ivalue","minBarLength","stackIndex","maxBarThickness","Infinity","dataIndex","valueOrDefault$3","resolve$2","callbacks","dataPoint","controller_bubble","dsIndex","getPixelForDecimal","NaN","resolve$3","valueOrDefault$4","animateRotate","animateScale","legendCallback","join","generateLabels","ds","arcOpts","legendItem","cutoutPercentage","circumference","tooltipItem","dataLabel","controller_doughnut","getRingIndex","ringIndex","availableWidth","availableHeight","minSize","arcs","chartWeight","_getRingWeight","contains0","contains90","contains180","contains270","cutout","getMaxBorderWidth","radiusLength","_getVisibleDatasetWeightTotal","offsetX","offsetY","total","calculateTotal","_getRingWeightOffset","animationOpts","centerX","centerY","calculateCircumference","hoverWidth","ringWeightOffset","dataSetIndex","controller_horizontalBar","resolve$4","isPointInArea","controller_line","lineTension","_resolveLineOptions","updateBezierControlPoints","lineModel","_resolvePointOptions","calculatePointY","ELEMENT_OPTIONS","elementOptions","dsMeta","sumPos","sumNeg","stackedRightValue","rightValue","capControlPoint","pt","controlPoints","cubicInterpolationMode","splineCurveMonotone","splineCurve","nextItem","halfBorderWidth","resolve$5","beginAtZero","controller_polarArea","starts","_starts","angles","_angles","_updateRadius","countVisibleElements","_computeAngle","getVisibleDatasetCount","datasetStartAngle","resetRadius","doughnut","controller_pie","valueOrDefault$6","resolve$6","controller_radar","getPointPositionForValue","controller_scatter","bubble","horizontalBar","polarArea","pie","radar","scatter","core_interaction","modes","single","x-axis","nearest","intersectsItem","layout","fullWidth","layoutItem","getMinimumBoxSize","chartWidth","maxChartAreaWidth","chartHeight","maxChartAreaHeight","verticalBoxWidth","minBoxSizes","fitBox","minBoxSize","findNextWhere","minBox","scaleMargin","outerBoxSizes","maxPadding","finalFitVerticalBox","placeBox","leftPadding","rightPadding","layoutOptions","topPadding","bottomPadding","leftBoxes","rightBoxes","topBoxes","bottomBoxes","chartAreaBoxes","verticalBoxes","horizontalBoxes","outerBoxes","chartAreaWidth","leftPaddingAddition","topPaddingAddition","newMaxChartAreaHeight","newMaxChartAreaWidth","platform_basic","acquireContext","getContext","platform_dom$1","freeze","default","stylesheet","CSS_PREFIX","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","supportsEventListenerOptions","supports","passive","platform_dom$2","disableCSSInjection","_enabled","_ensureLoaded","_loaded","getElementById","releaseContext","removeAttribute","proxies","addEvent","removeEvent","implementation","core_plugins","_plugins","_cacheId","register","plugin","unregister","idx","getAll","notify","hook","params","descriptors","cache","$plugins","_invalidate","constructors","registerScaleType","scaleConstructor","scaleDefaults","getScaleConstructor","updateScaleDefaults","additions","addScalesToLayout","beforeTitle","tooltipItems","labelCount","afterTitle","beforeLabel","labelColor","activeElement","labelTextColor","afterLabel","beforeFooter","afterFooter","positioners","average","eventPosition","nearestElement","distanceBetweenPoints","tp","exports$3","_lastActive","getTitle","getBeforeBody","getBody","bodyItems","getAfterBody","getFooter","changed","existingModel","active","_active","backgroundPoint","tooltipSize","caretX","caretY","labelColors","labelTextColors","_eventPosition","itemSort","dataPoints","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","tmp","drawTitle","drawBody","textColor","drawColorBoxes","xLinePadding","colorX","fillLineOfText","strokeRect","drawFooter","drawBackground","quadraticCurveTo","hasTooltipContent","globalAlpha","handleEvent","getElementsAtEventForMode","positioners_1","core_tooltip","events","onHover","animationDuration","responsive","responsiveAnimationDuration","Chart","construct","_bufferedRender","instances","retinaScale","devicePixelRatio","bindEvents","resize","initToolTip","stop","silent","newWidth","getMaximumWidth","newHeight","getMaximumHeight","newSize","onResize","scalesOptions","scaleOptions","xAxisOptions","yAxisOptions","updated","dtype","dposition","isDefault","scaleType","scaleClass","mergeTicksOptions","hasUpdated","buildOrUpdateControllers","newControllers","destroyDatasetMeta","ControllerClass","resetElements","updateLayout","updateDatasets","lastActive","_bufferedRequest","updateDataset","animationOptions","animationObject","easingFunction","stepDecimal","drawDatasets","_drawTooltip","drawDataset","getElementsAtXAxis","_meta","generateLegend","unbindEvents","toBase64Image","toDataURL","_chartInstance","_listeners","eventHandler","updateHoverStyle","bufferedRequest","hoverOptions","core_controller","Controller","types","scaleMerge","formats","endOf","_create","override","members","_date","core_adapters","core_ticks","formatters","tickValue","logDelta","tickString","logTick","toExponential","numDecimal","toFixed","logarithmic","remain","valueOrDefault$9","drawBorder","drawOnChartArea","drawTicks","tickMarkLength","zeroLineWidth","zeroLineColor","zeroLineBorderDash","zeroLineBorderDashOffset","scaleLabel","labelString","minRotation","maxRotation","mirror","autoSkip","autoSkipPadding","labelOffset","core_scale","paddingLeft","paddingRight","paddingBottom","_ticks","beforeUpdate","maxWidth","maxHeight","margins","_maxLabelLines","longestLabelWidth","longestTextCache","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","beforeBuildTicks","buildTicks","afterBuildTicks","beforeTickToLabelConversion","convertTicksToLabels","afterTickToLabelConversion","beforeCalculateTickRotation","calculateTickRotation","afterCalculateTickRotation","beforeFit","fit","afterFit","afterUpdate","userCallback","tickFont","labelRotation","cosRotation","originalLabelWidth","labelWidth","tickWidth","toRadians","scaleLabelOpts","_isVisible","parseFont","isFullWidth","scaleLabelFont","scaleLabelPadding","deltaHeight","largestTextWidth","tallestLabelHeightInLines","numberOfLabelLines","lineSpace","tickPadding","sinRotation","labelHeight","firstLabelWidth","lastLabelWidth","offsetLeft","offsetRight","handleMargins","rawValue","getValueForPixel","innerWidth","pixel","finalVal","innerHeight","decimal","valueOffset","getBaseValue","_autoSkip","optionTicks","tickCount","skipRatio","maxTicksLimit","ticksLength","_tickSize","axisLength","PaddingBottom","rot","borderValue","tickStart","tickEnd","optionMajorTicks","isRotated","isMirrored","tickFontColor","majorTickFontColor","majorTickFont","tl","scaleLabelFontColor","labelRotationRadians","itemsToDraw","axisWidth","alignPixel","_alignPixel","zeroLineIndex","tx1","ty1","tx2","ty2","labelX","labelY","textOffset","labelYOffset","labelXOffset","glWidth","glColor","glBorderDash","glBorderDashOffset","itemToDraw","translate","scaleLabelX","scaleLabelY","halfLineHeight","isLeft","firstLineWidth","lastLineWidth","defaultConfig","scale_category","getLabels","xLabels","yLabels","minIndex","maxIndex","valueCategory","offsetAmt","valueWidth","widthOffset","valueHeight","heightOffset","horz","valueDimension","_defaults","scale_linearbase","handleTickRangeOptions","minSign","sign","maxSign","setMin","suggestedMin","setMax","suggestedMax","getTickLimit","_computeTickLimit","handleDirectionalChanges","numericGeneratorOptions","fixedStepSize","ticksAsNumbers","defaultConfig$1","scale_linear","IDMatches","hasStacks","valuesPerStack","positiveValues","negativeValues","relativePoints","valuesForType","minVal","maxVal","innerDimension","_defaults$1","defaultConfig$2","scale_logarithmic","tickValues","_getFirstTickValue","firstTickValue","_defaults$2","defaultConfig$3","animate","showLabelBackdrop","backdropColor","backdropPaddingX","scale_radialLinear","NEGATIVE_INFINITY","setCenterPoint","largestPossibleRadius","radiusReductionLeft","radiusReductionRight","radiusReductionTop","radiusReductionBottom","leftMovement","rightMovement","topMovement","bottomMovement","maxRight","maxLeft","maxTop","maxBottom","scalingFactor","distanceFromCenter","thisAngle","yCenterOffset","_defaults$3","MIN_INTEGER","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","millisecond","second","minute","hour","day","week","month","quarter","year","defaultConfig$4","adapters","displayFormat","displayFormats","scale_time","date","warn","timestamp","dataLabels","_horizontal","_table","_timestamps","getLabelCapacity","_unit","_majorUnit","_offsets","tooltipFormat","datetime","tickFormatFunction","minorFormat","majorFormat","majorTime","majorTickOpts","formatter","getPixelForOffset","isReverse","getLabelWidth","ticksOpts","tickLabelWidth","exampleTime","exampleLabel","_defaults$4","category","radialLinear","FORMATS","_id","valueOf","amount","as","filler","boundary","plugin_filler","afterDatasetsUpdate","$filler","beforeDatasetDraw","noop$1","valueOrDefault$d","ci","onLeave","lineDash","legendHitBoxes","_hoveredItem","doughnutMode","beforeBuildLabels","buildLabels","afterBuildLabels","legendItems","labelFont","hitboxes","lineWidths","totalHeight","vPadding","columnWidths","totalWidth","currentColWidth","currentColHeight","itemHeight","itemWidth","lineDefault","legendWidth","cursor","drawLegendBox","SQRT2","textWidth","halfFontSize","xLeft","yMiddle","_getLegendItemAt","hitBox","lh","hoveredItem","plugin_legend","_element","beforeInit","afterEvent","noop$2","lineCount","fontOpts","titleX","titleY","plugin_title","parseMaxStyle","styleValue","parentProperty","valueInPixels","isConstrainedValue","getConstraintDimension","domNode","maxStyle","percentageProperty","defaultView","_getParentNode","constrainedNode","getComputedStyle","constrainedContainer","hasCNode","hasCContainer","infinity","collection","filterCallback","filtered","arrayToSearch","startIndex","currentItem","findPreviousWhere","epsilon","rounded","exponent","LOG10E","powerOf10","radians","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","radialDistanceFromCenter","aliasPixel","pixelWidth","currentDevicePixelRatio","halfWidth","firstPoint","middlePoint","afterPoint","d01","d12","s01","s12","fa","fb","EPSILON","pointBefore","pointCurrent","pointAfter","pointsWithTangents","deltaK","mK","pointsLen","slopeDeltaX","alphaK","betaK","tauK","squaredMagnitude","fraction","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","evt","originalEvent","srcElement","boundingRect","getBoundingClientRect","touches","clientX","clientY","getConstraintWidth","getConstraintHeight","_calculatePadding","parentDimension","parent","host","cw","clientHeight","ch","currentStyle","getPropertyValue","forceRatio","pixelRatio","pixelSize","arrayOfThings","gc","garbageCollect","longest","thing","nestedThing","gcLen","numberOfLines","CanvasGradient","colorValue","CanvasPattern","_adapters","Animation","animationService","Interaction","layouts","Scale","scaleService","Ticks","Tooltip","src","pluginService","PluginBase","canvasHelpers","layoutService","LinearScaleBase","klass","cfg","toLowerCase","2569","baseAssignValue","createAggregator","keyBy","2570","setter","initializer","iteratee","arrayAggregator","baseAggregator","accumulator","baseIteratee","2571","2572","baseEach","2573","__WEBPACK_IMPORTED_MODULE_1_react_redux__","__WEBPACK_IMPORTED_MODULE_2_redux__","__WEBPACK_IMPORTED_MODULE_4__components_UI_Antd__","__WEBPACK_IMPORTED_MODULE_5__actions_dashboardAction__","JumpStartModal","jumpstartData","isModalOpen","onOk","handleOk","onCancel","2574","__WEBPACK_IMPORTED_MODULE_3_classnames__","__WEBPACK_IMPORTED_MODULE_4_antd__","__WEBPACK_IMPORTED_MODULE_5_react_spring__","JumpStartDetail","delay","transform","styles"],"mappings":"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","file":"static/js/18.09228f88.chunk.js","sourcesContent":["webpackJsonp([18],{\n\n/***/ 1997:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseIsEqual = __webpack_require__(416);\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nmodule.exports = isEqual;\n\n\n/***/ }),\n\n/***/ 2083:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export getJumpstartList */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return setJumpstartList; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return openJumpstartModal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return closeJumpstartModal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return sortJumpstartBox; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__types_dashboardActionTypes__ = __webpack_require__(758);\nvar getJumpstartList=function getJumpstartList(){return function(dispatch){return dispatch({type:__WEBPACK_IMPORTED_MODULE_0__types_dashboardActionTypes__[\"b\" /* GET_JUMPSTART_LIST */]});};};var setJumpstartList=function setJumpstartList(data){return function(dispatch){console.log(data);return dispatch({type:__WEBPACK_IMPORTED_MODULE_0__types_dashboardActionTypes__[\"d\" /* SET_JUMPSTART_LIST */],payload:data});};};var openJumpstartModal=function openJumpstartModal(id){return function(dispatch){return dispatch({type:__WEBPACK_IMPORTED_MODULE_0__types_dashboardActionTypes__[\"c\" /* OPEN_JUMPSTART_MODAL */],payload:id});};};var closeJumpstartModal=function closeJumpstartModal(id){return function(dispatch){return dispatch({type:__WEBPACK_IMPORTED_MODULE_0__types_dashboardActionTypes__[\"a\" /* CLOSE_JUMPSTART_MODAL */],payload:id});};};var sortJumpstartBox=function sortJumpstartBox(dragIndex,hoverIndex){return function(dispatch){console.log(dragIndex,hoverIndex);return dispatch({type:__WEBPACK_IMPORTED_MODULE_0__types_dashboardActionTypes__[\"e\" /* SORT_JUMPSTART_BOX */],payload:dragIndex,payload2:hoverIndex});};};\n\n/***/ }),\n\n/***/ 2566:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_redux__ = __webpack_require__(86);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react_redux__ = __webpack_require__(49);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_react_chartjs_2__ = __webpack_require__(2567);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_classnames__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_classnames__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_antd__ = __webpack_require__(30);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__actions_dashboardAction__ = __webpack_require__(2083);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__jumpStartModal__ = __webpack_require__(2573);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__jumpStartDetail__ = __webpack_require__(2574);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__App_css__ = __webpack_require__(783);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__App_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9__App_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__dashboard_css__ = __webpack_require__(2515);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__dashboard_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10__dashboard_css__);\nvar _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var JumpStartBox=function(_Component){_inherits(JumpStartBox,_Component);function JumpStartBox(props){_classCallCheck(this,JumpStartBox);return _possibleConstructorReturn(this,(JumpStartBox.__proto__||Object.getPrototypeOf(JumpStartBox)).call(this,props));}_createClass(JumpStartBox,[{key:'render',value:function render(){var renderJumpStartBoxes=this.props.jumpStartData.filter(function(data){return data.visible;}).map(function(data){var jumpstartStyle=__WEBPACK_IMPORTED_MODULE_4_classnames___default()({'increase':data.progress<0,'decrease':data.progress>0});return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_8__jumpStartDetail__[\"a\" /* default */],{key:data.id,data:data,jumpstartStyle:jumpstartStyle});});return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:'flex-container',style:{flexGrow:1,justifyContent:'flex-start'}},renderJumpStartBoxes,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_7__jumpStartModal__[\"a\" /* default */],null));}}]);return JumpStartBox;}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);var mapStateToProps=function mapStateToProps(state){return{jumpStartData:state.dashboardReducer.jumpStartList};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return Object(__WEBPACK_IMPORTED_MODULE_1_redux__[\"b\" /* bindActionCreators */])({openJumpstartModal:__WEBPACK_IMPORTED_MODULE_6__actions_dashboardAction__[\"b\" /* openJumpstartModal */]},dispatch);};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(__WEBPACK_IMPORTED_MODULE_2_react_redux__[\"b\" /* connect */])(mapStateToProps,mapDispatchToProps)(JumpStartBox));\n\n/***/ }),\n\n/***/ 2567:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(process) {/* unused harmony export Doughnut */\n/* unused harmony export Pie */\n/* unused harmony export Line */\n/* unused harmony export Bar */\n/* unused harmony export HorizontalBar */\n/* unused harmony export Radar */\n/* unused harmony export Polar */\n/* unused harmony export Bubble */\n/* unused harmony export Scatter */\n/* unused harmony export defaults */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_chart_js__ = __webpack_require__(2568);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_chart_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_chart_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash_isEqual__ = __webpack_require__(1997);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash_isEqual___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_lodash_isEqual__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash_keyBy__ = __webpack_require__(2569);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash_keyBy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_lodash_keyBy__);\n/* unused harmony reexport Chart */\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n\n\nvar NODE_ENV = typeof process !== 'undefined' && Object({\"NODE_ENV\":\"production\",\"PUBLIC_URL\":\"/ant-dashboard\"}) && \"production\";\n\nvar ChartComponent = function (_React$Component) {\n  _inherits(ChartComponent, _React$Component);\n\n  function ChartComponent() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ChartComponent);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleOnClick = function (event) {\n      var instance = _this.chartInstance;\n\n      var _this$props = _this.props,\n          getDatasetAtEvent = _this$props.getDatasetAtEvent,\n          getElementAtEvent = _this$props.getElementAtEvent,\n          getElementsAtEvent = _this$props.getElementsAtEvent,\n          onElementsClick = _this$props.onElementsClick;\n\n\n      getDatasetAtEvent && getDatasetAtEvent(instance.getDatasetAtEvent(event), event);\n      getElementAtEvent && getElementAtEvent(instance.getElementAtEvent(event), event);\n      getElementsAtEvent && getElementsAtEvent(instance.getElementsAtEvent(event), event);\n      onElementsClick && onElementsClick(instance.getElementsAtEvent(event), event); // Backward compatibility\n    }, _this.ref = function (element) {\n      _this.element = element;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  ChartComponent.prototype.componentWillMount = function componentWillMount() {\n    this.chartInstance = undefined;\n  };\n\n  ChartComponent.prototype.componentDidMount = function componentDidMount() {\n    this.renderChart();\n  };\n\n  ChartComponent.prototype.componentDidUpdate = function componentDidUpdate() {\n    if (this.props.redraw) {\n      this.destroyChart();\n      this.renderChart();\n      return;\n    }\n\n    this.updateChart();\n  };\n\n  ChartComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n    var _props = this.props,\n        redraw = _props.redraw,\n        type = _props.type,\n        options = _props.options,\n        plugins = _props.plugins,\n        legend = _props.legend,\n        height = _props.height,\n        width = _props.width;\n\n\n    if (nextProps.redraw === true) {\n      return true;\n    }\n\n    if (height !== nextProps.height || width !== nextProps.width) {\n      return true;\n    }\n\n    if (type !== nextProps.type) {\n      return true;\n    }\n\n    if (!__WEBPACK_IMPORTED_MODULE_3_lodash_isEqual___default()(legend, nextProps.legend)) {\n      return true;\n    }\n\n    if (!__WEBPACK_IMPORTED_MODULE_3_lodash_isEqual___default()(options, nextProps.options)) {\n      return true;\n    }\n\n    var nextData = this.transformDataProp(nextProps);\n\n    if (!__WEBPACK_IMPORTED_MODULE_3_lodash_isEqual___default()(this.shadowDataProp, nextData)) {\n      return true;\n    }\n\n    return !__WEBPACK_IMPORTED_MODULE_3_lodash_isEqual___default()(plugins, nextProps.plugins);\n  };\n\n  ChartComponent.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.destroyChart();\n  };\n\n  ChartComponent.prototype.transformDataProp = function transformDataProp(props) {\n    var data = props.data;\n\n    if (typeof data == 'function') {\n      var node = this.element;\n      return data(node);\n    } else {\n      return data;\n    }\n  };\n\n  // Chart.js directly mutates the data.dataset objects by adding _meta proprerty\n  // this makes impossible to compare the current and next data changes\n  // therefore we memoize the data prop while sending a fake to Chart.js for mutation.\n  // see https://github.com/chartjs/Chart.js/blob/master/src/core/core.controller.js#L615-L617\n\n\n  ChartComponent.prototype.memoizeDataProps = function memoizeDataProps() {\n    if (!this.props.data) {\n      return;\n    }\n\n    var data = this.transformDataProp(this.props);\n\n    this.shadowDataProp = _extends({}, data, {\n      datasets: data.datasets && data.datasets.map(function (set) {\n        return _extends({}, set);\n      })\n    });\n\n    this.saveCurrentDatasets(); // to remove the dataset metadata from this chart when the chart is destroyed\n\n    return data;\n  };\n\n  ChartComponent.prototype.checkDatasets = function checkDatasets(datasets) {\n    var isDev = NODE_ENV !== 'production' && NODE_ENV !== 'prod';\n    var usingCustomKeyProvider = this.props.datasetKeyProvider !== ChartComponent.getLabelAsKey;\n    var multipleDatasets = datasets.length > 1;\n\n    if (isDev && multipleDatasets && !usingCustomKeyProvider) {\n      var shouldWarn = false;\n      datasets.forEach(function (dataset) {\n        if (!dataset.label) {\n          shouldWarn = true;\n        }\n      });\n\n      if (shouldWarn) {\n        console.error('[react-chartjs-2] Warning: Each dataset needs a unique key. By default, the \"label\" property on each dataset is used. Alternatively, you may provide a \"datasetKeyProvider\" as a prop that returns a unique key.');\n      }\n    }\n  };\n\n  ChartComponent.prototype.getCurrentDatasets = function getCurrentDatasets() {\n    return this.chartInstance && this.chartInstance.config.data && this.chartInstance.config.data.datasets || [];\n  };\n\n  ChartComponent.prototype.saveCurrentDatasets = function saveCurrentDatasets() {\n    var _this2 = this;\n\n    this.datasets = this.datasets || {};\n    var currentDatasets = this.getCurrentDatasets();\n    currentDatasets.forEach(function (d) {\n      _this2.datasets[_this2.props.datasetKeyProvider(d)] = d;\n    });\n  };\n\n  ChartComponent.prototype.updateChart = function updateChart() {\n    var _this3 = this;\n\n    var options = this.props.options;\n\n\n    var data = this.memoizeDataProps(this.props);\n\n    if (!this.chartInstance) return;\n\n    if (options) {\n      this.chartInstance.options = __WEBPACK_IMPORTED_MODULE_2_chart_js___default.a.helpers.configMerge(this.chartInstance.options, options);\n    }\n\n    // Pipe datasets to chart instance datasets enabling\n    // seamless transitions\n    var currentDatasets = this.getCurrentDatasets();\n    var nextDatasets = data.datasets || [];\n    this.checkDatasets(currentDatasets);\n\n    var currentDatasetsIndexed = __WEBPACK_IMPORTED_MODULE_4_lodash_keyBy___default()(currentDatasets, this.props.datasetKeyProvider);\n\n    // We can safely replace the dataset array, as long as we retain the _meta property\n    // on each dataset.\n    this.chartInstance.config.data.datasets = nextDatasets.map(function (next) {\n      var current = currentDatasetsIndexed[_this3.props.datasetKeyProvider(next)];\n\n      if (current && current.type === next.type) {\n        // The data array must be edited in place. As chart.js adds listeners to it.\n        current.data.splice(next.data.length);\n        next.data.forEach(function (point, pid) {\n          current.data[pid] = next.data[pid];\n        });\n\n        var _data = next.data,\n            otherProps = _objectWithoutProperties(next, ['data']);\n        // Merge properties. Notice a weakness here. If a property is removed\n        // from next, it will be retained by current and never disappears.\n        // Workaround is to set value to null or undefined in next.\n\n\n        return _extends({}, current, otherProps);\n      } else {\n        return next;\n      }\n    });\n\n    var datasets = data.datasets,\n        rest = _objectWithoutProperties(data, ['datasets']);\n\n    this.chartInstance.config.data = _extends({}, this.chartInstance.config.data, rest);\n\n    this.chartInstance.update();\n  };\n\n  ChartComponent.prototype.renderChart = function renderChart() {\n    var _props2 = this.props,\n        options = _props2.options,\n        legend = _props2.legend,\n        type = _props2.type,\n        plugins = _props2.plugins;\n\n    var node = this.element;\n    var data = this.memoizeDataProps();\n\n    if (typeof legend !== 'undefined' && !__WEBPACK_IMPORTED_MODULE_3_lodash_isEqual___default()(ChartComponent.defaultProps.legend, legend)) {\n      options.legend = legend;\n    }\n\n    this.chartInstance = new __WEBPACK_IMPORTED_MODULE_2_chart_js___default.a(node, {\n      type: type,\n      data: data,\n      options: options,\n      plugins: plugins\n    });\n  };\n\n  ChartComponent.prototype.destroyChart = function destroyChart() {\n    // Put all of the datasets that have existed in the chart back on the chart\n    // so that the metadata associated with this chart get destroyed.\n    // This allows the datasets to be used in another chart. This can happen,\n    // for example, in a tabbed UI where the chart gets created each time the\n    // tab gets switched to the chart and uses the same data).\n    this.saveCurrentDatasets();\n    var datasets = Object.values(this.datasets);\n    this.chartInstance.config.data.datasets = datasets;\n\n    this.chartInstance.destroy();\n  };\n\n  ChartComponent.prototype.render = function render() {\n    var _props3 = this.props,\n        height = _props3.height,\n        width = _props3.width,\n        id = _props3.id;\n\n\n    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('canvas', {\n      ref: this.ref,\n      height: height,\n      width: width,\n      id: id,\n      onClick: this.handleOnClick\n    });\n  };\n\n  return ChartComponent;\n}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);\n\nChartComponent.getLabelAsKey = function (d) {\n  return d.label;\n};\n\nChartComponent.propTypes = {\n  data: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object, __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func]).isRequired,\n  getDatasetAtEvent: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func,\n  getElementAtEvent: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func,\n  getElementsAtEvent: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func,\n  height: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.number,\n  legend: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object,\n  onElementsClick: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func,\n  options: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object,\n  plugins: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.arrayOf(__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object),\n  redraw: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,\n  type: function type(props, propName, componentName) {\n    if (!__WEBPACK_IMPORTED_MODULE_2_chart_js___default.a.controllers[props[propName]]) {\n      return new Error('Invalid chart type `' + props[propName] + '` supplied to' + ' `' + componentName + '`.');\n    }\n  },\n  width: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.number,\n  datasetKeyProvider: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func\n};\nChartComponent.defaultProps = {\n  legend: {\n    display: true,\n    position: 'bottom'\n  },\n  type: 'doughnut',\n  height: 150,\n  width: 300,\n  redraw: false,\n  options: {},\n  datasetKeyProvider: ChartComponent.getLabelAsKey\n};\n\n\n/* unused harmony default export */ var _unused_webpack_default_export = (ChartComponent);\n\nvar Doughnut = function (_React$Component2) {\n  _inherits(Doughnut, _React$Component2);\n\n  function Doughnut() {\n    _classCallCheck(this, Doughnut);\n\n    return _possibleConstructorReturn(this, _React$Component2.apply(this, arguments));\n  }\n\n  Doughnut.prototype.render = function render() {\n    var _this5 = this;\n\n    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref) {\n        return _this5.chartInstance = _ref && _ref.chartInstance;\n      },\n      type: 'doughnut'\n    }));\n  };\n\n  return Doughnut;\n}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);\n\nvar Pie = function (_React$Component3) {\n  _inherits(Pie, _React$Component3);\n\n  function Pie() {\n    _classCallCheck(this, Pie);\n\n    return _possibleConstructorReturn(this, _React$Component3.apply(this, arguments));\n  }\n\n  Pie.prototype.render = function render() {\n    var _this7 = this;\n\n    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref2) {\n        return _this7.chartInstance = _ref2 && _ref2.chartInstance;\n      },\n      type: 'pie'\n    }));\n  };\n\n  return Pie;\n}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);\n\nvar Line = function (_React$Component4) {\n  _inherits(Line, _React$Component4);\n\n  function Line() {\n    _classCallCheck(this, Line);\n\n    return _possibleConstructorReturn(this, _React$Component4.apply(this, arguments));\n  }\n\n  Line.prototype.render = function render() {\n    var _this9 = this;\n\n    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref3) {\n        return _this9.chartInstance = _ref3 && _ref3.chartInstance;\n      },\n      type: 'line'\n    }));\n  };\n\n  return Line;\n}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);\n\nvar Bar = function (_React$Component5) {\n  _inherits(Bar, _React$Component5);\n\n  function Bar() {\n    _classCallCheck(this, Bar);\n\n    return _possibleConstructorReturn(this, _React$Component5.apply(this, arguments));\n  }\n\n  Bar.prototype.render = function render() {\n    var _this11 = this;\n\n    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref4) {\n        return _this11.chartInstance = _ref4 && _ref4.chartInstance;\n      },\n      type: 'bar'\n    }));\n  };\n\n  return Bar;\n}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);\n\nvar HorizontalBar = function (_React$Component6) {\n  _inherits(HorizontalBar, _React$Component6);\n\n  function HorizontalBar() {\n    _classCallCheck(this, HorizontalBar);\n\n    return _possibleConstructorReturn(this, _React$Component6.apply(this, arguments));\n  }\n\n  HorizontalBar.prototype.render = function render() {\n    var _this13 = this;\n\n    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref5) {\n        return _this13.chartInstance = _ref5 && _ref5.chartInstance;\n      },\n      type: 'horizontalBar'\n    }));\n  };\n\n  return HorizontalBar;\n}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);\n\nvar Radar = function (_React$Component7) {\n  _inherits(Radar, _React$Component7);\n\n  function Radar() {\n    _classCallCheck(this, Radar);\n\n    return _possibleConstructorReturn(this, _React$Component7.apply(this, arguments));\n  }\n\n  Radar.prototype.render = function render() {\n    var _this15 = this;\n\n    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref6) {\n        return _this15.chartInstance = _ref6 && _ref6.chartInstance;\n      },\n      type: 'radar'\n    }));\n  };\n\n  return Radar;\n}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);\n\nvar Polar = function (_React$Component8) {\n  _inherits(Polar, _React$Component8);\n\n  function Polar() {\n    _classCallCheck(this, Polar);\n\n    return _possibleConstructorReturn(this, _React$Component8.apply(this, arguments));\n  }\n\n  Polar.prototype.render = function render() {\n    var _this17 = this;\n\n    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref7) {\n        return _this17.chartInstance = _ref7 && _ref7.chartInstance;\n      },\n      type: 'polarArea'\n    }));\n  };\n\n  return Polar;\n}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);\n\nvar Bubble = function (_React$Component9) {\n  _inherits(Bubble, _React$Component9);\n\n  function Bubble() {\n    _classCallCheck(this, Bubble);\n\n    return _possibleConstructorReturn(this, _React$Component9.apply(this, arguments));\n  }\n\n  Bubble.prototype.render = function render() {\n    var _this19 = this;\n\n    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref8) {\n        return _this19.chartInstance = _ref8 && _ref8.chartInstance;\n      },\n      type: 'bubble'\n    }));\n  };\n\n  return Bubble;\n}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);\n\nvar Scatter = function (_React$Component10) {\n  _inherits(Scatter, _React$Component10);\n\n  function Scatter() {\n    _classCallCheck(this, Scatter);\n\n    return _possibleConstructorReturn(this, _React$Component10.apply(this, arguments));\n  }\n\n  Scatter.prototype.render = function render() {\n    var _this21 = this;\n\n    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref9) {\n        return _this21.chartInstance = _ref9 && _ref9.chartInstance;\n      },\n      type: 'scatter'\n    }));\n  };\n\n  return Scatter;\n}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);\n\nvar defaults = __WEBPACK_IMPORTED_MODULE_2_chart_js___default.a.defaults;\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(162)))\n\n/***/ }),\n\n/***/ 2568:\n/***/ (function(module, exports, __webpack_require__) {\n\n/*!\n * Chart.js v2.8.0\n * https://www.chartjs.org\n * (c) 2019 Chart.js Contributors\n * Released under the MIT License\n */\n(function (global, factory) {\n true ? module.exports = factory(function() { try { return __webpack_require__(32); } catch(e) { } }()) :\ntypeof define === 'function' && define.amd ? define(['require'], function(require) { return factory(function() { try { return require('moment'); } catch(e) { } }()); }) :\n(global.Chart = factory(global.moment));\n}(this, (function (moment) { 'use strict';\n\nmoment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;\n\n/* MIT license */\n\nvar conversions = {\n  rgb2hsl: rgb2hsl,\n  rgb2hsv: rgb2hsv,\n  rgb2hwb: rgb2hwb,\n  rgb2cmyk: rgb2cmyk,\n  rgb2keyword: rgb2keyword,\n  rgb2xyz: rgb2xyz,\n  rgb2lab: rgb2lab,\n  rgb2lch: rgb2lch,\n\n  hsl2rgb: hsl2rgb,\n  hsl2hsv: hsl2hsv,\n  hsl2hwb: hsl2hwb,\n  hsl2cmyk: hsl2cmyk,\n  hsl2keyword: hsl2keyword,\n\n  hsv2rgb: hsv2rgb,\n  hsv2hsl: hsv2hsl,\n  hsv2hwb: hsv2hwb,\n  hsv2cmyk: hsv2cmyk,\n  hsv2keyword: hsv2keyword,\n\n  hwb2rgb: hwb2rgb,\n  hwb2hsl: hwb2hsl,\n  hwb2hsv: hwb2hsv,\n  hwb2cmyk: hwb2cmyk,\n  hwb2keyword: hwb2keyword,\n\n  cmyk2rgb: cmyk2rgb,\n  cmyk2hsl: cmyk2hsl,\n  cmyk2hsv: cmyk2hsv,\n  cmyk2hwb: cmyk2hwb,\n  cmyk2keyword: cmyk2keyword,\n\n  keyword2rgb: keyword2rgb,\n  keyword2hsl: keyword2hsl,\n  keyword2hsv: keyword2hsv,\n  keyword2hwb: keyword2hwb,\n  keyword2cmyk: keyword2cmyk,\n  keyword2lab: keyword2lab,\n  keyword2xyz: keyword2xyz,\n\n  xyz2rgb: xyz2rgb,\n  xyz2lab: xyz2lab,\n  xyz2lch: xyz2lch,\n\n  lab2xyz: lab2xyz,\n  lab2rgb: lab2rgb,\n  lab2lch: lab2lch,\n\n  lch2lab: lch2lab,\n  lch2xyz: lch2xyz,\n  lch2rgb: lch2rgb\n};\n\n\nfunction rgb2hsl(rgb) {\n  var r = rgb[0]/255,\n      g = rgb[1]/255,\n      b = rgb[2]/255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      delta = max - min,\n      h, s, l;\n\n  if (max == min)\n    h = 0;\n  else if (r == max)\n    h = (g - b) / delta;\n  else if (g == max)\n    h = 2 + (b - r) / delta;\n  else if (b == max)\n    h = 4 + (r - g)/ delta;\n\n  h = Math.min(h * 60, 360);\n\n  if (h < 0)\n    h += 360;\n\n  l = (min + max) / 2;\n\n  if (max == min)\n    s = 0;\n  else if (l <= 0.5)\n    s = delta / (max + min);\n  else\n    s = delta / (2 - max - min);\n\n  return [h, s * 100, l * 100];\n}\n\nfunction rgb2hsv(rgb) {\n  var r = rgb[0],\n      g = rgb[1],\n      b = rgb[2],\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      delta = max - min,\n      h, s, v;\n\n  if (max == 0)\n    s = 0;\n  else\n    s = (delta/max * 1000)/10;\n\n  if (max == min)\n    h = 0;\n  else if (r == max)\n    h = (g - b) / delta;\n  else if (g == max)\n    h = 2 + (b - r) / delta;\n  else if (b == max)\n    h = 4 + (r - g) / delta;\n\n  h = Math.min(h * 60, 360);\n\n  if (h < 0)\n    h += 360;\n\n  v = ((max / 255) * 1000) / 10;\n\n  return [h, s, v];\n}\n\nfunction rgb2hwb(rgb) {\n  var r = rgb[0],\n      g = rgb[1],\n      b = rgb[2],\n      h = rgb2hsl(rgb)[0],\n      w = 1/255 * Math.min(r, Math.min(g, b)),\n      b = 1 - 1/255 * Math.max(r, Math.max(g, b));\n\n  return [h, w * 100, b * 100];\n}\n\nfunction rgb2cmyk(rgb) {\n  var r = rgb[0] / 255,\n      g = rgb[1] / 255,\n      b = rgb[2] / 255,\n      c, m, y, k;\n\n  k = Math.min(1 - r, 1 - g, 1 - b);\n  c = (1 - r - k) / (1 - k) || 0;\n  m = (1 - g - k) / (1 - k) || 0;\n  y = (1 - b - k) / (1 - k) || 0;\n  return [c * 100, m * 100, y * 100, k * 100];\n}\n\nfunction rgb2keyword(rgb) {\n  return reverseKeywords[JSON.stringify(rgb)];\n}\n\nfunction rgb2xyz(rgb) {\n  var r = rgb[0] / 255,\n      g = rgb[1] / 255,\n      b = rgb[2] / 255;\n\n  // assume sRGB\n  r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n  g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n  b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n  var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n  var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n  var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n  return [x * 100, y *100, z * 100];\n}\n\nfunction rgb2lab(rgb) {\n  var xyz = rgb2xyz(rgb),\n        x = xyz[0],\n        y = xyz[1],\n        z = xyz[2],\n        l, a, b;\n\n  x /= 95.047;\n  y /= 100;\n  z /= 108.883;\n\n  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);\n  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);\n  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);\n\n  l = (116 * y) - 16;\n  a = 500 * (x - y);\n  b = 200 * (y - z);\n\n  return [l, a, b];\n}\n\nfunction rgb2lch(args) {\n  return lab2lch(rgb2lab(args));\n}\n\nfunction hsl2rgb(hsl) {\n  var h = hsl[0] / 360,\n      s = hsl[1] / 100,\n      l = hsl[2] / 100,\n      t1, t2, t3, rgb, val;\n\n  if (s == 0) {\n    val = l * 255;\n    return [val, val, val];\n  }\n\n  if (l < 0.5)\n    t2 = l * (1 + s);\n  else\n    t2 = l + s - l * s;\n  t1 = 2 * l - t2;\n\n  rgb = [0, 0, 0];\n  for (var i = 0; i < 3; i++) {\n    t3 = h + 1 / 3 * - (i - 1);\n    t3 < 0 && t3++;\n    t3 > 1 && t3--;\n\n    if (6 * t3 < 1)\n      val = t1 + (t2 - t1) * 6 * t3;\n    else if (2 * t3 < 1)\n      val = t2;\n    else if (3 * t3 < 2)\n      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n    else\n      val = t1;\n\n    rgb[i] = val * 255;\n  }\n\n  return rgb;\n}\n\nfunction hsl2hsv(hsl) {\n  var h = hsl[0],\n      s = hsl[1] / 100,\n      l = hsl[2] / 100,\n      sv, v;\n\n  if(l === 0) {\n      // no need to do calc on black\n      // also avoids divide by 0 error\n      return [0, 0, 0];\n  }\n\n  l *= 2;\n  s *= (l <= 1) ? l : 2 - l;\n  v = (l + s) / 2;\n  sv = (2 * s) / (l + s);\n  return [h, sv * 100, v * 100];\n}\n\nfunction hsl2hwb(args) {\n  return rgb2hwb(hsl2rgb(args));\n}\n\nfunction hsl2cmyk(args) {\n  return rgb2cmyk(hsl2rgb(args));\n}\n\nfunction hsl2keyword(args) {\n  return rgb2keyword(hsl2rgb(args));\n}\n\n\nfunction hsv2rgb(hsv) {\n  var h = hsv[0] / 60,\n      s = hsv[1] / 100,\n      v = hsv[2] / 100,\n      hi = Math.floor(h) % 6;\n\n  var f = h - Math.floor(h),\n      p = 255 * v * (1 - s),\n      q = 255 * v * (1 - (s * f)),\n      t = 255 * v * (1 - (s * (1 - f))),\n      v = 255 * v;\n\n  switch(hi) {\n    case 0:\n      return [v, t, p];\n    case 1:\n      return [q, v, p];\n    case 2:\n      return [p, v, t];\n    case 3:\n      return [p, q, v];\n    case 4:\n      return [t, p, v];\n    case 5:\n      return [v, p, q];\n  }\n}\n\nfunction hsv2hsl(hsv) {\n  var h = hsv[0],\n      s = hsv[1] / 100,\n      v = hsv[2] / 100,\n      sl, l;\n\n  l = (2 - s) * v;\n  sl = s * v;\n  sl /= (l <= 1) ? l : 2 - l;\n  sl = sl || 0;\n  l /= 2;\n  return [h, sl * 100, l * 100];\n}\n\nfunction hsv2hwb(args) {\n  return rgb2hwb(hsv2rgb(args))\n}\n\nfunction hsv2cmyk(args) {\n  return rgb2cmyk(hsv2rgb(args));\n}\n\nfunction hsv2keyword(args) {\n  return rgb2keyword(hsv2rgb(args));\n}\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nfunction hwb2rgb(hwb) {\n  var h = hwb[0] / 360,\n      wh = hwb[1] / 100,\n      bl = hwb[2] / 100,\n      ratio = wh + bl,\n      i, v, f, n;\n\n  // wh + bl cant be > 1\n  if (ratio > 1) {\n    wh /= ratio;\n    bl /= ratio;\n  }\n\n  i = Math.floor(6 * h);\n  v = 1 - bl;\n  f = 6 * h - i;\n  if ((i & 0x01) != 0) {\n    f = 1 - f;\n  }\n  n = wh + f * (v - wh);  // linear interpolation\n\n  switch (i) {\n    default:\n    case 6:\n    case 0: r = v; g = n; b = wh; break;\n    case 1: r = n; g = v; b = wh; break;\n    case 2: r = wh; g = v; b = n; break;\n    case 3: r = wh; g = n; b = v; break;\n    case 4: r = n; g = wh; b = v; break;\n    case 5: r = v; g = wh; b = n; break;\n  }\n\n  return [r * 255, g * 255, b * 255];\n}\n\nfunction hwb2hsl(args) {\n  return rgb2hsl(hwb2rgb(args));\n}\n\nfunction hwb2hsv(args) {\n  return rgb2hsv(hwb2rgb(args));\n}\n\nfunction hwb2cmyk(args) {\n  return rgb2cmyk(hwb2rgb(args));\n}\n\nfunction hwb2keyword(args) {\n  return rgb2keyword(hwb2rgb(args));\n}\n\nfunction cmyk2rgb(cmyk) {\n  var c = cmyk[0] / 100,\n      m = cmyk[1] / 100,\n      y = cmyk[2] / 100,\n      k = cmyk[3] / 100,\n      r, g, b;\n\n  r = 1 - Math.min(1, c * (1 - k) + k);\n  g = 1 - Math.min(1, m * (1 - k) + k);\n  b = 1 - Math.min(1, y * (1 - k) + k);\n  return [r * 255, g * 255, b * 255];\n}\n\nfunction cmyk2hsl(args) {\n  return rgb2hsl(cmyk2rgb(args));\n}\n\nfunction cmyk2hsv(args) {\n  return rgb2hsv(cmyk2rgb(args));\n}\n\nfunction cmyk2hwb(args) {\n  return rgb2hwb(cmyk2rgb(args));\n}\n\nfunction cmyk2keyword(args) {\n  return rgb2keyword(cmyk2rgb(args));\n}\n\n\nfunction xyz2rgb(xyz) {\n  var x = xyz[0] / 100,\n      y = xyz[1] / 100,\n      z = xyz[2] / 100,\n      r, g, b;\n\n  r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n  g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n  b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n  // assume sRGB\n  r = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n    : r = (r * 12.92);\n\n  g = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n    : g = (g * 12.92);\n\n  b = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n    : b = (b * 12.92);\n\n  r = Math.min(Math.max(0, r), 1);\n  g = Math.min(Math.max(0, g), 1);\n  b = Math.min(Math.max(0, b), 1);\n\n  return [r * 255, g * 255, b * 255];\n}\n\nfunction xyz2lab(xyz) {\n  var x = xyz[0],\n      y = xyz[1],\n      z = xyz[2],\n      l, a, b;\n\n  x /= 95.047;\n  y /= 100;\n  z /= 108.883;\n\n  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);\n  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);\n  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);\n\n  l = (116 * y) - 16;\n  a = 500 * (x - y);\n  b = 200 * (y - z);\n\n  return [l, a, b];\n}\n\nfunction xyz2lch(args) {\n  return lab2lch(xyz2lab(args));\n}\n\nfunction lab2xyz(lab) {\n  var l = lab[0],\n      a = lab[1],\n      b = lab[2],\n      x, y, z, y2;\n\n  if (l <= 8) {\n    y = (l * 100) / 903.3;\n    y2 = (7.787 * (y / 100)) + (16 / 116);\n  } else {\n    y = 100 * Math.pow((l + 16) / 116, 3);\n    y2 = Math.pow(y / 100, 1/3);\n  }\n\n  x = x / 95.047 <= 0.008856 ? x = (95.047 * ((a / 500) + y2 - (16 / 116))) / 7.787 : 95.047 * Math.pow((a / 500) + y2, 3);\n\n  z = z / 108.883 <= 0.008859 ? z = (108.883 * (y2 - (b / 200) - (16 / 116))) / 7.787 : 108.883 * Math.pow(y2 - (b / 200), 3);\n\n  return [x, y, z];\n}\n\nfunction lab2lch(lab) {\n  var l = lab[0],\n      a = lab[1],\n      b = lab[2],\n      hr, h, c;\n\n  hr = Math.atan2(b, a);\n  h = hr * 360 / 2 / Math.PI;\n  if (h < 0) {\n    h += 360;\n  }\n  c = Math.sqrt(a * a + b * b);\n  return [l, c, h];\n}\n\nfunction lab2rgb(args) {\n  return xyz2rgb(lab2xyz(args));\n}\n\nfunction lch2lab(lch) {\n  var l = lch[0],\n      c = lch[1],\n      h = lch[2],\n      a, b, hr;\n\n  hr = h / 360 * 2 * Math.PI;\n  a = c * Math.cos(hr);\n  b = c * Math.sin(hr);\n  return [l, a, b];\n}\n\nfunction lch2xyz(args) {\n  return lab2xyz(lch2lab(args));\n}\n\nfunction lch2rgb(args) {\n  return lab2rgb(lch2lab(args));\n}\n\nfunction keyword2rgb(keyword) {\n  return cssKeywords[keyword];\n}\n\nfunction keyword2hsl(args) {\n  return rgb2hsl(keyword2rgb(args));\n}\n\nfunction keyword2hsv(args) {\n  return rgb2hsv(keyword2rgb(args));\n}\n\nfunction keyword2hwb(args) {\n  return rgb2hwb(keyword2rgb(args));\n}\n\nfunction keyword2cmyk(args) {\n  return rgb2cmyk(keyword2rgb(args));\n}\n\nfunction keyword2lab(args) {\n  return rgb2lab(keyword2rgb(args));\n}\n\nfunction keyword2xyz(args) {\n  return rgb2xyz(keyword2rgb(args));\n}\n\nvar cssKeywords = {\n  aliceblue:  [240,248,255],\n  antiquewhite: [250,235,215],\n  aqua: [0,255,255],\n  aquamarine: [127,255,212],\n  azure:  [240,255,255],\n  beige:  [245,245,220],\n  bisque: [255,228,196],\n  black:  [0,0,0],\n  blanchedalmond: [255,235,205],\n  blue: [0,0,255],\n  blueviolet: [138,43,226],\n  brown:  [165,42,42],\n  burlywood:  [222,184,135],\n  cadetblue:  [95,158,160],\n  chartreuse: [127,255,0],\n  chocolate:  [210,105,30],\n  coral:  [255,127,80],\n  cornflowerblue: [100,149,237],\n  cornsilk: [255,248,220],\n  crimson:  [220,20,60],\n  cyan: [0,255,255],\n  darkblue: [0,0,139],\n  darkcyan: [0,139,139],\n  darkgoldenrod:  [184,134,11],\n  darkgray: [169,169,169],\n  darkgreen:  [0,100,0],\n  darkgrey: [169,169,169],\n  darkkhaki:  [189,183,107],\n  darkmagenta:  [139,0,139],\n  darkolivegreen: [85,107,47],\n  darkorange: [255,140,0],\n  darkorchid: [153,50,204],\n  darkred:  [139,0,0],\n  darksalmon: [233,150,122],\n  darkseagreen: [143,188,143],\n  darkslateblue:  [72,61,139],\n  darkslategray:  [47,79,79],\n  darkslategrey:  [47,79,79],\n  darkturquoise:  [0,206,209],\n  darkviolet: [148,0,211],\n  deeppink: [255,20,147],\n  deepskyblue:  [0,191,255],\n  dimgray:  [105,105,105],\n  dimgrey:  [105,105,105],\n  dodgerblue: [30,144,255],\n  firebrick:  [178,34,34],\n  floralwhite:  [255,250,240],\n  forestgreen:  [34,139,34],\n  fuchsia:  [255,0,255],\n  gainsboro:  [220,220,220],\n  ghostwhite: [248,248,255],\n  gold: [255,215,0],\n  goldenrod:  [218,165,32],\n  gray: [128,128,128],\n  green:  [0,128,0],\n  greenyellow:  [173,255,47],\n  grey: [128,128,128],\n  honeydew: [240,255,240],\n  hotpink:  [255,105,180],\n  indianred:  [205,92,92],\n  indigo: [75,0,130],\n  ivory:  [255,255,240],\n  khaki:  [240,230,140],\n  lavender: [230,230,250],\n  lavenderblush:  [255,240,245],\n  lawngreen:  [124,252,0],\n  lemonchiffon: [255,250,205],\n  lightblue:  [173,216,230],\n  lightcoral: [240,128,128],\n  lightcyan:  [224,255,255],\n  lightgoldenrodyellow: [250,250,210],\n  lightgray:  [211,211,211],\n  lightgreen: [144,238,144],\n  lightgrey:  [211,211,211],\n  lightpink:  [255,182,193],\n  lightsalmon:  [255,160,122],\n  lightseagreen:  [32,178,170],\n  lightskyblue: [135,206,250],\n  lightslategray: [119,136,153],\n  lightslategrey: [119,136,153],\n  lightsteelblue: [176,196,222],\n  lightyellow:  [255,255,224],\n  lime: [0,255,0],\n  limegreen:  [50,205,50],\n  linen:  [250,240,230],\n  magenta:  [255,0,255],\n  maroon: [128,0,0],\n  mediumaquamarine: [102,205,170],\n  mediumblue: [0,0,205],\n  mediumorchid: [186,85,211],\n  mediumpurple: [147,112,219],\n  mediumseagreen: [60,179,113],\n  mediumslateblue:  [123,104,238],\n  mediumspringgreen:  [0,250,154],\n  mediumturquoise:  [72,209,204],\n  mediumvioletred:  [199,21,133],\n  midnightblue: [25,25,112],\n  mintcream:  [245,255,250],\n  mistyrose:  [255,228,225],\n  moccasin: [255,228,181],\n  navajowhite:  [255,222,173],\n  navy: [0,0,128],\n  oldlace:  [253,245,230],\n  olive:  [128,128,0],\n  olivedrab:  [107,142,35],\n  orange: [255,165,0],\n  orangered:  [255,69,0],\n  orchid: [218,112,214],\n  palegoldenrod:  [238,232,170],\n  palegreen:  [152,251,152],\n  paleturquoise:  [175,238,238],\n  palevioletred:  [219,112,147],\n  papayawhip: [255,239,213],\n  peachpuff:  [255,218,185],\n  peru: [205,133,63],\n  pink: [255,192,203],\n  plum: [221,160,221],\n  powderblue: [176,224,230],\n  purple: [128,0,128],\n  rebeccapurple: [102, 51, 153],\n  red:  [255,0,0],\n  rosybrown:  [188,143,143],\n  royalblue:  [65,105,225],\n  saddlebrown:  [139,69,19],\n  salmon: [250,128,114],\n  sandybrown: [244,164,96],\n  seagreen: [46,139,87],\n  seashell: [255,245,238],\n  sienna: [160,82,45],\n  silver: [192,192,192],\n  skyblue:  [135,206,235],\n  slateblue:  [106,90,205],\n  slategray:  [112,128,144],\n  slategrey:  [112,128,144],\n  snow: [255,250,250],\n  springgreen:  [0,255,127],\n  steelblue:  [70,130,180],\n  tan:  [210,180,140],\n  teal: [0,128,128],\n  thistle:  [216,191,216],\n  tomato: [255,99,71],\n  turquoise:  [64,224,208],\n  violet: [238,130,238],\n  wheat:  [245,222,179],\n  white:  [255,255,255],\n  whitesmoke: [245,245,245],\n  yellow: [255,255,0],\n  yellowgreen:  [154,205,50]\n};\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n  reverseKeywords[JSON.stringify(cssKeywords[key])] = key;\n}\n\nvar convert = function() {\n   return new Converter();\n};\n\nfor (var func in conversions) {\n  // export Raw versions\n  convert[func + \"Raw\"] =  (function(func) {\n    // accept array or plain args\n    return function(arg) {\n      if (typeof arg == \"number\")\n        arg = Array.prototype.slice.call(arguments);\n      return conversions[func](arg);\n    }\n  })(func);\n\n  var pair = /(\\w+)2(\\w+)/.exec(func),\n      from = pair[1],\n      to = pair[2];\n\n  // export rgb2hsl and [\"rgb\"][\"hsl\"]\n  convert[from] = convert[from] || {};\n\n  convert[from][to] = convert[func] = (function(func) { \n    return function(arg) {\n      if (typeof arg == \"number\")\n        arg = Array.prototype.slice.call(arguments);\n      \n      var val = conversions[func](arg);\n      if (typeof val == \"string\" || val === undefined)\n        return val; // keyword\n\n      for (var i = 0; i < val.length; i++)\n        val[i] = Math.round(val[i]);\n      return val;\n    }\n  })(func);\n}\n\n\n/* Converter does lazy conversion and caching */\nvar Converter = function() {\n   this.convs = {};\n};\n\n/* Either get the values for a space or\n  set the values for a space, depending on args */\nConverter.prototype.routeSpace = function(space, args) {\n   var values = args[0];\n   if (values === undefined) {\n      // color.rgb()\n      return this.getValues(space);\n   }\n   // color.rgb(10, 10, 10)\n   if (typeof values == \"number\") {\n      values = Array.prototype.slice.call(args);        \n   }\n\n   return this.setValues(space, values);\n};\n  \n/* Set the values for a space, invalidating cache */\nConverter.prototype.setValues = function(space, values) {\n   this.space = space;\n   this.convs = {};\n   this.convs[space] = values;\n   return this;\n};\n\n/* Get the values for a space. If there's already\n  a conversion for the space, fetch it, otherwise\n  compute it */\nConverter.prototype.getValues = function(space) {\n   var vals = this.convs[space];\n   if (!vals) {\n      var fspace = this.space,\n          from = this.convs[fspace];\n      vals = convert[fspace][space](from);\n\n      this.convs[space] = vals;\n   }\n  return vals;\n};\n\n[\"rgb\", \"hsl\", \"hsv\", \"cmyk\", \"keyword\"].forEach(function(space) {\n   Converter.prototype[space] = function(vals) {\n      return this.routeSpace(space, arguments);\n   };\n});\n\nvar colorConvert = convert;\n\nvar colorName = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\n\n/* MIT license */\n\n\nvar colorString = {\n   getRgba: getRgba,\n   getHsla: getHsla,\n   getRgb: getRgb,\n   getHsl: getHsl,\n   getHwb: getHwb,\n   getAlpha: getAlpha,\n\n   hexString: hexString,\n   rgbString: rgbString,\n   rgbaString: rgbaString,\n   percentString: percentString,\n   percentaString: percentaString,\n   hslString: hslString,\n   hslaString: hslaString,\n   hwbString: hwbString,\n   keyword: keyword\n};\n\nfunction getRgba(string) {\n   if (!string) {\n      return;\n   }\n   var abbr =  /^#([a-fA-F0-9]{3,4})$/i,\n       hex =  /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,\n       rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i,\n       per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i,\n       keyword = /(\\w+)/;\n\n   var rgb = [0, 0, 0],\n       a = 1,\n       match = string.match(abbr),\n       hexAlpha = \"\";\n   if (match) {\n      match = match[1];\n      hexAlpha = match[3];\n      for (var i = 0; i < rgb.length; i++) {\n         rgb[i] = parseInt(match[i] + match[i], 16);\n      }\n      if (hexAlpha) {\n         a = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;\n      }\n   }\n   else if (match = string.match(hex)) {\n      hexAlpha = match[2];\n      match = match[1];\n      for (var i = 0; i < rgb.length; i++) {\n         rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);\n      }\n      if (hexAlpha) {\n         a = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;\n      }\n   }\n   else if (match = string.match(rgba)) {\n      for (var i = 0; i < rgb.length; i++) {\n         rgb[i] = parseInt(match[i + 1]);\n      }\n      a = parseFloat(match[4]);\n   }\n   else if (match = string.match(per)) {\n      for (var i = 0; i < rgb.length; i++) {\n         rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n      }\n      a = parseFloat(match[4]);\n   }\n   else if (match = string.match(keyword)) {\n      if (match[1] == \"transparent\") {\n         return [0, 0, 0, 0];\n      }\n      rgb = colorName[match[1]];\n      if (!rgb) {\n         return;\n      }\n   }\n\n   for (var i = 0; i < rgb.length; i++) {\n      rgb[i] = scale(rgb[i], 0, 255);\n   }\n   if (!a && a != 0) {\n      a = 1;\n   }\n   else {\n      a = scale(a, 0, 1);\n   }\n   rgb[3] = a;\n   return rgb;\n}\n\nfunction getHsla(string) {\n   if (!string) {\n      return;\n   }\n   var hsl = /^hsla?\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\n   var match = string.match(hsl);\n   if (match) {\n      var alpha = parseFloat(match[4]);\n      var h = scale(parseInt(match[1]), 0, 360),\n          s = scale(parseFloat(match[2]), 0, 100),\n          l = scale(parseFloat(match[3]), 0, 100),\n          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\n      return [h, s, l, a];\n   }\n}\n\nfunction getHwb(string) {\n   if (!string) {\n      return;\n   }\n   var hwb = /^hwb\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\n   var match = string.match(hwb);\n   if (match) {\n    var alpha = parseFloat(match[4]);\n      var h = scale(parseInt(match[1]), 0, 360),\n          w = scale(parseFloat(match[2]), 0, 100),\n          b = scale(parseFloat(match[3]), 0, 100),\n          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\n      return [h, w, b, a];\n   }\n}\n\nfunction getRgb(string) {\n   var rgba = getRgba(string);\n   return rgba && rgba.slice(0, 3);\n}\n\nfunction getHsl(string) {\n  var hsla = getHsla(string);\n  return hsla && hsla.slice(0, 3);\n}\n\nfunction getAlpha(string) {\n   var vals = getRgba(string);\n   if (vals) {\n      return vals[3];\n   }\n   else if (vals = getHsla(string)) {\n      return vals[3];\n   }\n   else if (vals = getHwb(string)) {\n      return vals[3];\n   }\n}\n\n// generators\nfunction hexString(rgba, a) {\n   var a = (a !== undefined && rgba.length === 3) ? a : rgba[3];\n   return \"#\" + hexDouble(rgba[0]) \n              + hexDouble(rgba[1])\n              + hexDouble(rgba[2])\n              + (\n                 (a >= 0 && a < 1)\n                 ? hexDouble(Math.round(a * 255))\n                 : \"\"\n              );\n}\n\nfunction rgbString(rgba, alpha) {\n   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {\n      return rgbaString(rgba, alpha);\n   }\n   return \"rgb(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2] + \")\";\n}\n\nfunction rgbaString(rgba, alpha) {\n   if (alpha === undefined) {\n      alpha = (rgba[3] !== undefined ? rgba[3] : 1);\n   }\n   return \"rgba(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2]\n           + \", \" + alpha + \")\";\n}\n\nfunction percentString(rgba, alpha) {\n   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {\n      return percentaString(rgba, alpha);\n   }\n   var r = Math.round(rgba[0]/255 * 100),\n       g = Math.round(rgba[1]/255 * 100),\n       b = Math.round(rgba[2]/255 * 100);\n\n   return \"rgb(\" + r + \"%, \" + g + \"%, \" + b + \"%)\";\n}\n\nfunction percentaString(rgba, alpha) {\n   var r = Math.round(rgba[0]/255 * 100),\n       g = Math.round(rgba[1]/255 * 100),\n       b = Math.round(rgba[2]/255 * 100);\n   return \"rgba(\" + r + \"%, \" + g + \"%, \" + b + \"%, \" + (alpha || rgba[3] || 1) + \")\";\n}\n\nfunction hslString(hsla, alpha) {\n   if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {\n      return hslaString(hsla, alpha);\n   }\n   return \"hsl(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%)\";\n}\n\nfunction hslaString(hsla, alpha) {\n   if (alpha === undefined) {\n      alpha = (hsla[3] !== undefined ? hsla[3] : 1);\n   }\n   return \"hsla(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%, \"\n           + alpha + \")\";\n}\n\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\nfunction hwbString(hwb, alpha) {\n   if (alpha === undefined) {\n      alpha = (hwb[3] !== undefined ? hwb[3] : 1);\n   }\n   return \"hwb(\" + hwb[0] + \", \" + hwb[1] + \"%, \" + hwb[2] + \"%\"\n           + (alpha !== undefined && alpha !== 1 ? \", \" + alpha : \"\") + \")\";\n}\n\nfunction keyword(rgb) {\n  return reverseNames[rgb.slice(0, 3)];\n}\n\n// helpers\nfunction scale(num, min, max) {\n   return Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n  var str = num.toString(16).toUpperCase();\n  return (str.length < 2) ? \"0\" + str : str;\n}\n\n\n//create a list of reverse color names\nvar reverseNames = {};\nfor (var name in colorName) {\n   reverseNames[colorName[name]] = name;\n}\n\n/* MIT license */\n\n\n\nvar Color = function (obj) {\n\tif (obj instanceof Color) {\n\t\treturn obj;\n\t}\n\tif (!(this instanceof Color)) {\n\t\treturn new Color(obj);\n\t}\n\n\tthis.valid = false;\n\tthis.values = {\n\t\trgb: [0, 0, 0],\n\t\thsl: [0, 0, 0],\n\t\thsv: [0, 0, 0],\n\t\thwb: [0, 0, 0],\n\t\tcmyk: [0, 0, 0, 0],\n\t\talpha: 1\n\t};\n\n\t// parse Color() argument\n\tvar vals;\n\tif (typeof obj === 'string') {\n\t\tvals = colorString.getRgba(obj);\n\t\tif (vals) {\n\t\t\tthis.setValues('rgb', vals);\n\t\t} else if (vals = colorString.getHsla(obj)) {\n\t\t\tthis.setValues('hsl', vals);\n\t\t} else if (vals = colorString.getHwb(obj)) {\n\t\t\tthis.setValues('hwb', vals);\n\t\t}\n\t} else if (typeof obj === 'object') {\n\t\tvals = obj;\n\t\tif (vals.r !== undefined || vals.red !== undefined) {\n\t\t\tthis.setValues('rgb', vals);\n\t\t} else if (vals.l !== undefined || vals.lightness !== undefined) {\n\t\t\tthis.setValues('hsl', vals);\n\t\t} else if (vals.v !== undefined || vals.value !== undefined) {\n\t\t\tthis.setValues('hsv', vals);\n\t\t} else if (vals.w !== undefined || vals.whiteness !== undefined) {\n\t\t\tthis.setValues('hwb', vals);\n\t\t} else if (vals.c !== undefined || vals.cyan !== undefined) {\n\t\t\tthis.setValues('cmyk', vals);\n\t\t}\n\t}\n};\n\nColor.prototype = {\n\tisValid: function () {\n\t\treturn this.valid;\n\t},\n\trgb: function () {\n\t\treturn this.setSpace('rgb', arguments);\n\t},\n\thsl: function () {\n\t\treturn this.setSpace('hsl', arguments);\n\t},\n\thsv: function () {\n\t\treturn this.setSpace('hsv', arguments);\n\t},\n\thwb: function () {\n\t\treturn this.setSpace('hwb', arguments);\n\t},\n\tcmyk: function () {\n\t\treturn this.setSpace('cmyk', arguments);\n\t},\n\n\trgbArray: function () {\n\t\treturn this.values.rgb;\n\t},\n\thslArray: function () {\n\t\treturn this.values.hsl;\n\t},\n\thsvArray: function () {\n\t\treturn this.values.hsv;\n\t},\n\thwbArray: function () {\n\t\tvar values = this.values;\n\t\tif (values.alpha !== 1) {\n\t\t\treturn values.hwb.concat([values.alpha]);\n\t\t}\n\t\treturn values.hwb;\n\t},\n\tcmykArray: function () {\n\t\treturn this.values.cmyk;\n\t},\n\trgbaArray: function () {\n\t\tvar values = this.values;\n\t\treturn values.rgb.concat([values.alpha]);\n\t},\n\thslaArray: function () {\n\t\tvar values = this.values;\n\t\treturn values.hsl.concat([values.alpha]);\n\t},\n\talpha: function (val) {\n\t\tif (val === undefined) {\n\t\t\treturn this.values.alpha;\n\t\t}\n\t\tthis.setValues('alpha', val);\n\t\treturn this;\n\t},\n\n\tred: function (val) {\n\t\treturn this.setChannel('rgb', 0, val);\n\t},\n\tgreen: function (val) {\n\t\treturn this.setChannel('rgb', 1, val);\n\t},\n\tblue: function (val) {\n\t\treturn this.setChannel('rgb', 2, val);\n\t},\n\thue: function (val) {\n\t\tif (val) {\n\t\t\tval %= 360;\n\t\t\tval = val < 0 ? 360 + val : val;\n\t\t}\n\t\treturn this.setChannel('hsl', 0, val);\n\t},\n\tsaturation: function (val) {\n\t\treturn this.setChannel('hsl', 1, val);\n\t},\n\tlightness: function (val) {\n\t\treturn this.setChannel('hsl', 2, val);\n\t},\n\tsaturationv: function (val) {\n\t\treturn this.setChannel('hsv', 1, val);\n\t},\n\twhiteness: function (val) {\n\t\treturn this.setChannel('hwb', 1, val);\n\t},\n\tblackness: function (val) {\n\t\treturn this.setChannel('hwb', 2, val);\n\t},\n\tvalue: function (val) {\n\t\treturn this.setChannel('hsv', 2, val);\n\t},\n\tcyan: function (val) {\n\t\treturn this.setChannel('cmyk', 0, val);\n\t},\n\tmagenta: function (val) {\n\t\treturn this.setChannel('cmyk', 1, val);\n\t},\n\tyellow: function (val) {\n\t\treturn this.setChannel('cmyk', 2, val);\n\t},\n\tblack: function (val) {\n\t\treturn this.setChannel('cmyk', 3, val);\n\t},\n\n\thexString: function () {\n\t\treturn colorString.hexString(this.values.rgb);\n\t},\n\trgbString: function () {\n\t\treturn colorString.rgbString(this.values.rgb, this.values.alpha);\n\t},\n\trgbaString: function () {\n\t\treturn colorString.rgbaString(this.values.rgb, this.values.alpha);\n\t},\n\tpercentString: function () {\n\t\treturn colorString.percentString(this.values.rgb, this.values.alpha);\n\t},\n\thslString: function () {\n\t\treturn colorString.hslString(this.values.hsl, this.values.alpha);\n\t},\n\thslaString: function () {\n\t\treturn colorString.hslaString(this.values.hsl, this.values.alpha);\n\t},\n\thwbString: function () {\n\t\treturn colorString.hwbString(this.values.hwb, this.values.alpha);\n\t},\n\tkeyword: function () {\n\t\treturn colorString.keyword(this.values.rgb, this.values.alpha);\n\t},\n\n\trgbNumber: function () {\n\t\tvar rgb = this.values.rgb;\n\t\treturn (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];\n\t},\n\n\tluminosity: function () {\n\t\t// http://www.w3.org/TR/WCAG20/#relativeluminancedef\n\t\tvar rgb = this.values.rgb;\n\t\tvar lum = [];\n\t\tfor (var i = 0; i < rgb.length; i++) {\n\t\t\tvar chan = rgb[i] / 255;\n\t\t\tlum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);\n\t\t}\n\t\treturn 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n\t},\n\n\tcontrast: function (color2) {\n\t\t// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n\t\tvar lum1 = this.luminosity();\n\t\tvar lum2 = color2.luminosity();\n\t\tif (lum1 > lum2) {\n\t\t\treturn (lum1 + 0.05) / (lum2 + 0.05);\n\t\t}\n\t\treturn (lum2 + 0.05) / (lum1 + 0.05);\n\t},\n\n\tlevel: function (color2) {\n\t\tvar contrastRatio = this.contrast(color2);\n\t\tif (contrastRatio >= 7.1) {\n\t\t\treturn 'AAA';\n\t\t}\n\n\t\treturn (contrastRatio >= 4.5) ? 'AA' : '';\n\t},\n\n\tdark: function () {\n\t\t// YIQ equation from http://24ways.org/2010/calculating-color-contrast\n\t\tvar rgb = this.values.rgb;\n\t\tvar yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n\t\treturn yiq < 128;\n\t},\n\n\tlight: function () {\n\t\treturn !this.dark();\n\t},\n\n\tnegate: function () {\n\t\tvar rgb = [];\n\t\tfor (var i = 0; i < 3; i++) {\n\t\t\trgb[i] = 255 - this.values.rgb[i];\n\t\t}\n\t\tthis.setValues('rgb', rgb);\n\t\treturn this;\n\t},\n\n\tlighten: function (ratio) {\n\t\tvar hsl = this.values.hsl;\n\t\thsl[2] += hsl[2] * ratio;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\tdarken: function (ratio) {\n\t\tvar hsl = this.values.hsl;\n\t\thsl[2] -= hsl[2] * ratio;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\tsaturate: function (ratio) {\n\t\tvar hsl = this.values.hsl;\n\t\thsl[1] += hsl[1] * ratio;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\tdesaturate: function (ratio) {\n\t\tvar hsl = this.values.hsl;\n\t\thsl[1] -= hsl[1] * ratio;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\twhiten: function (ratio) {\n\t\tvar hwb = this.values.hwb;\n\t\thwb[1] += hwb[1] * ratio;\n\t\tthis.setValues('hwb', hwb);\n\t\treturn this;\n\t},\n\n\tblacken: function (ratio) {\n\t\tvar hwb = this.values.hwb;\n\t\thwb[2] += hwb[2] * ratio;\n\t\tthis.setValues('hwb', hwb);\n\t\treturn this;\n\t},\n\n\tgreyscale: function () {\n\t\tvar rgb = this.values.rgb;\n\t\t// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\t\tvar val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n\t\tthis.setValues('rgb', [val, val, val]);\n\t\treturn this;\n\t},\n\n\tclearer: function (ratio) {\n\t\tvar alpha = this.values.alpha;\n\t\tthis.setValues('alpha', alpha - (alpha * ratio));\n\t\treturn this;\n\t},\n\n\topaquer: function (ratio) {\n\t\tvar alpha = this.values.alpha;\n\t\tthis.setValues('alpha', alpha + (alpha * ratio));\n\t\treturn this;\n\t},\n\n\trotate: function (degrees) {\n\t\tvar hsl = this.values.hsl;\n\t\tvar hue = (hsl[0] + degrees) % 360;\n\t\thsl[0] = hue < 0 ? 360 + hue : hue;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\t/**\n\t * Ported from sass implementation in C\n\t * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n\t */\n\tmix: function (mixinColor, weight) {\n\t\tvar color1 = this;\n\t\tvar color2 = mixinColor;\n\t\tvar p = weight === undefined ? 0.5 : weight;\n\n\t\tvar w = 2 * p - 1;\n\t\tvar a = color1.alpha() - color2.alpha();\n\n\t\tvar w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t\tvar w2 = 1 - w1;\n\n\t\treturn this\n\t\t\t.rgb(\n\t\t\t\tw1 * color1.red() + w2 * color2.red(),\n\t\t\t\tw1 * color1.green() + w2 * color2.green(),\n\t\t\t\tw1 * color1.blue() + w2 * color2.blue()\n\t\t\t)\n\t\t\t.alpha(color1.alpha() * p + color2.alpha() * (1 - p));\n\t},\n\n\ttoJSON: function () {\n\t\treturn this.rgb();\n\t},\n\n\tclone: function () {\n\t\t// NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,\n\t\t// making the final build way to big to embed in Chart.js. So let's do it manually,\n\t\t// assuming that values to clone are 1 dimension arrays containing only numbers,\n\t\t// except 'alpha' which is a number.\n\t\tvar result = new Color();\n\t\tvar source = this.values;\n\t\tvar target = result.values;\n\t\tvar value, type;\n\n\t\tfor (var prop in source) {\n\t\t\tif (source.hasOwnProperty(prop)) {\n\t\t\t\tvalue = source[prop];\n\t\t\t\ttype = ({}).toString.call(value);\n\t\t\t\tif (type === '[object Array]') {\n\t\t\t\t\ttarget[prop] = value.slice(0);\n\t\t\t\t} else if (type === '[object Number]') {\n\t\t\t\t\ttarget[prop] = value;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('unexpected color value:', value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n\nColor.prototype.spaces = {\n\trgb: ['red', 'green', 'blue'],\n\thsl: ['hue', 'saturation', 'lightness'],\n\thsv: ['hue', 'saturation', 'value'],\n\thwb: ['hue', 'whiteness', 'blackness'],\n\tcmyk: ['cyan', 'magenta', 'yellow', 'black']\n};\n\nColor.prototype.maxes = {\n\trgb: [255, 255, 255],\n\thsl: [360, 100, 100],\n\thsv: [360, 100, 100],\n\thwb: [360, 100, 100],\n\tcmyk: [100, 100, 100, 100]\n};\n\nColor.prototype.getValues = function (space) {\n\tvar values = this.values;\n\tvar vals = {};\n\n\tfor (var i = 0; i < space.length; i++) {\n\t\tvals[space.charAt(i)] = values[space][i];\n\t}\n\n\tif (values.alpha !== 1) {\n\t\tvals.a = values.alpha;\n\t}\n\n\t// {r: 255, g: 255, b: 255, a: 0.4}\n\treturn vals;\n};\n\nColor.prototype.setValues = function (space, vals) {\n\tvar values = this.values;\n\tvar spaces = this.spaces;\n\tvar maxes = this.maxes;\n\tvar alpha = 1;\n\tvar i;\n\n\tthis.valid = true;\n\n\tif (space === 'alpha') {\n\t\talpha = vals;\n\t} else if (vals.length) {\n\t\t// [10, 10, 10]\n\t\tvalues[space] = vals.slice(0, space.length);\n\t\talpha = vals[space.length];\n\t} else if (vals[space.charAt(0)] !== undefined) {\n\t\t// {r: 10, g: 10, b: 10}\n\t\tfor (i = 0; i < space.length; i++) {\n\t\t\tvalues[space][i] = vals[space.charAt(i)];\n\t\t}\n\n\t\talpha = vals.a;\n\t} else if (vals[spaces[space][0]] !== undefined) {\n\t\t// {red: 10, green: 10, blue: 10}\n\t\tvar chans = spaces[space];\n\n\t\tfor (i = 0; i < space.length; i++) {\n\t\t\tvalues[space][i] = vals[chans[i]];\n\t\t}\n\n\t\talpha = vals.alpha;\n\t}\n\n\tvalues.alpha = Math.max(0, Math.min(1, (alpha === undefined ? values.alpha : alpha)));\n\n\tif (space === 'alpha') {\n\t\treturn false;\n\t}\n\n\tvar capped;\n\n\t// cap values of the space prior converting all values\n\tfor (i = 0; i < space.length; i++) {\n\t\tcapped = Math.max(0, Math.min(maxes[space][i], values[space][i]));\n\t\tvalues[space][i] = Math.round(capped);\n\t}\n\n\t// convert to all the other color spaces\n\tfor (var sname in spaces) {\n\t\tif (sname !== space) {\n\t\t\tvalues[sname] = colorConvert[space][sname](values[space]);\n\t\t}\n\t}\n\n\treturn true;\n};\n\nColor.prototype.setSpace = function (space, args) {\n\tvar vals = args[0];\n\n\tif (vals === undefined) {\n\t\t// color.rgb()\n\t\treturn this.getValues(space);\n\t}\n\n\t// color.rgb(10, 10, 10)\n\tif (typeof vals === 'number') {\n\t\tvals = Array.prototype.slice.call(args);\n\t}\n\n\tthis.setValues(space, vals);\n\treturn this;\n};\n\nColor.prototype.setChannel = function (space, index, val) {\n\tvar svalues = this.values[space];\n\tif (val === undefined) {\n\t\t// color.red()\n\t\treturn svalues[index];\n\t} else if (val === svalues[index]) {\n\t\t// color.red(color.red())\n\t\treturn this;\n\t}\n\n\t// color.red(100)\n\tsvalues[index] = val;\n\tthis.setValues(space, svalues);\n\n\treturn this;\n};\n\nif (typeof window !== 'undefined') {\n\twindow.Color = Color;\n}\n\nvar chartjsColor = Color;\n\n/**\n * @namespace Chart.helpers\n */\nvar helpers = {\n\t/**\n\t * An empty function that can be used, for example, for optional callback.\n\t */\n\tnoop: function() {},\n\n\t/**\n\t * Returns a unique id, sequentially generated from a global variable.\n\t * @returns {number}\n\t * @function\n\t */\n\tuid: (function() {\n\t\tvar id = 0;\n\t\treturn function() {\n\t\t\treturn id++;\n\t\t};\n\t}()),\n\n\t/**\n\t * Returns true if `value` is neither null nor undefined, else returns false.\n\t * @param {*} value - The value to test.\n\t * @returns {boolean}\n\t * @since 2.7.0\n\t */\n\tisNullOrUndef: function(value) {\n\t\treturn value === null || typeof value === 'undefined';\n\t},\n\n\t/**\n\t * Returns true if `value` is an array (including typed arrays), else returns false.\n\t * @param {*} value - The value to test.\n\t * @returns {boolean}\n\t * @function\n\t */\n\tisArray: function(value) {\n\t\tif (Array.isArray && Array.isArray(value)) {\n\t\t\treturn true;\n\t\t}\n\t\tvar type = Object.prototype.toString.call(value);\n\t\tif (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\n\t/**\n\t * Returns true if `value` is an object (excluding null), else returns false.\n\t * @param {*} value - The value to test.\n\t * @returns {boolean}\n\t * @since 2.7.0\n\t */\n\tisObject: function(value) {\n\t\treturn value !== null && Object.prototype.toString.call(value) === '[object Object]';\n\t},\n\n\t/**\n\t * Returns true if `value` is a finite number, else returns false\n\t * @param {*} value  - The value to test.\n\t * @returns {boolean}\n\t */\n\tisFinite: function(value) {\n\t\treturn (typeof value === 'number' || value instanceof Number) && isFinite(value);\n\t},\n\n\t/**\n\t * Returns `value` if defined, else returns `defaultValue`.\n\t * @param {*} value - The value to return if defined.\n\t * @param {*} defaultValue - The value to return if `value` is undefined.\n\t * @returns {*}\n\t */\n\tvalueOrDefault: function(value, defaultValue) {\n\t\treturn typeof value === 'undefined' ? defaultValue : value;\n\t},\n\n\t/**\n\t * Returns value at the given `index` in array if defined, else returns `defaultValue`.\n\t * @param {Array} value - The array to lookup for value at `index`.\n\t * @param {number} index - The index in `value` to lookup for value.\n\t * @param {*} defaultValue - The value to return if `value[index]` is undefined.\n\t * @returns {*}\n\t */\n\tvalueAtIndexOrDefault: function(value, index, defaultValue) {\n\t\treturn helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);\n\t},\n\n\t/**\n\t * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n\t * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n\t * @param {function} fn - The function to call.\n\t * @param {Array|undefined|null} args - The arguments with which `fn` should be called.\n\t * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.\n\t * @returns {*}\n\t */\n\tcallback: function(fn, args, thisArg) {\n\t\tif (fn && typeof fn.call === 'function') {\n\t\t\treturn fn.apply(thisArg, args);\n\t\t}\n\t},\n\n\t/**\n\t * Note(SB) for performance sake, this method should only be used when loopable type\n\t * is unknown or in none intensive code (not called often and small loopable). Else\n\t * it's preferable to use a regular for() loop and save extra function calls.\n\t * @param {object|Array} loopable - The object or array to be iterated.\n\t * @param {function} fn - The function to call for each item.\n\t * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.\n\t * @param {boolean} [reverse] - If true, iterates backward on the loopable.\n\t */\n\teach: function(loopable, fn, thisArg, reverse) {\n\t\tvar i, len, keys;\n\t\tif (helpers.isArray(loopable)) {\n\t\t\tlen = loopable.length;\n\t\t\tif (reverse) {\n\t\t\t\tfor (i = len - 1; i >= 0; i--) {\n\t\t\t\t\tfn.call(thisArg, loopable[i], i);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\tfn.call(thisArg, loopable[i], i);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (helpers.isObject(loopable)) {\n\t\t\tkeys = Object.keys(loopable);\n\t\t\tlen = keys.length;\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\tfn.call(thisArg, loopable[keys[i]], keys[i]);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n\t * @see https://stackoverflow.com/a/14853974\n\t * @param {Array} a0 - The array to compare\n\t * @param {Array} a1 - The array to compare\n\t * @returns {boolean}\n\t */\n\tarrayEquals: function(a0, a1) {\n\t\tvar i, ilen, v0, v1;\n\n\t\tif (!a0 || !a1 || a0.length !== a1.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (i = 0, ilen = a0.length; i < ilen; ++i) {\n\t\t\tv0 = a0[i];\n\t\t\tv1 = a1[i];\n\n\t\t\tif (v0 instanceof Array && v1 instanceof Array) {\n\t\t\t\tif (!helpers.arrayEquals(v0, v1)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (v0 !== v1) {\n\t\t\t\t// NOTE: two different object instances will never be equal: {x:20} != {x:20}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * Returns a deep copy of `source` without keeping references on objects and arrays.\n\t * @param {*} source - The value to clone.\n\t * @returns {*}\n\t */\n\tclone: function(source) {\n\t\tif (helpers.isArray(source)) {\n\t\t\treturn source.map(helpers.clone);\n\t\t}\n\n\t\tif (helpers.isObject(source)) {\n\t\t\tvar target = {};\n\t\t\tvar keys = Object.keys(source);\n\t\t\tvar klen = keys.length;\n\t\t\tvar k = 0;\n\n\t\t\tfor (; k < klen; ++k) {\n\t\t\t\ttarget[keys[k]] = helpers.clone(source[keys[k]]);\n\t\t\t}\n\n\t\t\treturn target;\n\t\t}\n\n\t\treturn source;\n\t},\n\n\t/**\n\t * The default merger when Chart.helpers.merge is called without merger option.\n\t * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n\t * @private\n\t */\n\t_merger: function(key, target, source, options) {\n\t\tvar tval = target[key];\n\t\tvar sval = source[key];\n\n\t\tif (helpers.isObject(tval) && helpers.isObject(sval)) {\n\t\t\thelpers.merge(tval, sval, options);\n\t\t} else {\n\t\t\ttarget[key] = helpers.clone(sval);\n\t\t}\n\t},\n\n\t/**\n\t * Merges source[key] in target[key] only if target[key] is undefined.\n\t * @private\n\t */\n\t_mergerIf: function(key, target, source) {\n\t\tvar tval = target[key];\n\t\tvar sval = source[key];\n\n\t\tif (helpers.isObject(tval) && helpers.isObject(sval)) {\n\t\t\thelpers.mergeIf(tval, sval);\n\t\t} else if (!target.hasOwnProperty(key)) {\n\t\t\ttarget[key] = helpers.clone(sval);\n\t\t}\n\t},\n\n\t/**\n\t * Recursively deep copies `source` properties into `target` with the given `options`.\n\t * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n\t * @param {object} target - The target object in which all sources are merged into.\n\t * @param {object|object[]} source - Object(s) to merge into `target`.\n\t * @param {object} [options] - Merging options:\n\t * @param {function} [options.merger] - The merge method (key, target, source, options)\n\t * @returns {object} The `target` object.\n\t */\n\tmerge: function(target, source, options) {\n\t\tvar sources = helpers.isArray(source) ? source : [source];\n\t\tvar ilen = sources.length;\n\t\tvar merge, i, keys, klen, k;\n\n\t\tif (!helpers.isObject(target)) {\n\t\t\treturn target;\n\t\t}\n\n\t\toptions = options || {};\n\t\tmerge = options.merger || helpers._merger;\n\n\t\tfor (i = 0; i < ilen; ++i) {\n\t\t\tsource = sources[i];\n\t\t\tif (!helpers.isObject(source)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tkeys = Object.keys(source);\n\t\t\tfor (k = 0, klen = keys.length; k < klen; ++k) {\n\t\t\t\tmerge(keys[k], target, source, options);\n\t\t\t}\n\t\t}\n\n\t\treturn target;\n\t},\n\n\t/**\n\t * Recursively deep copies `source` properties into `target` *only* if not defined in target.\n\t * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n\t * @param {object} target - The target object in which all sources are merged into.\n\t * @param {object|object[]} source - Object(s) to merge into `target`.\n\t * @returns {object} The `target` object.\n\t */\n\tmergeIf: function(target, source) {\n\t\treturn helpers.merge(target, source, {merger: helpers._mergerIf});\n\t},\n\n\t/**\n\t * Applies the contents of two or more objects together into the first object.\n\t * @param {object} target - The target object in which all objects are merged into.\n\t * @param {object} arg1 - Object containing additional properties to merge in target.\n\t * @param {object} argN - Additional objects containing properties to merge in target.\n\t * @returns {object} The `target` object.\n\t */\n\textend: function(target) {\n\t\tvar setFn = function(value, key) {\n\t\t\ttarget[key] = value;\n\t\t};\n\t\tfor (var i = 1, ilen = arguments.length; i < ilen; ++i) {\n\t\t\thelpers.each(arguments[i], setFn);\n\t\t}\n\t\treturn target;\n\t},\n\n\t/**\n\t * Basic javascript inheritance based on the model created in Backbone.js\n\t */\n\tinherits: function(extensions) {\n\t\tvar me = this;\n\t\tvar ChartElement = (extensions && extensions.hasOwnProperty('constructor')) ? extensions.constructor : function() {\n\t\t\treturn me.apply(this, arguments);\n\t\t};\n\n\t\tvar Surrogate = function() {\n\t\t\tthis.constructor = ChartElement;\n\t\t};\n\n\t\tSurrogate.prototype = me.prototype;\n\t\tChartElement.prototype = new Surrogate();\n\t\tChartElement.extend = helpers.inherits;\n\n\t\tif (extensions) {\n\t\t\thelpers.extend(ChartElement.prototype, extensions);\n\t\t}\n\n\t\tChartElement.__super__ = me.prototype;\n\t\treturn ChartElement;\n\t}\n};\n\nvar helpers_core = helpers;\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart.helpers.callback instead.\n * @function Chart.helpers.callCallback\n * @deprecated since version 2.6.0\n * @todo remove at version 3\n * @private\n */\nhelpers.callCallback = helpers.callback;\n\n/**\n * Provided for backward compatibility, use Array.prototype.indexOf instead.\n * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+\n * @function Chart.helpers.indexOf\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers.indexOf = function(array, item, fromIndex) {\n\treturn Array.prototype.indexOf.call(array, item, fromIndex);\n};\n\n/**\n * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.\n * @function Chart.helpers.getValueOrDefault\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers.getValueOrDefault = helpers.valueOrDefault;\n\n/**\n * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.\n * @function Chart.helpers.getValueAtIndexOrDefault\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;\n\n/**\n * Easing functions adapted from Robert Penner's easing equations.\n * @namespace Chart.helpers.easingEffects\n * @see http://www.robertpenner.com/easing/\n */\nvar effects = {\n\tlinear: function(t) {\n\t\treturn t;\n\t},\n\n\teaseInQuad: function(t) {\n\t\treturn t * t;\n\t},\n\n\teaseOutQuad: function(t) {\n\t\treturn -t * (t - 2);\n\t},\n\n\teaseInOutQuad: function(t) {\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * t * t;\n\t\t}\n\t\treturn -0.5 * ((--t) * (t - 2) - 1);\n\t},\n\n\teaseInCubic: function(t) {\n\t\treturn t * t * t;\n\t},\n\n\teaseOutCubic: function(t) {\n\t\treturn (t = t - 1) * t * t + 1;\n\t},\n\n\teaseInOutCubic: function(t) {\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * t * t * t;\n\t\t}\n\t\treturn 0.5 * ((t -= 2) * t * t + 2);\n\t},\n\n\teaseInQuart: function(t) {\n\t\treturn t * t * t * t;\n\t},\n\n\teaseOutQuart: function(t) {\n\t\treturn -((t = t - 1) * t * t * t - 1);\n\t},\n\n\teaseInOutQuart: function(t) {\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * t * t * t * t;\n\t\t}\n\t\treturn -0.5 * ((t -= 2) * t * t * t - 2);\n\t},\n\n\teaseInQuint: function(t) {\n\t\treturn t * t * t * t * t;\n\t},\n\n\teaseOutQuint: function(t) {\n\t\treturn (t = t - 1) * t * t * t * t + 1;\n\t},\n\n\teaseInOutQuint: function(t) {\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * t * t * t * t * t;\n\t\t}\n\t\treturn 0.5 * ((t -= 2) * t * t * t * t + 2);\n\t},\n\n\teaseInSine: function(t) {\n\t\treturn -Math.cos(t * (Math.PI / 2)) + 1;\n\t},\n\n\teaseOutSine: function(t) {\n\t\treturn Math.sin(t * (Math.PI / 2));\n\t},\n\n\teaseInOutSine: function(t) {\n\t\treturn -0.5 * (Math.cos(Math.PI * t) - 1);\n\t},\n\n\teaseInExpo: function(t) {\n\t\treturn (t === 0) ? 0 : Math.pow(2, 10 * (t - 1));\n\t},\n\n\teaseOutExpo: function(t) {\n\t\treturn (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1;\n\t},\n\n\teaseInOutExpo: function(t) {\n\t\tif (t === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (t === 1) {\n\t\t\treturn 1;\n\t\t}\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * Math.pow(2, 10 * (t - 1));\n\t\t}\n\t\treturn 0.5 * (-Math.pow(2, -10 * --t) + 2);\n\t},\n\n\teaseInCirc: function(t) {\n\t\tif (t >= 1) {\n\t\t\treturn t;\n\t\t}\n\t\treturn -(Math.sqrt(1 - t * t) - 1);\n\t},\n\n\teaseOutCirc: function(t) {\n\t\treturn Math.sqrt(1 - (t = t - 1) * t);\n\t},\n\n\teaseInOutCirc: function(t) {\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn -0.5 * (Math.sqrt(1 - t * t) - 1);\n\t\t}\n\t\treturn 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n\t},\n\n\teaseInElastic: function(t) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = 1;\n\t\tif (t === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (t === 1) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (!p) {\n\t\t\tp = 0.3;\n\t\t}\n\t\tif (a < 1) {\n\t\t\ta = 1;\n\t\t\ts = p / 4;\n\t\t} else {\n\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t}\n\t\treturn -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));\n\t},\n\n\teaseOutElastic: function(t) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = 1;\n\t\tif (t === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (t === 1) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (!p) {\n\t\t\tp = 0.3;\n\t\t}\n\t\tif (a < 1) {\n\t\t\ta = 1;\n\t\t\ts = p / 4;\n\t\t} else {\n\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t}\n\t\treturn a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;\n\t},\n\n\teaseInOutElastic: function(t) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = 1;\n\t\tif (t === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tif ((t /= 0.5) === 2) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (!p) {\n\t\t\tp = 0.45;\n\t\t}\n\t\tif (a < 1) {\n\t\t\ta = 1;\n\t\t\ts = p / 4;\n\t\t} else {\n\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t}\n\t\tif (t < 1) {\n\t\t\treturn -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));\n\t\t}\n\t\treturn a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;\n\t},\n\teaseInBack: function(t) {\n\t\tvar s = 1.70158;\n\t\treturn t * t * ((s + 1) * t - s);\n\t},\n\n\teaseOutBack: function(t) {\n\t\tvar s = 1.70158;\n\t\treturn (t = t - 1) * t * ((s + 1) * t + s) + 1;\n\t},\n\n\teaseInOutBack: function(t) {\n\t\tvar s = 1.70158;\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));\n\t\t}\n\t\treturn 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);\n\t},\n\n\teaseInBounce: function(t) {\n\t\treturn 1 - effects.easeOutBounce(1 - t);\n\t},\n\n\teaseOutBounce: function(t) {\n\t\tif (t < (1 / 2.75)) {\n\t\t\treturn 7.5625 * t * t;\n\t\t}\n\t\tif (t < (2 / 2.75)) {\n\t\t\treturn 7.5625 * (t -= (1.5 / 2.75)) * t + 0.75;\n\t\t}\n\t\tif (t < (2.5 / 2.75)) {\n\t\t\treturn 7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375;\n\t\t}\n\t\treturn 7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375;\n\t},\n\n\teaseInOutBounce: function(t) {\n\t\tif (t < 0.5) {\n\t\t\treturn effects.easeInBounce(t * 2) * 0.5;\n\t\t}\n\t\treturn effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;\n\t}\n};\n\nvar helpers_easing = {\n\teffects: effects\n};\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart.helpers.easing.effects instead.\n * @function Chart.helpers.easingEffects\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers_core.easingEffects = effects;\n\nvar PI = Math.PI;\nvar RAD_PER_DEG = PI / 180;\nvar DOUBLE_PI = PI * 2;\nvar HALF_PI = PI / 2;\nvar QUARTER_PI = PI / 4;\nvar TWO_THIRDS_PI = PI * 2 / 3;\n\n/**\n * @namespace Chart.helpers.canvas\n */\nvar exports$1 = {\n\t/**\n\t * Clears the entire canvas associated to the given `chart`.\n\t * @param {Chart} chart - The chart for which to clear the canvas.\n\t */\n\tclear: function(chart) {\n\t\tchart.ctx.clearRect(0, 0, chart.width, chart.height);\n\t},\n\n\t/**\n\t * Creates a \"path\" for a rectangle with rounded corners at position (x, y) with a\n\t * given size (width, height) and the same `radius` for all corners.\n\t * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.\n\t * @param {number} x - The x axis of the coordinate for the rectangle starting point.\n\t * @param {number} y - The y axis of the coordinate for the rectangle starting point.\n\t * @param {number} width - The rectangle's width.\n\t * @param {number} height - The rectangle's height.\n\t * @param {number} radius - The rounded amount (in pixels) for the four corners.\n\t * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?\n\t */\n\troundedRect: function(ctx, x, y, width, height, radius) {\n\t\tif (radius) {\n\t\t\tvar r = Math.min(radius, height / 2, width / 2);\n\t\t\tvar left = x + r;\n\t\t\tvar top = y + r;\n\t\t\tvar right = x + width - r;\n\t\t\tvar bottom = y + height - r;\n\n\t\t\tctx.moveTo(x, top);\n\t\t\tif (left < right && top < bottom) {\n\t\t\t\tctx.arc(left, top, r, -PI, -HALF_PI);\n\t\t\t\tctx.arc(right, top, r, -HALF_PI, 0);\n\t\t\t\tctx.arc(right, bottom, r, 0, HALF_PI);\n\t\t\t\tctx.arc(left, bottom, r, HALF_PI, PI);\n\t\t\t} else if (left < right) {\n\t\t\t\tctx.moveTo(left, y);\n\t\t\t\tctx.arc(right, top, r, -HALF_PI, HALF_PI);\n\t\t\t\tctx.arc(left, top, r, HALF_PI, PI + HALF_PI);\n\t\t\t} else if (top < bottom) {\n\t\t\t\tctx.arc(left, top, r, -PI, 0);\n\t\t\t\tctx.arc(left, bottom, r, 0, PI);\n\t\t\t} else {\n\t\t\t\tctx.arc(left, top, r, -PI, PI);\n\t\t\t}\n\t\t\tctx.closePath();\n\t\t\tctx.moveTo(x, y);\n\t\t} else {\n\t\t\tctx.rect(x, y, width, height);\n\t\t}\n\t},\n\n\tdrawPoint: function(ctx, style, radius, x, y, rotation) {\n\t\tvar type, xOffset, yOffset, size, cornerRadius;\n\t\tvar rad = (rotation || 0) * RAD_PER_DEG;\n\n\t\tif (style && typeof style === 'object') {\n\t\t\ttype = style.toString();\n\t\t\tif (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n\t\t\t\tctx.drawImage(style, x - style.width / 2, y - style.height / 2, style.width, style.height);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (isNaN(radius) || radius <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tctx.beginPath();\n\n\t\tswitch (style) {\n\t\t// Default includes circle\n\t\tdefault:\n\t\t\tctx.arc(x, y, radius, 0, DOUBLE_PI);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'triangle':\n\t\t\tctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n\t\t\trad += TWO_THIRDS_PI;\n\t\t\tctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n\t\t\trad += TWO_THIRDS_PI;\n\t\t\tctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'rectRounded':\n\t\t\t// NOTE: the rounded rect implementation changed to use `arc` instead of\n\t\t\t// `quadraticCurveTo` since it generates better results when rect is\n\t\t\t// almost a circle. 0.516 (instead of 0.5) produces results with visually\n\t\t\t// closer proportion to the previous impl and it is inscribed in the\n\t\t\t// circle with `radius`. For more details, see the following PRs:\n\t\t\t// https://github.com/chartjs/Chart.js/issues/5597\n\t\t\t// https://github.com/chartjs/Chart.js/issues/5858\n\t\t\tcornerRadius = radius * 0.516;\n\t\t\tsize = radius - cornerRadius;\n\t\t\txOffset = Math.cos(rad + QUARTER_PI) * size;\n\t\t\tyOffset = Math.sin(rad + QUARTER_PI) * size;\n\t\t\tctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n\t\t\tctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n\t\t\tctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n\t\t\tctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'rect':\n\t\t\tif (!rotation) {\n\t\t\t\tsize = Math.SQRT1_2 * radius;\n\t\t\t\tctx.rect(x - size, y - size, 2 * size, 2 * size);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\trad += QUARTER_PI;\n\t\t\t/* falls through */\n\t\tcase 'rectRot':\n\t\t\txOffset = Math.cos(rad) * radius;\n\t\t\tyOffset = Math.sin(rad) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + yOffset, y - xOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tctx.lineTo(x - yOffset, y + xOffset);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'crossRot':\n\t\t\trad += QUARTER_PI;\n\t\t\t/* falls through */\n\t\tcase 'cross':\n\t\t\txOffset = Math.cos(rad) * radius;\n\t\t\tyOffset = Math.sin(rad) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tctx.moveTo(x + yOffset, y - xOffset);\n\t\t\tctx.lineTo(x - yOffset, y + xOffset);\n\t\t\tbreak;\n\t\tcase 'star':\n\t\t\txOffset = Math.cos(rad) * radius;\n\t\t\tyOffset = Math.sin(rad) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tctx.moveTo(x + yOffset, y - xOffset);\n\t\t\tctx.lineTo(x - yOffset, y + xOffset);\n\t\t\trad += QUARTER_PI;\n\t\t\txOffset = Math.cos(rad) * radius;\n\t\t\tyOffset = Math.sin(rad) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tctx.moveTo(x + yOffset, y - xOffset);\n\t\t\tctx.lineTo(x - yOffset, y + xOffset);\n\t\t\tbreak;\n\t\tcase 'line':\n\t\t\txOffset = Math.cos(rad) * radius;\n\t\t\tyOffset = Math.sin(rad) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tbreak;\n\t\tcase 'dash':\n\t\t\tctx.moveTo(x, y);\n\t\t\tctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);\n\t\t\tbreak;\n\t\t}\n\n\t\tctx.fill();\n\t\tctx.stroke();\n\t},\n\n\t/**\n\t * Returns true if the point is inside the rectangle\n\t * @param {object} point - The point to test\n\t * @param {object} area - The rectangle\n\t * @returns {boolean}\n\t * @private\n\t */\n\t_isPointInArea: function(point, area) {\n\t\tvar epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n\n\t\treturn point.x > area.left - epsilon && point.x < area.right + epsilon &&\n\t\t\tpoint.y > area.top - epsilon && point.y < area.bottom + epsilon;\n\t},\n\n\tclipArea: function(ctx, area) {\n\t\tctx.save();\n\t\tctx.beginPath();\n\t\tctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n\t\tctx.clip();\n\t},\n\n\tunclipArea: function(ctx) {\n\t\tctx.restore();\n\t},\n\n\tlineTo: function(ctx, previous, target, flip) {\n\t\tvar stepped = target.steppedLine;\n\t\tif (stepped) {\n\t\t\tif (stepped === 'middle') {\n\t\t\t\tvar midpoint = (previous.x + target.x) / 2.0;\n\t\t\t\tctx.lineTo(midpoint, flip ? target.y : previous.y);\n\t\t\t\tctx.lineTo(midpoint, flip ? previous.y : target.y);\n\t\t\t} else if ((stepped === 'after' && !flip) || (stepped !== 'after' && flip)) {\n\t\t\t\tctx.lineTo(previous.x, target.y);\n\t\t\t} else {\n\t\t\t\tctx.lineTo(target.x, previous.y);\n\t\t\t}\n\t\t\tctx.lineTo(target.x, target.y);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!target.tension) {\n\t\t\tctx.lineTo(target.x, target.y);\n\t\t\treturn;\n\t\t}\n\n\t\tctx.bezierCurveTo(\n\t\t\tflip ? previous.controlPointPreviousX : previous.controlPointNextX,\n\t\t\tflip ? previous.controlPointPreviousY : previous.controlPointNextY,\n\t\t\tflip ? target.controlPointNextX : target.controlPointPreviousX,\n\t\t\tflip ? target.controlPointNextY : target.controlPointPreviousY,\n\t\t\ttarget.x,\n\t\t\ttarget.y);\n\t}\n};\n\nvar helpers_canvas = exports$1;\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.\n * @namespace Chart.helpers.clear\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers_core.clear = exports$1.clear;\n\n/**\n * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.\n * @namespace Chart.helpers.drawRoundedRectangle\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers_core.drawRoundedRectangle = function(ctx) {\n\tctx.beginPath();\n\texports$1.roundedRect.apply(exports$1, arguments);\n};\n\nvar defaults = {\n\t/**\n\t * @private\n\t */\n\t_set: function(scope, values) {\n\t\treturn helpers_core.merge(this[scope] || (this[scope] = {}), values);\n\t}\n};\n\ndefaults._set('global', {\n\tdefaultColor: 'rgba(0,0,0,0.1)',\n\tdefaultFontColor: '#666',\n\tdefaultFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\tdefaultFontSize: 12,\n\tdefaultFontStyle: 'normal',\n\tdefaultLineHeight: 1.2,\n\tshowLines: true\n});\n\nvar core_defaults = defaults;\n\nvar valueOrDefault = helpers_core.valueOrDefault;\n\n/**\n * Converts the given font object into a CSS font string.\n * @param {object} font - A font object.\n * @return {string} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @private\n */\nfunction toFontString(font) {\n\tif (!font || helpers_core.isNullOrUndef(font.size) || helpers_core.isNullOrUndef(font.family)) {\n\t\treturn null;\n\t}\n\n\treturn (font.style ? font.style + ' ' : '')\n\t\t+ (font.weight ? font.weight + ' ' : '')\n\t\t+ font.size + 'px '\n\t\t+ font.family;\n}\n\n/**\n * @alias Chart.helpers.options\n * @namespace\n */\nvar helpers_options = {\n\t/**\n\t * Converts the given line height `value` in pixels for a specific font `size`.\n\t * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n\t * @param {number} size - The font size (in pixels) used to resolve relative `value`.\n\t * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).\n\t * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n\t * @since 2.7.0\n\t */\n\ttoLineHeight: function(value, size) {\n\t\tvar matches = ('' + value).match(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/);\n\t\tif (!matches || matches[1] === 'normal') {\n\t\t\treturn size * 1.2;\n\t\t}\n\n\t\tvalue = +matches[2];\n\n\t\tswitch (matches[3]) {\n\t\tcase 'px':\n\t\t\treturn value;\n\t\tcase '%':\n\t\t\tvalue /= 100;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\n\t\treturn size * value;\n\t},\n\n\t/**\n\t * Converts the given value into a padding object with pre-computed width/height.\n\t * @param {number|object} value - If a number, set the value to all TRBL component,\n\t *  else, if and object, use defined properties and sets undefined ones to 0.\n\t * @returns {object} The padding values (top, right, bottom, left, width, height)\n\t * @since 2.7.0\n\t */\n\ttoPadding: function(value) {\n\t\tvar t, r, b, l;\n\n\t\tif (helpers_core.isObject(value)) {\n\t\t\tt = +value.top || 0;\n\t\t\tr = +value.right || 0;\n\t\t\tb = +value.bottom || 0;\n\t\t\tl = +value.left || 0;\n\t\t} else {\n\t\t\tt = r = b = l = +value || 0;\n\t\t}\n\n\t\treturn {\n\t\t\ttop: t,\n\t\t\tright: r,\n\t\t\tbottom: b,\n\t\t\tleft: l,\n\t\t\theight: t + b,\n\t\t\twidth: l + r\n\t\t};\n\t},\n\n\t/**\n\t * Parses font options and returns the font object.\n\t * @param {object} options - A object that contains font options to be parsed.\n\t * @return {object} The font object.\n\t * @todo Support font.* options and renamed to toFont().\n\t * @private\n\t */\n\t_parseFont: function(options) {\n\t\tvar globalDefaults = core_defaults.global;\n\t\tvar size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);\n\t\tvar font = {\n\t\t\tfamily: valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily),\n\t\t\tlineHeight: helpers_core.options.toLineHeight(valueOrDefault(options.lineHeight, globalDefaults.defaultLineHeight), size),\n\t\t\tsize: size,\n\t\t\tstyle: valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle),\n\t\t\tweight: null,\n\t\t\tstring: ''\n\t\t};\n\n\t\tfont.string = toFontString(font);\n\t\treturn font;\n\t},\n\n\t/**\n\t * Evaluates the given `inputs` sequentially and returns the first defined value.\n\t * @param {Array} inputs - An array of values, falling back to the last value.\n\t * @param {object} [context] - If defined and the current value is a function, the value\n\t * is called with `context` as first argument and the result becomes the new input.\n\t * @param {number} [index] - If defined and the current value is an array, the value\n\t * at `index` become the new input.\n\t * @since 2.7.0\n\t */\n\tresolve: function(inputs, context, index) {\n\t\tvar i, ilen, value;\n\n\t\tfor (i = 0, ilen = inputs.length; i < ilen; ++i) {\n\t\t\tvalue = inputs[i];\n\t\t\tif (value === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (context !== undefined && typeof value === 'function') {\n\t\t\t\tvalue = value(context);\n\t\t\t}\n\t\t\tif (index !== undefined && helpers_core.isArray(value)) {\n\t\t\t\tvalue = value[index];\n\t\t\t}\n\t\t\tif (value !== undefined) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t}\n};\n\nvar helpers$1 = helpers_core;\nvar easing = helpers_easing;\nvar canvas = helpers_canvas;\nvar options = helpers_options;\nhelpers$1.easing = easing;\nhelpers$1.canvas = canvas;\nhelpers$1.options = options;\n\nfunction interpolate(start, view, model, ease) {\n\tvar keys = Object.keys(model);\n\tvar i, ilen, key, actual, origin, target, type, c0, c1;\n\n\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\tkey = keys[i];\n\n\t\ttarget = model[key];\n\n\t\t// if a value is added to the model after pivot() has been called, the view\n\t\t// doesn't contain it, so let's initialize the view to the target value.\n\t\tif (!view.hasOwnProperty(key)) {\n\t\t\tview[key] = target;\n\t\t}\n\n\t\tactual = view[key];\n\n\t\tif (actual === target || key[0] === '_') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!start.hasOwnProperty(key)) {\n\t\t\tstart[key] = actual;\n\t\t}\n\n\t\torigin = start[key];\n\n\t\ttype = typeof target;\n\n\t\tif (type === typeof origin) {\n\t\t\tif (type === 'string') {\n\t\t\t\tc0 = chartjsColor(origin);\n\t\t\t\tif (c0.valid) {\n\t\t\t\t\tc1 = chartjsColor(target);\n\t\t\t\t\tif (c1.valid) {\n\t\t\t\t\t\tview[key] = c1.mix(c0, ease).rgbString();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (helpers$1.isFinite(origin) && helpers$1.isFinite(target)) {\n\t\t\t\tview[key] = origin + (target - origin) * ease;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tview[key] = target;\n\t}\n}\n\nvar Element = function(configuration) {\n\thelpers$1.extend(this, configuration);\n\tthis.initialize.apply(this, arguments);\n};\n\nhelpers$1.extend(Element.prototype, {\n\n\tinitialize: function() {\n\t\tthis.hidden = false;\n\t},\n\n\tpivot: function() {\n\t\tvar me = this;\n\t\tif (!me._view) {\n\t\t\tme._view = helpers$1.clone(me._model);\n\t\t}\n\t\tme._start = {};\n\t\treturn me;\n\t},\n\n\ttransition: function(ease) {\n\t\tvar me = this;\n\t\tvar model = me._model;\n\t\tvar start = me._start;\n\t\tvar view = me._view;\n\n\t\t// No animation -> No Transition\n\t\tif (!model || ease === 1) {\n\t\t\tme._view = model;\n\t\t\tme._start = null;\n\t\t\treturn me;\n\t\t}\n\n\t\tif (!view) {\n\t\t\tview = me._view = {};\n\t\t}\n\n\t\tif (!start) {\n\t\t\tstart = me._start = {};\n\t\t}\n\n\t\tinterpolate(start, view, model, ease);\n\n\t\treturn me;\n\t},\n\n\ttooltipPosition: function() {\n\t\treturn {\n\t\t\tx: this._model.x,\n\t\t\ty: this._model.y\n\t\t};\n\t},\n\n\thasValue: function() {\n\t\treturn helpers$1.isNumber(this._model.x) && helpers$1.isNumber(this._model.y);\n\t}\n});\n\nElement.extend = helpers$1.inherits;\n\nvar core_element = Element;\n\nvar exports$2 = core_element.extend({\n\tchart: null, // the animation associated chart instance\n\tcurrentStep: 0, // the current animation step\n\tnumSteps: 60, // default number of steps\n\teasing: '', // the easing to use for this animation\n\trender: null, // render function used by the animation service\n\n\tonAnimationProgress: null, // user specified callback to fire on each step of the animation\n\tonAnimationComplete: null, // user specified callback to fire when the animation finishes\n});\n\nvar core_animation = exports$2;\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart.Animation instead\n * @prop Chart.Animation#animationObject\n * @deprecated since version 2.6.0\n * @todo remove at version 3\n */\nObject.defineProperty(exports$2.prototype, 'animationObject', {\n\tget: function() {\n\t\treturn this;\n\t}\n});\n\n/**\n * Provided for backward compatibility, use Chart.Animation#chart instead\n * @prop Chart.Animation#chartInstance\n * @deprecated since version 2.6.0\n * @todo remove at version 3\n */\nObject.defineProperty(exports$2.prototype, 'chartInstance', {\n\tget: function() {\n\t\treturn this.chart;\n\t},\n\tset: function(value) {\n\t\tthis.chart = value;\n\t}\n});\n\ncore_defaults._set('global', {\n\tanimation: {\n\t\tduration: 1000,\n\t\teasing: 'easeOutQuart',\n\t\tonProgress: helpers$1.noop,\n\t\tonComplete: helpers$1.noop\n\t}\n});\n\nvar core_animations = {\n\tanimations: [],\n\trequest: null,\n\n\t/**\n\t * @param {Chart} chart - The chart to animate.\n\t * @param {Chart.Animation} animation - The animation that we will animate.\n\t * @param {number} duration - The animation duration in ms.\n\t * @param {boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions\n\t */\n\taddAnimation: function(chart, animation, duration, lazy) {\n\t\tvar animations = this.animations;\n\t\tvar i, ilen;\n\n\t\tanimation.chart = chart;\n\t\tanimation.startTime = Date.now();\n\t\tanimation.duration = duration;\n\n\t\tif (!lazy) {\n\t\t\tchart.animating = true;\n\t\t}\n\n\t\tfor (i = 0, ilen = animations.length; i < ilen; ++i) {\n\t\t\tif (animations[i].chart === chart) {\n\t\t\t\tanimations[i] = animation;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tanimations.push(animation);\n\n\t\t// If there are no animations queued, manually kickstart a digest, for lack of a better word\n\t\tif (animations.length === 1) {\n\t\t\tthis.requestAnimationFrame();\n\t\t}\n\t},\n\n\tcancelAnimation: function(chart) {\n\t\tvar index = helpers$1.findIndex(this.animations, function(animation) {\n\t\t\treturn animation.chart === chart;\n\t\t});\n\n\t\tif (index !== -1) {\n\t\t\tthis.animations.splice(index, 1);\n\t\t\tchart.animating = false;\n\t\t}\n\t},\n\n\trequestAnimationFrame: function() {\n\t\tvar me = this;\n\t\tif (me.request === null) {\n\t\t\t// Skip animation frame requests until the active one is executed.\n\t\t\t// This can happen when processing mouse events, e.g. 'mousemove'\n\t\t\t// and 'mouseout' events will trigger multiple renders.\n\t\t\tme.request = helpers$1.requestAnimFrame.call(window, function() {\n\t\t\t\tme.request = null;\n\t\t\t\tme.startDigest();\n\t\t\t});\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\tstartDigest: function() {\n\t\tvar me = this;\n\n\t\tme.advance();\n\n\t\t// Do we have more stuff to animate?\n\t\tif (me.animations.length > 0) {\n\t\t\tme.requestAnimationFrame();\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\tadvance: function() {\n\t\tvar animations = this.animations;\n\t\tvar animation, chart, numSteps, nextStep;\n\t\tvar i = 0;\n\n\t\t// 1 animation per chart, so we are looping charts here\n\t\twhile (i < animations.length) {\n\t\t\tanimation = animations[i];\n\t\t\tchart = animation.chart;\n\t\t\tnumSteps = animation.numSteps;\n\n\t\t\t// Make sure that currentStep starts at 1\n\t\t\t// https://github.com/chartjs/Chart.js/issues/6104\n\t\t\tnextStep = Math.floor((Date.now() - animation.startTime) / animation.duration * numSteps) + 1;\n\t\t\tanimation.currentStep = Math.min(nextStep, numSteps);\n\n\t\t\thelpers$1.callback(animation.render, [chart, animation], chart);\n\t\t\thelpers$1.callback(animation.onAnimationProgress, [animation], chart);\n\n\t\t\tif (animation.currentStep >= numSteps) {\n\t\t\t\thelpers$1.callback(animation.onAnimationComplete, [animation], chart);\n\t\t\t\tchart.animating = false;\n\t\t\t\tanimations.splice(i, 1);\n\t\t\t} else {\n\t\t\t\t++i;\n\t\t\t}\n\t\t}\n\t}\n};\n\nvar resolve = helpers$1.options.resolve;\n\nvar arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];\n\n/**\n * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',\n * 'unshift') and notify the listener AFTER the array has been altered. Listeners are\n * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.\n */\nfunction listenArrayEvents(array, listener) {\n\tif (array._chartjs) {\n\t\tarray._chartjs.listeners.push(listener);\n\t\treturn;\n\t}\n\n\tObject.defineProperty(array, '_chartjs', {\n\t\tconfigurable: true,\n\t\tenumerable: false,\n\t\tvalue: {\n\t\t\tlisteners: [listener]\n\t\t}\n\t});\n\n\tarrayEvents.forEach(function(key) {\n\t\tvar method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);\n\t\tvar base = array[key];\n\n\t\tObject.defineProperty(array, key, {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: false,\n\t\t\tvalue: function() {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\t\tvar res = base.apply(this, args);\n\n\t\t\t\thelpers$1.each(array._chartjs.listeners, function(object) {\n\t\t\t\t\tif (typeof object[method] === 'function') {\n\t\t\t\t\t\tobject[method].apply(object, args);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn res;\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Removes the given array event listener and cleanup extra attached properties (such as\n * the _chartjs stub and overridden methods) if array doesn't have any more listeners.\n */\nfunction unlistenArrayEvents(array, listener) {\n\tvar stub = array._chartjs;\n\tif (!stub) {\n\t\treturn;\n\t}\n\n\tvar listeners = stub.listeners;\n\tvar index = listeners.indexOf(listener);\n\tif (index !== -1) {\n\t\tlisteners.splice(index, 1);\n\t}\n\n\tif (listeners.length > 0) {\n\t\treturn;\n\t}\n\n\tarrayEvents.forEach(function(key) {\n\t\tdelete array[key];\n\t});\n\n\tdelete array._chartjs;\n}\n\n// Base class for all dataset controllers (line, bar, etc)\nvar DatasetController = function(chart, datasetIndex) {\n\tthis.initialize(chart, datasetIndex);\n};\n\nhelpers$1.extend(DatasetController.prototype, {\n\n\t/**\n\t * Element type used to generate a meta dataset (e.g. Chart.element.Line).\n\t * @type {Chart.core.element}\n\t */\n\tdatasetElementType: null,\n\n\t/**\n\t * Element type used to generate a meta data (e.g. Chart.element.Point).\n\t * @type {Chart.core.element}\n\t */\n\tdataElementType: null,\n\n\tinitialize: function(chart, datasetIndex) {\n\t\tvar me = this;\n\t\tme.chart = chart;\n\t\tme.index = datasetIndex;\n\t\tme.linkScales();\n\t\tme.addElements();\n\t},\n\n\tupdateIndex: function(datasetIndex) {\n\t\tthis.index = datasetIndex;\n\t},\n\n\tlinkScales: function() {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar dataset = me.getDataset();\n\n\t\tif (meta.xAxisID === null || !(meta.xAxisID in me.chart.scales)) {\n\t\t\tmeta.xAxisID = dataset.xAxisID || me.chart.options.scales.xAxes[0].id;\n\t\t}\n\t\tif (meta.yAxisID === null || !(meta.yAxisID in me.chart.scales)) {\n\t\t\tmeta.yAxisID = dataset.yAxisID || me.chart.options.scales.yAxes[0].id;\n\t\t}\n\t},\n\n\tgetDataset: function() {\n\t\treturn this.chart.data.datasets[this.index];\n\t},\n\n\tgetMeta: function() {\n\t\treturn this.chart.getDatasetMeta(this.index);\n\t},\n\n\tgetScaleForId: function(scaleID) {\n\t\treturn this.chart.scales[scaleID];\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getValueScaleId: function() {\n\t\treturn this.getMeta().yAxisID;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getIndexScaleId: function() {\n\t\treturn this.getMeta().xAxisID;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getValueScale: function() {\n\t\treturn this.getScaleForId(this._getValueScaleId());\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getIndexScale: function() {\n\t\treturn this.getScaleForId(this._getIndexScaleId());\n\t},\n\n\treset: function() {\n\t\tthis.update(true);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tdestroy: function() {\n\t\tif (this._data) {\n\t\t\tunlistenArrayEvents(this._data, this);\n\t\t}\n\t},\n\n\tcreateMetaDataset: function() {\n\t\tvar me = this;\n\t\tvar type = me.datasetElementType;\n\t\treturn type && new type({\n\t\t\t_chart: me.chart,\n\t\t\t_datasetIndex: me.index\n\t\t});\n\t},\n\n\tcreateMetaData: function(index) {\n\t\tvar me = this;\n\t\tvar type = me.dataElementType;\n\t\treturn type && new type({\n\t\t\t_chart: me.chart,\n\t\t\t_datasetIndex: me.index,\n\t\t\t_index: index\n\t\t});\n\t},\n\n\taddElements: function() {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar data = me.getDataset().data || [];\n\t\tvar metaData = meta.data;\n\t\tvar i, ilen;\n\n\t\tfor (i = 0, ilen = data.length; i < ilen; ++i) {\n\t\t\tmetaData[i] = metaData[i] || me.createMetaData(i);\n\t\t}\n\n\t\tmeta.dataset = meta.dataset || me.createMetaDataset();\n\t},\n\n\taddElementAndReset: function(index) {\n\t\tvar element = this.createMetaData(index);\n\t\tthis.getMeta().data.splice(index, 0, element);\n\t\tthis.updateElement(element, index, true);\n\t},\n\n\tbuildOrUpdateElements: function() {\n\t\tvar me = this;\n\t\tvar dataset = me.getDataset();\n\t\tvar data = dataset.data || (dataset.data = []);\n\n\t\t// In order to correctly handle data addition/deletion animation (an thus simulate\n\t\t// real-time charts), we need to monitor these data modifications and synchronize\n\t\t// the internal meta data accordingly.\n\t\tif (me._data !== data) {\n\t\t\tif (me._data) {\n\t\t\t\t// This case happens when the user replaced the data array instance.\n\t\t\t\tunlistenArrayEvents(me._data, me);\n\t\t\t}\n\n\t\t\tif (data && Object.isExtensible(data)) {\n\t\t\t\tlistenArrayEvents(data, me);\n\t\t\t}\n\t\t\tme._data = data;\n\t\t}\n\n\t\t// Re-sync meta data in case the user replaced the data array or if we missed\n\t\t// any updates and so make sure that we handle number of datapoints changing.\n\t\tme.resyncElements();\n\t},\n\n\tupdate: helpers$1.noop,\n\n\ttransition: function(easingValue) {\n\t\tvar meta = this.getMeta();\n\t\tvar elements = meta.data || [];\n\t\tvar ilen = elements.length;\n\t\tvar i = 0;\n\n\t\tfor (; i < ilen; ++i) {\n\t\t\telements[i].transition(easingValue);\n\t\t}\n\n\t\tif (meta.dataset) {\n\t\t\tmeta.dataset.transition(easingValue);\n\t\t}\n\t},\n\n\tdraw: function() {\n\t\tvar meta = this.getMeta();\n\t\tvar elements = meta.data || [];\n\t\tvar ilen = elements.length;\n\t\tvar i = 0;\n\n\t\tif (meta.dataset) {\n\t\t\tmeta.dataset.draw();\n\t\t}\n\n\t\tfor (; i < ilen; ++i) {\n\t\t\telements[i].draw();\n\t\t}\n\t},\n\n\tremoveHoverStyle: function(element) {\n\t\thelpers$1.merge(element._model, element.$previousStyle || {});\n\t\tdelete element.$previousStyle;\n\t},\n\n\tsetHoverStyle: function(element) {\n\t\tvar dataset = this.chart.data.datasets[element._datasetIndex];\n\t\tvar index = element._index;\n\t\tvar custom = element.custom || {};\n\t\tvar model = element._model;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\n\t\telement.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth\n\t\t};\n\n\t\tmodel.backgroundColor = resolve([custom.hoverBackgroundColor, dataset.hoverBackgroundColor, getHoverColor(model.backgroundColor)], undefined, index);\n\t\tmodel.borderColor = resolve([custom.hoverBorderColor, dataset.hoverBorderColor, getHoverColor(model.borderColor)], undefined, index);\n\t\tmodel.borderWidth = resolve([custom.hoverBorderWidth, dataset.hoverBorderWidth, model.borderWidth], undefined, index);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tresyncElements: function() {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar data = me.getDataset().data;\n\t\tvar numMeta = meta.data.length;\n\t\tvar numData = data.length;\n\n\t\tif (numData < numMeta) {\n\t\t\tmeta.data.splice(numData, numMeta - numData);\n\t\t} else if (numData > numMeta) {\n\t\t\tme.insertElements(numMeta, numData - numMeta);\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\tinsertElements: function(start, count) {\n\t\tfor (var i = 0; i < count; ++i) {\n\t\t\tthis.addElementAndReset(start + i);\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\tonDataPush: function() {\n\t\tvar count = arguments.length;\n\t\tthis.insertElements(this.getDataset().data.length - count, count);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tonDataPop: function() {\n\t\tthis.getMeta().data.pop();\n\t},\n\n\t/**\n\t * @private\n\t */\n\tonDataShift: function() {\n\t\tthis.getMeta().data.shift();\n\t},\n\n\t/**\n\t * @private\n\t */\n\tonDataSplice: function(start, count) {\n\t\tthis.getMeta().data.splice(start, count);\n\t\tthis.insertElements(start, arguments.length - 2);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tonDataUnshift: function() {\n\t\tthis.insertElements(0, arguments.length);\n\t}\n});\n\nDatasetController.extend = helpers$1.inherits;\n\nvar core_datasetController = DatasetController;\n\ncore_defaults._set('global', {\n\telements: {\n\t\tarc: {\n\t\t\tbackgroundColor: core_defaults.global.defaultColor,\n\t\t\tborderColor: '#fff',\n\t\t\tborderWidth: 2,\n\t\t\tborderAlign: 'center'\n\t\t}\n\t}\n});\n\nvar element_arc = core_element.extend({\n\tinLabelRange: function(mouseX) {\n\t\tvar vm = this._view;\n\n\t\tif (vm) {\n\t\t\treturn (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2));\n\t\t}\n\t\treturn false;\n\t},\n\n\tinRange: function(chartX, chartY) {\n\t\tvar vm = this._view;\n\n\t\tif (vm) {\n\t\t\tvar pointRelativePosition = helpers$1.getAngleFromPoint(vm, {x: chartX, y: chartY});\n\t\t\tvar\tangle = pointRelativePosition.angle;\n\t\t\tvar distance = pointRelativePosition.distance;\n\n\t\t\t// Sanitise angle range\n\t\t\tvar startAngle = vm.startAngle;\n\t\t\tvar endAngle = vm.endAngle;\n\t\t\twhile (endAngle < startAngle) {\n\t\t\t\tendAngle += 2.0 * Math.PI;\n\t\t\t}\n\t\t\twhile (angle > endAngle) {\n\t\t\t\tangle -= 2.0 * Math.PI;\n\t\t\t}\n\t\t\twhile (angle < startAngle) {\n\t\t\t\tangle += 2.0 * Math.PI;\n\t\t\t}\n\n\t\t\t// Check if within the range of the open/close angle\n\t\t\tvar betweenAngles = (angle >= startAngle && angle <= endAngle);\n\t\t\tvar withinRadius = (distance >= vm.innerRadius && distance <= vm.outerRadius);\n\n\t\t\treturn (betweenAngles && withinRadius);\n\t\t}\n\t\treturn false;\n\t},\n\n\tgetCenterPoint: function() {\n\t\tvar vm = this._view;\n\t\tvar halfAngle = (vm.startAngle + vm.endAngle) / 2;\n\t\tvar halfRadius = (vm.innerRadius + vm.outerRadius) / 2;\n\t\treturn {\n\t\t\tx: vm.x + Math.cos(halfAngle) * halfRadius,\n\t\t\ty: vm.y + Math.sin(halfAngle) * halfRadius\n\t\t};\n\t},\n\n\tgetArea: function() {\n\t\tvar vm = this._view;\n\t\treturn Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));\n\t},\n\n\ttooltipPosition: function() {\n\t\tvar vm = this._view;\n\t\tvar centreAngle = vm.startAngle + ((vm.endAngle - vm.startAngle) / 2);\n\t\tvar rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;\n\n\t\treturn {\n\t\t\tx: vm.x + (Math.cos(centreAngle) * rangeFromCentre),\n\t\t\ty: vm.y + (Math.sin(centreAngle) * rangeFromCentre)\n\t\t};\n\t},\n\n\tdraw: function() {\n\t\tvar ctx = this._chart.ctx;\n\t\tvar vm = this._view;\n\t\tvar sA = vm.startAngle;\n\t\tvar eA = vm.endAngle;\n\t\tvar pixelMargin = (vm.borderAlign === 'inner') ? 0.33 : 0;\n\t\tvar angleMargin;\n\n\t\tctx.save();\n\n\t\tctx.beginPath();\n\t\tctx.arc(vm.x, vm.y, Math.max(vm.outerRadius - pixelMargin, 0), sA, eA);\n\t\tctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);\n\t\tctx.closePath();\n\n\t\tctx.fillStyle = vm.backgroundColor;\n\t\tctx.fill();\n\n\t\tif (vm.borderWidth) {\n\t\t\tif (vm.borderAlign === 'inner') {\n\t\t\t\t// Draw an inner border by cliping the arc and drawing a double-width border\n\t\t\t\t// Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n\t\t\t\tctx.beginPath();\n\t\t\t\tangleMargin = pixelMargin / vm.outerRadius;\n\t\t\t\tctx.arc(vm.x, vm.y, vm.outerRadius, sA - angleMargin, eA + angleMargin);\n\t\t\t\tif (vm.innerRadius > pixelMargin) {\n\t\t\t\t\tangleMargin = pixelMargin / vm.innerRadius;\n\t\t\t\t\tctx.arc(vm.x, vm.y, vm.innerRadius - pixelMargin, eA + angleMargin, sA - angleMargin, true);\n\t\t\t\t} else {\n\t\t\t\t\tctx.arc(vm.x, vm.y, pixelMargin, eA + Math.PI / 2, sA - Math.PI / 2);\n\t\t\t\t}\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.clip();\n\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);\n\t\t\t\tctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);\n\t\t\t\tctx.closePath();\n\n\t\t\t\tctx.lineWidth = vm.borderWidth * 2;\n\t\t\t\tctx.lineJoin = 'round';\n\t\t\t} else {\n\t\t\t\tctx.lineWidth = vm.borderWidth;\n\t\t\t\tctx.lineJoin = 'bevel';\n\t\t\t}\n\n\t\t\tctx.strokeStyle = vm.borderColor;\n\t\t\tctx.stroke();\n\t\t}\n\n\t\tctx.restore();\n\t}\n});\n\nvar valueOrDefault$1 = helpers$1.valueOrDefault;\n\nvar defaultColor = core_defaults.global.defaultColor;\n\ncore_defaults._set('global', {\n\telements: {\n\t\tline: {\n\t\t\ttension: 0.4,\n\t\t\tbackgroundColor: defaultColor,\n\t\t\tborderWidth: 3,\n\t\t\tborderColor: defaultColor,\n\t\t\tborderCapStyle: 'butt',\n\t\t\tborderDash: [],\n\t\t\tborderDashOffset: 0.0,\n\t\t\tborderJoinStyle: 'miter',\n\t\t\tcapBezierPoints: true,\n\t\t\tfill: true, // do we fill in the area between the line and its base axis\n\t\t}\n\t}\n});\n\nvar element_line = core_element.extend({\n\tdraw: function() {\n\t\tvar me = this;\n\t\tvar vm = me._view;\n\t\tvar ctx = me._chart.ctx;\n\t\tvar spanGaps = vm.spanGaps;\n\t\tvar points = me._children.slice(); // clone array\n\t\tvar globalDefaults = core_defaults.global;\n\t\tvar globalOptionLineElements = globalDefaults.elements.line;\n\t\tvar lastDrawnIndex = -1;\n\t\tvar index, current, previous, currentVM;\n\n\t\t// If we are looping, adding the first point again\n\t\tif (me._loop && points.length) {\n\t\t\tpoints.push(points[0]);\n\t\t}\n\n\t\tctx.save();\n\n\t\t// Stroke Line Options\n\t\tctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;\n\n\t\t// IE 9 and 10 do not support line dash\n\t\tif (ctx.setLineDash) {\n\t\t\tctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);\n\t\t}\n\n\t\tctx.lineDashOffset = valueOrDefault$1(vm.borderDashOffset, globalOptionLineElements.borderDashOffset);\n\t\tctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;\n\t\tctx.lineWidth = valueOrDefault$1(vm.borderWidth, globalOptionLineElements.borderWidth);\n\t\tctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;\n\n\t\t// Stroke Line\n\t\tctx.beginPath();\n\t\tlastDrawnIndex = -1;\n\n\t\tfor (index = 0; index < points.length; ++index) {\n\t\t\tcurrent = points[index];\n\t\t\tprevious = helpers$1.previousItem(points, index);\n\t\t\tcurrentVM = current._view;\n\n\t\t\t// First point moves to it's starting position no matter what\n\t\t\tif (index === 0) {\n\t\t\t\tif (!currentVM.skip) {\n\t\t\t\t\tctx.moveTo(currentVM.x, currentVM.y);\n\t\t\t\t\tlastDrawnIndex = index;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tprevious = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];\n\n\t\t\t\tif (!currentVM.skip) {\n\t\t\t\t\tif ((lastDrawnIndex !== (index - 1) && !spanGaps) || lastDrawnIndex === -1) {\n\t\t\t\t\t\t// There was a gap and this is the first point after the gap\n\t\t\t\t\t\tctx.moveTo(currentVM.x, currentVM.y);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Line to next point\n\t\t\t\t\t\thelpers$1.canvas.lineTo(ctx, previous._view, current._view);\n\t\t\t\t\t}\n\t\t\t\t\tlastDrawnIndex = index;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tctx.stroke();\n\t\tctx.restore();\n\t}\n});\n\nvar valueOrDefault$2 = helpers$1.valueOrDefault;\n\nvar defaultColor$1 = core_defaults.global.defaultColor;\n\ncore_defaults._set('global', {\n\telements: {\n\t\tpoint: {\n\t\t\tradius: 3,\n\t\t\tpointStyle: 'circle',\n\t\t\tbackgroundColor: defaultColor$1,\n\t\t\tborderColor: defaultColor$1,\n\t\t\tborderWidth: 1,\n\t\t\t// Hover\n\t\t\thitRadius: 1,\n\t\t\thoverRadius: 4,\n\t\t\thoverBorderWidth: 1\n\t\t}\n\t}\n});\n\nfunction xRange(mouseX) {\n\tvar vm = this._view;\n\treturn vm ? (Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius) : false;\n}\n\nfunction yRange(mouseY) {\n\tvar vm = this._view;\n\treturn vm ? (Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius) : false;\n}\n\nvar element_point = core_element.extend({\n\tinRange: function(mouseX, mouseY) {\n\t\tvar vm = this._view;\n\t\treturn vm ? ((Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2)) < Math.pow(vm.hitRadius + vm.radius, 2)) : false;\n\t},\n\n\tinLabelRange: xRange,\n\tinXRange: xRange,\n\tinYRange: yRange,\n\n\tgetCenterPoint: function() {\n\t\tvar vm = this._view;\n\t\treturn {\n\t\t\tx: vm.x,\n\t\t\ty: vm.y\n\t\t};\n\t},\n\n\tgetArea: function() {\n\t\treturn Math.PI * Math.pow(this._view.radius, 2);\n\t},\n\n\ttooltipPosition: function() {\n\t\tvar vm = this._view;\n\t\treturn {\n\t\t\tx: vm.x,\n\t\t\ty: vm.y,\n\t\t\tpadding: vm.radius + vm.borderWidth\n\t\t};\n\t},\n\n\tdraw: function(chartArea) {\n\t\tvar vm = this._view;\n\t\tvar ctx = this._chart.ctx;\n\t\tvar pointStyle = vm.pointStyle;\n\t\tvar rotation = vm.rotation;\n\t\tvar radius = vm.radius;\n\t\tvar x = vm.x;\n\t\tvar y = vm.y;\n\t\tvar globalDefaults = core_defaults.global;\n\t\tvar defaultColor = globalDefaults.defaultColor; // eslint-disable-line no-shadow\n\n\t\tif (vm.skip) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Clipping for Points.\n\t\tif (chartArea === undefined || helpers$1.canvas._isPointInArea(vm, chartArea)) {\n\t\t\tctx.strokeStyle = vm.borderColor || defaultColor;\n\t\t\tctx.lineWidth = valueOrDefault$2(vm.borderWidth, globalDefaults.elements.point.borderWidth);\n\t\t\tctx.fillStyle = vm.backgroundColor || defaultColor;\n\t\t\thelpers$1.canvas.drawPoint(ctx, pointStyle, radius, x, y, rotation);\n\t\t}\n\t}\n});\n\nvar defaultColor$2 = core_defaults.global.defaultColor;\n\ncore_defaults._set('global', {\n\telements: {\n\t\trectangle: {\n\t\t\tbackgroundColor: defaultColor$2,\n\t\t\tborderColor: defaultColor$2,\n\t\t\tborderSkipped: 'bottom',\n\t\t\tborderWidth: 0\n\t\t}\n\t}\n});\n\nfunction isVertical(vm) {\n\treturn vm && vm.width !== undefined;\n}\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param bar {Chart.Element.Rectangle} the bar\n * @return {Bounds} bounds of the bar\n * @private\n */\nfunction getBarBounds(vm) {\n\tvar x1, x2, y1, y2, half;\n\n\tif (isVertical(vm)) {\n\t\thalf = vm.width / 2;\n\t\tx1 = vm.x - half;\n\t\tx2 = vm.x + half;\n\t\ty1 = Math.min(vm.y, vm.base);\n\t\ty2 = Math.max(vm.y, vm.base);\n\t} else {\n\t\thalf = vm.height / 2;\n\t\tx1 = Math.min(vm.x, vm.base);\n\t\tx2 = Math.max(vm.x, vm.base);\n\t\ty1 = vm.y - half;\n\t\ty2 = vm.y + half;\n\t}\n\n\treturn {\n\t\tleft: x1,\n\t\ttop: y1,\n\t\tright: x2,\n\t\tbottom: y2\n\t};\n}\n\nfunction swap(orig, v1, v2) {\n\treturn orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction parseBorderSkipped(vm) {\n\tvar edge = vm.borderSkipped;\n\tvar res = {};\n\n\tif (!edge) {\n\t\treturn res;\n\t}\n\n\tif (vm.horizontal) {\n\t\tif (vm.base > vm.x) {\n\t\t\tedge = swap(edge, 'left', 'right');\n\t\t}\n\t} else if (vm.base < vm.y) {\n\t\tedge = swap(edge, 'bottom', 'top');\n\t}\n\n\tres[edge] = true;\n\treturn res;\n}\n\nfunction parseBorderWidth(vm, maxW, maxH) {\n\tvar value = vm.borderWidth;\n\tvar skip = parseBorderSkipped(vm);\n\tvar t, r, b, l;\n\n\tif (helpers$1.isObject(value)) {\n\t\tt = +value.top || 0;\n\t\tr = +value.right || 0;\n\t\tb = +value.bottom || 0;\n\t\tl = +value.left || 0;\n\t} else {\n\t\tt = r = b = l = +value || 0;\n\t}\n\n\treturn {\n\t\tt: skip.top || (t < 0) ? 0 : t > maxH ? maxH : t,\n\t\tr: skip.right || (r < 0) ? 0 : r > maxW ? maxW : r,\n\t\tb: skip.bottom || (b < 0) ? 0 : b > maxH ? maxH : b,\n\t\tl: skip.left || (l < 0) ? 0 : l > maxW ? maxW : l\n\t};\n}\n\nfunction boundingRects(vm) {\n\tvar bounds = getBarBounds(vm);\n\tvar width = bounds.right - bounds.left;\n\tvar height = bounds.bottom - bounds.top;\n\tvar border = parseBorderWidth(vm, width / 2, height / 2);\n\n\treturn {\n\t\touter: {\n\t\t\tx: bounds.left,\n\t\t\ty: bounds.top,\n\t\t\tw: width,\n\t\t\th: height\n\t\t},\n\t\tinner: {\n\t\t\tx: bounds.left + border.l,\n\t\t\ty: bounds.top + border.t,\n\t\t\tw: width - border.l - border.r,\n\t\t\th: height - border.t - border.b\n\t\t}\n\t};\n}\n\nfunction inRange(vm, x, y) {\n\tvar skipX = x === null;\n\tvar skipY = y === null;\n\tvar bounds = !vm || (skipX && skipY) ? false : getBarBounds(vm);\n\n\treturn bounds\n\t\t&& (skipX || x >= bounds.left && x <= bounds.right)\n\t\t&& (skipY || y >= bounds.top && y <= bounds.bottom);\n}\n\nvar element_rectangle = core_element.extend({\n\tdraw: function() {\n\t\tvar ctx = this._chart.ctx;\n\t\tvar vm = this._view;\n\t\tvar rects = boundingRects(vm);\n\t\tvar outer = rects.outer;\n\t\tvar inner = rects.inner;\n\n\t\tctx.fillStyle = vm.backgroundColor;\n\t\tctx.fillRect(outer.x, outer.y, outer.w, outer.h);\n\n\t\tif (outer.w === inner.w && outer.h === inner.h) {\n\t\t\treturn;\n\t\t}\n\n\t\tctx.save();\n\t\tctx.beginPath();\n\t\tctx.rect(outer.x, outer.y, outer.w, outer.h);\n\t\tctx.clip();\n\t\tctx.fillStyle = vm.borderColor;\n\t\tctx.rect(inner.x, inner.y, inner.w, inner.h);\n\t\tctx.fill('evenodd');\n\t\tctx.restore();\n\t},\n\n\theight: function() {\n\t\tvar vm = this._view;\n\t\treturn vm.base - vm.y;\n\t},\n\n\tinRange: function(mouseX, mouseY) {\n\t\treturn inRange(this._view, mouseX, mouseY);\n\t},\n\n\tinLabelRange: function(mouseX, mouseY) {\n\t\tvar vm = this._view;\n\t\treturn isVertical(vm)\n\t\t\t? inRange(vm, mouseX, null)\n\t\t\t: inRange(vm, null, mouseY);\n\t},\n\n\tinXRange: function(mouseX) {\n\t\treturn inRange(this._view, mouseX, null);\n\t},\n\n\tinYRange: function(mouseY) {\n\t\treturn inRange(this._view, null, mouseY);\n\t},\n\n\tgetCenterPoint: function() {\n\t\tvar vm = this._view;\n\t\tvar x, y;\n\t\tif (isVertical(vm)) {\n\t\t\tx = vm.x;\n\t\t\ty = (vm.y + vm.base) / 2;\n\t\t} else {\n\t\t\tx = (vm.x + vm.base) / 2;\n\t\t\ty = vm.y;\n\t\t}\n\n\t\treturn {x: x, y: y};\n\t},\n\n\tgetArea: function() {\n\t\tvar vm = this._view;\n\n\t\treturn isVertical(vm)\n\t\t\t? vm.width * Math.abs(vm.y - vm.base)\n\t\t\t: vm.height * Math.abs(vm.x - vm.base);\n\t},\n\n\ttooltipPosition: function() {\n\t\tvar vm = this._view;\n\t\treturn {\n\t\t\tx: vm.x,\n\t\t\ty: vm.y\n\t\t};\n\t}\n});\n\nvar elements = {};\nvar Arc = element_arc;\nvar Line = element_line;\nvar Point = element_point;\nvar Rectangle = element_rectangle;\nelements.Arc = Arc;\nelements.Line = Line;\nelements.Point = Point;\nelements.Rectangle = Rectangle;\n\nvar resolve$1 = helpers$1.options.resolve;\n\ncore_defaults._set('bar', {\n\thover: {\n\t\tmode: 'label'\n\t},\n\n\tscales: {\n\t\txAxes: [{\n\t\t\ttype: 'category',\n\t\t\tcategoryPercentage: 0.8,\n\t\t\tbarPercentage: 0.9,\n\t\t\toffset: true,\n\t\t\tgridLines: {\n\t\t\t\toffsetGridLines: true\n\t\t\t}\n\t\t}],\n\n\t\tyAxes: [{\n\t\t\ttype: 'linear'\n\t\t}]\n\t}\n});\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(scale, pixels) {\n\tvar min = scale.isHorizontal() ? scale.width : scale.height;\n\tvar ticks = scale.getTicks();\n\tvar prev, curr, i, ilen;\n\n\tfor (i = 1, ilen = pixels.length; i < ilen; ++i) {\n\t\tmin = Math.min(min, Math.abs(pixels[i] - pixels[i - 1]));\n\t}\n\n\tfor (i = 0, ilen = ticks.length; i < ilen; ++i) {\n\t\tcurr = scale.getPixelForTick(i);\n\t\tmin = i > 0 ? Math.min(min, curr - prev) : min;\n\t\tprev = curr;\n\t}\n\n\treturn min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options) {\n\tvar thickness = options.barThickness;\n\tvar count = ruler.stackCount;\n\tvar curr = ruler.pixels[index];\n\tvar size, ratio;\n\n\tif (helpers$1.isNullOrUndef(thickness)) {\n\t\tsize = ruler.min * options.categoryPercentage;\n\t\tratio = options.barPercentage;\n\t} else {\n\t\t// When bar thickness is enforced, category and bar percentages are ignored.\n\t\t// Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n\t\t// and deprecate barPercentage since this value is ignored when thickness is absolute.\n\t\tsize = thickness * count;\n\t\tratio = 1;\n\t}\n\n\treturn {\n\t\tchunk: size / count,\n\t\tratio: ratio,\n\t\tstart: curr - (size / 2)\n\t};\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options) {\n\tvar pixels = ruler.pixels;\n\tvar curr = pixels[index];\n\tvar prev = index > 0 ? pixels[index - 1] : null;\n\tvar next = index < pixels.length - 1 ? pixels[index + 1] : null;\n\tvar percent = options.categoryPercentage;\n\tvar start, size;\n\n\tif (prev === null) {\n\t\t// first data: its size is double based on the next point or,\n\t\t// if it's also the last data, we use the scale size.\n\t\tprev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n\t}\n\n\tif (next === null) {\n\t\t// last data: its size is also double based on the previous point.\n\t\tnext = curr + curr - prev;\n\t}\n\n\tstart = curr - (curr - Math.min(prev, next)) / 2 * percent;\n\tsize = Math.abs(next - prev) / 2 * percent;\n\n\treturn {\n\t\tchunk: size / ruler.stackCount,\n\t\tratio: options.barPercentage,\n\t\tstart: start\n\t};\n}\n\nvar controller_bar = core_datasetController.extend({\n\n\tdataElementType: elements.Rectangle,\n\n\tinitialize: function() {\n\t\tvar me = this;\n\t\tvar meta;\n\n\t\tcore_datasetController.prototype.initialize.apply(me, arguments);\n\n\t\tmeta = me.getMeta();\n\t\tmeta.stack = me.getDataset().stack;\n\t\tmeta.bar = true;\n\t},\n\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar rects = me.getMeta().data;\n\t\tvar i, ilen;\n\n\t\tme._ruler = me.getRuler();\n\n\t\tfor (i = 0, ilen = rects.length; i < ilen; ++i) {\n\t\t\tme.updateElement(rects[i], i, reset);\n\t\t}\n\t},\n\n\tupdateElement: function(rectangle, index, reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar dataset = me.getDataset();\n\t\tvar options = me._resolveElementOptions(rectangle, index);\n\n\t\trectangle._xScale = me.getScaleForId(meta.xAxisID);\n\t\trectangle._yScale = me.getScaleForId(meta.yAxisID);\n\t\trectangle._datasetIndex = me.index;\n\t\trectangle._index = index;\n\t\trectangle._model = {\n\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\tborderColor: options.borderColor,\n\t\t\tborderSkipped: options.borderSkipped,\n\t\t\tborderWidth: options.borderWidth,\n\t\t\tdatasetLabel: dataset.label,\n\t\t\tlabel: me.chart.data.labels[index]\n\t\t};\n\n\t\tme._updateElementGeometry(rectangle, index, reset);\n\n\t\trectangle.pivot();\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_updateElementGeometry: function(rectangle, index, reset) {\n\t\tvar me = this;\n\t\tvar model = rectangle._model;\n\t\tvar vscale = me._getValueScale();\n\t\tvar base = vscale.getBasePixel();\n\t\tvar horizontal = vscale.isHorizontal();\n\t\tvar ruler = me._ruler || me.getRuler();\n\t\tvar vpixels = me.calculateBarValuePixels(me.index, index);\n\t\tvar ipixels = me.calculateBarIndexPixels(me.index, index, ruler);\n\n\t\tmodel.horizontal = horizontal;\n\t\tmodel.base = reset ? base : vpixels.base;\n\t\tmodel.x = horizontal ? reset ? base : vpixels.head : ipixels.center;\n\t\tmodel.y = horizontal ? ipixels.center : reset ? base : vpixels.head;\n\t\tmodel.height = horizontal ? ipixels.size : undefined;\n\t\tmodel.width = horizontal ? undefined : ipixels.size;\n\t},\n\n\t/**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n\t_getStacks: function(last) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar scale = me._getIndexScale();\n\t\tvar stacked = scale.options.stacked;\n\t\tvar ilen = last === undefined ? chart.data.datasets.length : last + 1;\n\t\tvar stacks = [];\n\t\tvar i, meta;\n\n\t\tfor (i = 0; i < ilen; ++i) {\n\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\tif (meta.bar && chart.isDatasetVisible(i) &&\n\t\t\t\t(stacked === false ||\n\t\t\t\t(stacked === true && stacks.indexOf(meta.stack) === -1) ||\n\t\t\t\t(stacked === undefined && (meta.stack === undefined || stacks.indexOf(meta.stack) === -1)))) {\n\t\t\t\tstacks.push(meta.stack);\n\t\t\t}\n\t\t}\n\n\t\treturn stacks;\n\t},\n\n\t/**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n\tgetStackCount: function() {\n\t\treturn this._getStacks().length;\n\t},\n\n\t/**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n\t * @returns {number} The stack index\n\t * @private\n\t */\n\tgetStackIndex: function(datasetIndex, name) {\n\t\tvar stacks = this._getStacks(datasetIndex);\n\t\tvar index = (name !== undefined)\n\t\t\t? stacks.indexOf(name)\n\t\t\t: -1; // indexOf returns -1 if element is not present\n\n\t\treturn (index === -1)\n\t\t\t? stacks.length - 1\n\t\t\t: index;\n\t},\n\n\t/**\n\t * @private\n\t */\n\tgetRuler: function() {\n\t\tvar me = this;\n\t\tvar scale = me._getIndexScale();\n\t\tvar stackCount = me.getStackCount();\n\t\tvar datasetIndex = me.index;\n\t\tvar isHorizontal = scale.isHorizontal();\n\t\tvar start = isHorizontal ? scale.left : scale.top;\n\t\tvar end = start + (isHorizontal ? scale.width : scale.height);\n\t\tvar pixels = [];\n\t\tvar i, ilen, min;\n\n\t\tfor (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {\n\t\t\tpixels.push(scale.getPixelForValue(null, i, datasetIndex));\n\t\t}\n\n\t\tmin = helpers$1.isNullOrUndef(scale.options.barThickness)\n\t\t\t? computeMinSampleSize(scale, pixels)\n\t\t\t: -1;\n\n\t\treturn {\n\t\t\tmin: min,\n\t\t\tpixels: pixels,\n\t\t\tstart: start,\n\t\t\tend: end,\n\t\t\tstackCount: stackCount,\n\t\t\tscale: scale\n\t\t};\n\t},\n\n\t/**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n\tcalculateBarValuePixels: function(datasetIndex, index) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar meta = me.getMeta();\n\t\tvar scale = me._getValueScale();\n\t\tvar isHorizontal = scale.isHorizontal();\n\t\tvar datasets = chart.data.datasets;\n\t\tvar value = +scale.getRightValue(datasets[datasetIndex].data[index]);\n\t\tvar minBarLength = scale.options.minBarLength;\n\t\tvar stacked = scale.options.stacked;\n\t\tvar stack = meta.stack;\n\t\tvar start = 0;\n\t\tvar i, imeta, ivalue, base, head, size;\n\n\t\tif (stacked || (stacked === undefined && stack !== undefined)) {\n\t\t\tfor (i = 0; i < datasetIndex; ++i) {\n\t\t\t\timeta = chart.getDatasetMeta(i);\n\n\t\t\t\tif (imeta.bar &&\n\t\t\t\t\timeta.stack === stack &&\n\t\t\t\t\timeta.controller._getValueScaleId() === scale.id &&\n\t\t\t\t\tchart.isDatasetVisible(i)) {\n\n\t\t\t\t\tivalue = +scale.getRightValue(datasets[i].data[index]);\n\t\t\t\t\tif ((value < 0 && ivalue < 0) || (value >= 0 && ivalue > 0)) {\n\t\t\t\t\t\tstart += ivalue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tbase = scale.getPixelForValue(start);\n\t\thead = scale.getPixelForValue(start + value);\n\t\tsize = head - base;\n\n\t\tif (minBarLength !== undefined && Math.abs(size) < minBarLength) {\n\t\t\tsize = minBarLength;\n\t\t\tif (value >= 0 && !isHorizontal || value < 0 && isHorizontal) {\n\t\t\t\thead = base - minBarLength;\n\t\t\t} else {\n\t\t\t\thead = base + minBarLength;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsize: size,\n\t\t\tbase: base,\n\t\t\thead: head,\n\t\t\tcenter: head + size / 2\n\t\t};\n\t},\n\n\t/**\n\t * @private\n\t */\n\tcalculateBarIndexPixels: function(datasetIndex, index, ruler) {\n\t\tvar me = this;\n\t\tvar options = ruler.scale.options;\n\t\tvar range = options.barThickness === 'flex'\n\t\t\t? computeFlexCategoryTraits(index, ruler, options)\n\t\t\t: computeFitCategoryTraits(index, ruler, options);\n\n\t\tvar stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);\n\t\tvar center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n\t\tvar size = Math.min(\n\t\t\thelpers$1.valueOrDefault(options.maxBarThickness, Infinity),\n\t\t\trange.chunk * range.ratio);\n\n\t\treturn {\n\t\t\tbase: center - size / 2,\n\t\t\thead: center + size / 2,\n\t\t\tcenter: center,\n\t\t\tsize: size\n\t\t};\n\t},\n\n\tdraw: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar scale = me._getValueScale();\n\t\tvar rects = me.getMeta().data;\n\t\tvar dataset = me.getDataset();\n\t\tvar ilen = rects.length;\n\t\tvar i = 0;\n\n\t\thelpers$1.canvas.clipArea(chart.ctx, chart.chartArea);\n\n\t\tfor (; i < ilen; ++i) {\n\t\t\tif (!isNaN(scale.getRightValue(dataset.data[i]))) {\n\t\t\t\trects[i].draw();\n\t\t\t}\n\t\t}\n\n\t\thelpers$1.canvas.unclipArea(chart.ctx);\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveElementOptions: function(rectangle, index) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar datasets = chart.data.datasets;\n\t\tvar dataset = datasets[me.index];\n\t\tvar custom = rectangle.custom || {};\n\t\tvar options = chart.options.elements.rectangle;\n\t\tvar values = {};\n\t\tvar i, ilen, key;\n\n\t\t// Scriptable options\n\t\tvar context = {\n\t\t\tchart: chart,\n\t\t\tdataIndex: index,\n\t\t\tdataset: dataset,\n\t\t\tdatasetIndex: me.index\n\t\t};\n\n\t\tvar keys = [\n\t\t\t'backgroundColor',\n\t\t\t'borderColor',\n\t\t\t'borderSkipped',\n\t\t\t'borderWidth'\n\t\t];\n\n\t\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\t\tkey = keys[i];\n\t\t\tvalues[key] = resolve$1([\n\t\t\t\tcustom[key],\n\t\t\t\tdataset[key],\n\t\t\t\toptions[key]\n\t\t\t], context, index);\n\t\t}\n\n\t\treturn values;\n\t}\n});\n\nvar valueOrDefault$3 = helpers$1.valueOrDefault;\nvar resolve$2 = helpers$1.options.resolve;\n\ncore_defaults._set('bubble', {\n\thover: {\n\t\tmode: 'single'\n\t},\n\n\tscales: {\n\t\txAxes: [{\n\t\t\ttype: 'linear', // bubble should probably use a linear scale by default\n\t\t\tposition: 'bottom',\n\t\t\tid: 'x-axis-0' // need an ID so datasets can reference the scale\n\t\t}],\n\t\tyAxes: [{\n\t\t\ttype: 'linear',\n\t\t\tposition: 'left',\n\t\t\tid: 'y-axis-0'\n\t\t}]\n\t},\n\n\ttooltips: {\n\t\tcallbacks: {\n\t\t\ttitle: function() {\n\t\t\t\t// Title doesn't make sense for scatter since we format the data as a point\n\t\t\t\treturn '';\n\t\t\t},\n\t\t\tlabel: function(item, data) {\n\t\t\t\tvar datasetLabel = data.datasets[item.datasetIndex].label || '';\n\t\t\t\tvar dataPoint = data.datasets[item.datasetIndex].data[item.index];\n\t\t\t\treturn datasetLabel + ': (' + item.xLabel + ', ' + item.yLabel + ', ' + dataPoint.r + ')';\n\t\t\t}\n\t\t}\n\t}\n});\n\nvar controller_bubble = core_datasetController.extend({\n\t/**\n\t * @protected\n\t */\n\tdataElementType: elements.Point,\n\n\t/**\n\t * @protected\n\t */\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar points = meta.data;\n\n\t\t// Update Points\n\t\thelpers$1.each(points, function(point, index) {\n\t\t\tme.updateElement(point, index, reset);\n\t\t});\n\t},\n\n\t/**\n\t * @protected\n\t */\n\tupdateElement: function(point, index, reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar custom = point.custom || {};\n\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\tvar options = me._resolveElementOptions(point, index);\n\t\tvar data = me.getDataset().data[index];\n\t\tvar dsIndex = me.index;\n\n\t\tvar x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex);\n\t\tvar y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);\n\n\t\tpoint._xScale = xScale;\n\t\tpoint._yScale = yScale;\n\t\tpoint._options = options;\n\t\tpoint._datasetIndex = dsIndex;\n\t\tpoint._index = index;\n\t\tpoint._model = {\n\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\tborderColor: options.borderColor,\n\t\t\tborderWidth: options.borderWidth,\n\t\t\thitRadius: options.hitRadius,\n\t\t\tpointStyle: options.pointStyle,\n\t\t\trotation: options.rotation,\n\t\t\tradius: reset ? 0 : options.radius,\n\t\t\tskip: custom.skip || isNaN(x) || isNaN(y),\n\t\t\tx: x,\n\t\t\ty: y,\n\t\t};\n\n\t\tpoint.pivot();\n\t},\n\n\t/**\n\t * @protected\n\t */\n\tsetHoverStyle: function(point) {\n\t\tvar model = point._model;\n\t\tvar options = point._options;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\n\t\tpoint.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth,\n\t\t\tradius: model.radius\n\t\t};\n\n\t\tmodel.backgroundColor = valueOrDefault$3(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n\t\tmodel.borderColor = valueOrDefault$3(options.hoverBorderColor, getHoverColor(options.borderColor));\n\t\tmodel.borderWidth = valueOrDefault$3(options.hoverBorderWidth, options.borderWidth);\n\t\tmodel.radius = options.radius + options.hoverRadius;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveElementOptions: function(point, index) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar datasets = chart.data.datasets;\n\t\tvar dataset = datasets[me.index];\n\t\tvar custom = point.custom || {};\n\t\tvar options = chart.options.elements.point;\n\t\tvar data = dataset.data[index];\n\t\tvar values = {};\n\t\tvar i, ilen, key;\n\n\t\t// Scriptable options\n\t\tvar context = {\n\t\t\tchart: chart,\n\t\t\tdataIndex: index,\n\t\t\tdataset: dataset,\n\t\t\tdatasetIndex: me.index\n\t\t};\n\n\t\tvar keys = [\n\t\t\t'backgroundColor',\n\t\t\t'borderColor',\n\t\t\t'borderWidth',\n\t\t\t'hoverBackgroundColor',\n\t\t\t'hoverBorderColor',\n\t\t\t'hoverBorderWidth',\n\t\t\t'hoverRadius',\n\t\t\t'hitRadius',\n\t\t\t'pointStyle',\n\t\t\t'rotation'\n\t\t];\n\n\t\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\t\tkey = keys[i];\n\t\t\tvalues[key] = resolve$2([\n\t\t\t\tcustom[key],\n\t\t\t\tdataset[key],\n\t\t\t\toptions[key]\n\t\t\t], context, index);\n\t\t}\n\n\t\t// Custom radius resolution\n\t\tvalues.radius = resolve$2([\n\t\t\tcustom.radius,\n\t\t\tdata ? data.r : undefined,\n\t\t\tdataset.radius,\n\t\t\toptions.radius\n\t\t], context, index);\n\n\t\treturn values;\n\t}\n});\n\nvar resolve$3 = helpers$1.options.resolve;\nvar valueOrDefault$4 = helpers$1.valueOrDefault;\n\ncore_defaults._set('doughnut', {\n\tanimation: {\n\t\t// Boolean - Whether we animate the rotation of the Doughnut\n\t\tanimateRotate: true,\n\t\t// Boolean - Whether we animate scaling the Doughnut from the centre\n\t\tanimateScale: false\n\t},\n\thover: {\n\t\tmode: 'single'\n\t},\n\tlegendCallback: function(chart) {\n\t\tvar text = [];\n\t\ttext.push('<ul class=\"' + chart.id + '-legend\">');\n\n\t\tvar data = chart.data;\n\t\tvar datasets = data.datasets;\n\t\tvar labels = data.labels;\n\n\t\tif (datasets.length) {\n\t\t\tfor (var i = 0; i < datasets[0].data.length; ++i) {\n\t\t\t\ttext.push('<li><span style=\"background-color:' + datasets[0].backgroundColor[i] + '\"></span>');\n\t\t\t\tif (labels[i]) {\n\t\t\t\t\ttext.push(labels[i]);\n\t\t\t\t}\n\t\t\t\ttext.push('</li>');\n\t\t\t}\n\t\t}\n\n\t\ttext.push('</ul>');\n\t\treturn text.join('');\n\t},\n\tlegend: {\n\t\tlabels: {\n\t\t\tgenerateLabels: function(chart) {\n\t\t\t\tvar data = chart.data;\n\t\t\t\tif (data.labels.length && data.datasets.length) {\n\t\t\t\t\treturn data.labels.map(function(label, i) {\n\t\t\t\t\t\tvar meta = chart.getDatasetMeta(0);\n\t\t\t\t\t\tvar ds = data.datasets[0];\n\t\t\t\t\t\tvar arc = meta.data[i];\n\t\t\t\t\t\tvar custom = arc && arc.custom || {};\n\t\t\t\t\t\tvar arcOpts = chart.options.elements.arc;\n\t\t\t\t\t\tvar fill = resolve$3([custom.backgroundColor, ds.backgroundColor, arcOpts.backgroundColor], undefined, i);\n\t\t\t\t\t\tvar stroke = resolve$3([custom.borderColor, ds.borderColor, arcOpts.borderColor], undefined, i);\n\t\t\t\t\t\tvar bw = resolve$3([custom.borderWidth, ds.borderWidth, arcOpts.borderWidth], undefined, i);\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttext: label,\n\t\t\t\t\t\t\tfillStyle: fill,\n\t\t\t\t\t\t\tstrokeStyle: stroke,\n\t\t\t\t\t\t\tlineWidth: bw,\n\t\t\t\t\t\t\thidden: isNaN(ds.data[i]) || meta.data[i].hidden,\n\n\t\t\t\t\t\t\t// Extra data used for toggling the correct item\n\t\t\t\t\t\t\tindex: i\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t}\n\t\t},\n\n\t\tonClick: function(e, legendItem) {\n\t\t\tvar index = legendItem.index;\n\t\t\tvar chart = this.chart;\n\t\t\tvar i, ilen, meta;\n\n\t\t\tfor (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n\t\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\t\t// toggle visibility of index if exists\n\t\t\t\tif (meta.data[index]) {\n\t\t\t\t\tmeta.data[index].hidden = !meta.data[index].hidden;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tchart.update();\n\t\t}\n\t},\n\n\t// The percentage of the chart that we cut out of the middle.\n\tcutoutPercentage: 50,\n\n\t// The rotation of the chart, where the first data arc begins.\n\trotation: Math.PI * -0.5,\n\n\t// The total circumference of the chart.\n\tcircumference: Math.PI * 2.0,\n\n\t// Need to override these to give a nice default\n\ttooltips: {\n\t\tcallbacks: {\n\t\t\ttitle: function() {\n\t\t\t\treturn '';\n\t\t\t},\n\t\t\tlabel: function(tooltipItem, data) {\n\t\t\t\tvar dataLabel = data.labels[tooltipItem.index];\n\t\t\t\tvar value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n\n\t\t\t\tif (helpers$1.isArray(dataLabel)) {\n\t\t\t\t\t// show value on first line of multiline label\n\t\t\t\t\t// need to clone because we are changing the value\n\t\t\t\t\tdataLabel = dataLabel.slice();\n\t\t\t\t\tdataLabel[0] += value;\n\t\t\t\t} else {\n\t\t\t\t\tdataLabel += value;\n\t\t\t\t}\n\n\t\t\t\treturn dataLabel;\n\t\t\t}\n\t\t}\n\t}\n});\n\nvar controller_doughnut = core_datasetController.extend({\n\n\tdataElementType: elements.Arc,\n\n\tlinkScales: helpers$1.noop,\n\n\t// Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly\n\tgetRingIndex: function(datasetIndex) {\n\t\tvar ringIndex = 0;\n\n\t\tfor (var j = 0; j < datasetIndex; ++j) {\n\t\t\tif (this.chart.isDatasetVisible(j)) {\n\t\t\t\t++ringIndex;\n\t\t\t}\n\t\t}\n\n\t\treturn ringIndex;\n\t},\n\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar chartArea = chart.chartArea;\n\t\tvar opts = chart.options;\n\t\tvar availableWidth = chartArea.right - chartArea.left;\n\t\tvar availableHeight = chartArea.bottom - chartArea.top;\n\t\tvar minSize = Math.min(availableWidth, availableHeight);\n\t\tvar offset = {x: 0, y: 0};\n\t\tvar meta = me.getMeta();\n\t\tvar arcs = meta.data;\n\t\tvar cutoutPercentage = opts.cutoutPercentage;\n\t\tvar circumference = opts.circumference;\n\t\tvar chartWeight = me._getRingWeight(me.index);\n\t\tvar i, ilen;\n\n\t\t// If the chart's circumference isn't a full circle, calculate minSize as a ratio of the width/height of the arc\n\t\tif (circumference < Math.PI * 2.0) {\n\t\t\tvar startAngle = opts.rotation % (Math.PI * 2.0);\n\t\t\tstartAngle += Math.PI * 2.0 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);\n\t\t\tvar endAngle = startAngle + circumference;\n\t\t\tvar start = {x: Math.cos(startAngle), y: Math.sin(startAngle)};\n\t\t\tvar end = {x: Math.cos(endAngle), y: Math.sin(endAngle)};\n\t\t\tvar contains0 = (startAngle <= 0 && endAngle >= 0) || (startAngle <= Math.PI * 2.0 && Math.PI * 2.0 <= endAngle);\n\t\t\tvar contains90 = (startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle);\n\t\t\tvar contains180 = (startAngle <= -Math.PI && -Math.PI <= endAngle) || (startAngle <= Math.PI && Math.PI <= endAngle);\n\t\t\tvar contains270 = (startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle);\n\t\t\tvar cutout = cutoutPercentage / 100.0;\n\t\t\tvar min = {x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)), y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout))};\n\t\t\tvar max = {x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)), y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout))};\n\t\t\tvar size = {width: (max.x - min.x) * 0.5, height: (max.y - min.y) * 0.5};\n\t\t\tminSize = Math.min(availableWidth / size.width, availableHeight / size.height);\n\t\t\toffset = {x: (max.x + min.x) * -0.5, y: (max.y + min.y) * -0.5};\n\t\t}\n\n\t\tfor (i = 0, ilen = arcs.length; i < ilen; ++i) {\n\t\t\tarcs[i]._options = me._resolveElementOptions(arcs[i], i);\n\t\t}\n\n\t\tchart.borderWidth = me.getMaxBorderWidth();\n\t\tchart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);\n\t\tchart.innerRadius = Math.max(cutoutPercentage ? (chart.outerRadius / 100) * (cutoutPercentage) : 0, 0);\n\t\tchart.radiusLength = (chart.outerRadius - chart.innerRadius) / (me._getVisibleDatasetWeightTotal() || 1);\n\t\tchart.offsetX = offset.x * chart.outerRadius;\n\t\tchart.offsetY = offset.y * chart.outerRadius;\n\n\t\tmeta.total = me.calculateTotal();\n\n\t\tme.outerRadius = chart.outerRadius - chart.radiusLength * me._getRingWeightOffset(me.index);\n\t\tme.innerRadius = Math.max(me.outerRadius - chart.radiusLength * chartWeight, 0);\n\n\t\tfor (i = 0, ilen = arcs.length; i < ilen; ++i) {\n\t\t\tme.updateElement(arcs[i], i, reset);\n\t\t}\n\t},\n\n\tupdateElement: function(arc, index, reset) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar chartArea = chart.chartArea;\n\t\tvar opts = chart.options;\n\t\tvar animationOpts = opts.animation;\n\t\tvar centerX = (chartArea.left + chartArea.right) / 2;\n\t\tvar centerY = (chartArea.top + chartArea.bottom) / 2;\n\t\tvar startAngle = opts.rotation; // non reset case handled later\n\t\tvar endAngle = opts.rotation; // non reset case handled later\n\t\tvar dataset = me.getDataset();\n\t\tvar circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2.0 * Math.PI));\n\t\tvar innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;\n\t\tvar outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;\n\t\tvar options = arc._options || {};\n\n\t\thelpers$1.extend(arc, {\n\t\t\t// Utility\n\t\t\t_datasetIndex: me.index,\n\t\t\t_index: index,\n\n\t\t\t// Desired view properties\n\t\t\t_model: {\n\t\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\t\tborderColor: options.borderColor,\n\t\t\t\tborderWidth: options.borderWidth,\n\t\t\t\tborderAlign: options.borderAlign,\n\t\t\t\tx: centerX + chart.offsetX,\n\t\t\t\ty: centerY + chart.offsetY,\n\t\t\t\tstartAngle: startAngle,\n\t\t\t\tendAngle: endAngle,\n\t\t\t\tcircumference: circumference,\n\t\t\t\touterRadius: outerRadius,\n\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\tlabel: helpers$1.valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])\n\t\t\t}\n\t\t});\n\n\t\tvar model = arc._model;\n\n\t\t// Set correct angles if not resetting\n\t\tif (!reset || !animationOpts.animateRotate) {\n\t\t\tif (index === 0) {\n\t\t\t\tmodel.startAngle = opts.rotation;\n\t\t\t} else {\n\t\t\t\tmodel.startAngle = me.getMeta().data[index - 1]._model.endAngle;\n\t\t\t}\n\n\t\t\tmodel.endAngle = model.startAngle + model.circumference;\n\t\t}\n\n\t\tarc.pivot();\n\t},\n\n\tcalculateTotal: function() {\n\t\tvar dataset = this.getDataset();\n\t\tvar meta = this.getMeta();\n\t\tvar total = 0;\n\t\tvar value;\n\n\t\thelpers$1.each(meta.data, function(element, index) {\n\t\t\tvalue = dataset.data[index];\n\t\t\tif (!isNaN(value) && !element.hidden) {\n\t\t\t\ttotal += Math.abs(value);\n\t\t\t}\n\t\t});\n\n\t\t/* if (total === 0) {\n\t\t\ttotal = NaN;\n\t\t}*/\n\n\t\treturn total;\n\t},\n\n\tcalculateCircumference: function(value) {\n\t\tvar total = this.getMeta().total;\n\t\tif (total > 0 && !isNaN(value)) {\n\t\t\treturn (Math.PI * 2.0) * (Math.abs(value) / total);\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// gets the max border or hover width to properly scale pie charts\n\tgetMaxBorderWidth: function(arcs) {\n\t\tvar me = this;\n\t\tvar max = 0;\n\t\tvar chart = me.chart;\n\t\tvar i, ilen, meta, arc, controller, options, borderWidth, hoverWidth;\n\n\t\tif (!arcs) {\n\t\t\t// Find the outmost visible dataset\n\t\t\tfor (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n\t\t\t\tif (chart.isDatasetVisible(i)) {\n\t\t\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\t\t\tarcs = meta.data;\n\t\t\t\t\tif (i !== me.index) {\n\t\t\t\t\t\tcontroller = meta.controller;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!arcs) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tfor (i = 0, ilen = arcs.length; i < ilen; ++i) {\n\t\t\tarc = arcs[i];\n\t\t\toptions = controller ? controller._resolveElementOptions(arc, i) : arc._options;\n\t\t\tif (options.borderAlign !== 'inner') {\n\t\t\t\tborderWidth = options.borderWidth;\n\t\t\t\thoverWidth = options.hoverBorderWidth;\n\n\t\t\t\tmax = borderWidth > max ? borderWidth : max;\n\t\t\t\tmax = hoverWidth > max ? hoverWidth : max;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t},\n\n\t/**\n\t * @protected\n\t */\n\tsetHoverStyle: function(arc) {\n\t\tvar model = arc._model;\n\t\tvar options = arc._options;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\n\t\tarc.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth,\n\t\t};\n\n\t\tmodel.backgroundColor = valueOrDefault$4(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n\t\tmodel.borderColor = valueOrDefault$4(options.hoverBorderColor, getHoverColor(options.borderColor));\n\t\tmodel.borderWidth = valueOrDefault$4(options.hoverBorderWidth, options.borderWidth);\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveElementOptions: function(arc, index) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar dataset = me.getDataset();\n\t\tvar custom = arc.custom || {};\n\t\tvar options = chart.options.elements.arc;\n\t\tvar values = {};\n\t\tvar i, ilen, key;\n\n\t\t// Scriptable options\n\t\tvar context = {\n\t\t\tchart: chart,\n\t\t\tdataIndex: index,\n\t\t\tdataset: dataset,\n\t\t\tdatasetIndex: me.index\n\t\t};\n\n\t\tvar keys = [\n\t\t\t'backgroundColor',\n\t\t\t'borderColor',\n\t\t\t'borderWidth',\n\t\t\t'borderAlign',\n\t\t\t'hoverBackgroundColor',\n\t\t\t'hoverBorderColor',\n\t\t\t'hoverBorderWidth',\n\t\t];\n\n\t\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\t\tkey = keys[i];\n\t\t\tvalues[key] = resolve$3([\n\t\t\t\tcustom[key],\n\t\t\t\tdataset[key],\n\t\t\t\toptions[key]\n\t\t\t], context, index);\n\t\t}\n\n\t\treturn values;\n\t},\n\n\t/**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n\t_getRingWeightOffset: function(datasetIndex) {\n\t\tvar ringWeightOffset = 0;\n\n\t\tfor (var i = 0; i < datasetIndex; ++i) {\n\t\t\tif (this.chart.isDatasetVisible(i)) {\n\t\t\t\tringWeightOffset += this._getRingWeight(i);\n\t\t\t}\n\t\t}\n\n\t\treturn ringWeightOffset;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getRingWeight: function(dataSetIndex) {\n\t\treturn Math.max(valueOrDefault$4(this.chart.data.datasets[dataSetIndex].weight, 1), 0);\n\t},\n\n\t/**\n\t * Returns the sum of all visibile data set weights.  This value can be 0.\n\t * @private\n\t */\n\t_getVisibleDatasetWeightTotal: function() {\n\t\treturn this._getRingWeightOffset(this.chart.data.datasets.length);\n\t}\n});\n\ncore_defaults._set('horizontalBar', {\n\thover: {\n\t\tmode: 'index',\n\t\taxis: 'y'\n\t},\n\n\tscales: {\n\t\txAxes: [{\n\t\t\ttype: 'linear',\n\t\t\tposition: 'bottom'\n\t\t}],\n\n\t\tyAxes: [{\n\t\t\ttype: 'category',\n\t\t\tposition: 'left',\n\t\t\tcategoryPercentage: 0.8,\n\t\t\tbarPercentage: 0.9,\n\t\t\toffset: true,\n\t\t\tgridLines: {\n\t\t\t\toffsetGridLines: true\n\t\t\t}\n\t\t}]\n\t},\n\n\telements: {\n\t\trectangle: {\n\t\t\tborderSkipped: 'left'\n\t\t}\n\t},\n\n\ttooltips: {\n\t\tmode: 'index',\n\t\taxis: 'y'\n\t}\n});\n\nvar controller_horizontalBar = controller_bar.extend({\n\t/**\n\t * @private\n\t */\n\t_getValueScaleId: function() {\n\t\treturn this.getMeta().xAxisID;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getIndexScaleId: function() {\n\t\treturn this.getMeta().yAxisID;\n\t}\n});\n\nvar valueOrDefault$5 = helpers$1.valueOrDefault;\nvar resolve$4 = helpers$1.options.resolve;\nvar isPointInArea = helpers$1.canvas._isPointInArea;\n\ncore_defaults._set('line', {\n\tshowLines: true,\n\tspanGaps: false,\n\n\thover: {\n\t\tmode: 'label'\n\t},\n\n\tscales: {\n\t\txAxes: [{\n\t\t\ttype: 'category',\n\t\t\tid: 'x-axis-0'\n\t\t}],\n\t\tyAxes: [{\n\t\t\ttype: 'linear',\n\t\t\tid: 'y-axis-0'\n\t\t}]\n\t}\n});\n\nfunction lineEnabled(dataset, options) {\n\treturn valueOrDefault$5(dataset.showLine, options.showLines);\n}\n\nvar controller_line = core_datasetController.extend({\n\n\tdatasetElementType: elements.Line,\n\n\tdataElementType: elements.Point,\n\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar line = meta.dataset;\n\t\tvar points = meta.data || [];\n\t\tvar scale = me.getScaleForId(meta.yAxisID);\n\t\tvar dataset = me.getDataset();\n\t\tvar showLine = lineEnabled(dataset, me.chart.options);\n\t\tvar i, ilen;\n\n\t\t// Update Line\n\t\tif (showLine) {\n\t\t\t// Compatibility: If the properties are defined with only the old name, use those values\n\t\t\tif ((dataset.tension !== undefined) && (dataset.lineTension === undefined)) {\n\t\t\t\tdataset.lineTension = dataset.tension;\n\t\t\t}\n\n\t\t\t// Utility\n\t\t\tline._scale = scale;\n\t\t\tline._datasetIndex = me.index;\n\t\t\t// Data\n\t\t\tline._children = points;\n\t\t\t// Model\n\t\t\tline._model = me._resolveLineOptions(line);\n\n\t\t\tline.pivot();\n\t\t}\n\n\t\t// Update Points\n\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\tme.updateElement(points[i], i, reset);\n\t\t}\n\n\t\tif (showLine && line._model.tension !== 0) {\n\t\t\tme.updateBezierControlPoints();\n\t\t}\n\n\t\t// Now pivot the point for animation\n\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\tpoints[i].pivot();\n\t\t}\n\t},\n\n\tupdateElement: function(point, index, reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar custom = point.custom || {};\n\t\tvar dataset = me.getDataset();\n\t\tvar datasetIndex = me.index;\n\t\tvar value = dataset.data[index];\n\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\tvar lineModel = meta.dataset._model;\n\t\tvar x, y;\n\n\t\tvar options = me._resolvePointOptions(point, index);\n\n\t\tx = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex);\n\t\ty = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);\n\n\t\t// Utility\n\t\tpoint._xScale = xScale;\n\t\tpoint._yScale = yScale;\n\t\tpoint._options = options;\n\t\tpoint._datasetIndex = datasetIndex;\n\t\tpoint._index = index;\n\n\t\t// Desired view properties\n\t\tpoint._model = {\n\t\t\tx: x,\n\t\t\ty: y,\n\t\t\tskip: custom.skip || isNaN(x) || isNaN(y),\n\t\t\t// Appearance\n\t\t\tradius: options.radius,\n\t\t\tpointStyle: options.pointStyle,\n\t\t\trotation: options.rotation,\n\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\tborderColor: options.borderColor,\n\t\t\tborderWidth: options.borderWidth,\n\t\t\ttension: valueOrDefault$5(custom.tension, lineModel ? lineModel.tension : 0),\n\t\t\tsteppedLine: lineModel ? lineModel.steppedLine : false,\n\t\t\t// Tooltip\n\t\t\thitRadius: options.hitRadius\n\t\t};\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolvePointOptions: function(element, index) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar dataset = chart.data.datasets[me.index];\n\t\tvar custom = element.custom || {};\n\t\tvar options = chart.options.elements.point;\n\t\tvar values = {};\n\t\tvar i, ilen, key;\n\n\t\t// Scriptable options\n\t\tvar context = {\n\t\t\tchart: chart,\n\t\t\tdataIndex: index,\n\t\t\tdataset: dataset,\n\t\t\tdatasetIndex: me.index\n\t\t};\n\n\t\tvar ELEMENT_OPTIONS = {\n\t\t\tbackgroundColor: 'pointBackgroundColor',\n\t\t\tborderColor: 'pointBorderColor',\n\t\t\tborderWidth: 'pointBorderWidth',\n\t\t\thitRadius: 'pointHitRadius',\n\t\t\thoverBackgroundColor: 'pointHoverBackgroundColor',\n\t\t\thoverBorderColor: 'pointHoverBorderColor',\n\t\t\thoverBorderWidth: 'pointHoverBorderWidth',\n\t\t\thoverRadius: 'pointHoverRadius',\n\t\t\tpointStyle: 'pointStyle',\n\t\t\tradius: 'pointRadius',\n\t\t\trotation: 'pointRotation'\n\t\t};\n\t\tvar keys = Object.keys(ELEMENT_OPTIONS);\n\n\t\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\t\tkey = keys[i];\n\t\t\tvalues[key] = resolve$4([\n\t\t\t\tcustom[key],\n\t\t\t\tdataset[ELEMENT_OPTIONS[key]],\n\t\t\t\tdataset[key],\n\t\t\t\toptions[key]\n\t\t\t], context, index);\n\t\t}\n\n\t\treturn values;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveLineOptions: function(element) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar dataset = chart.data.datasets[me.index];\n\t\tvar custom = element.custom || {};\n\t\tvar options = chart.options;\n\t\tvar elementOptions = options.elements.line;\n\t\tvar values = {};\n\t\tvar i, ilen, key;\n\n\t\tvar keys = [\n\t\t\t'backgroundColor',\n\t\t\t'borderWidth',\n\t\t\t'borderColor',\n\t\t\t'borderCapStyle',\n\t\t\t'borderDash',\n\t\t\t'borderDashOffset',\n\t\t\t'borderJoinStyle',\n\t\t\t'fill',\n\t\t\t'cubicInterpolationMode'\n\t\t];\n\n\t\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\t\tkey = keys[i];\n\t\t\tvalues[key] = resolve$4([\n\t\t\t\tcustom[key],\n\t\t\t\tdataset[key],\n\t\t\t\telementOptions[key]\n\t\t\t]);\n\t\t}\n\n\t\t// The default behavior of lines is to break at null values, according\n\t\t// to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158\n\t\t// This option gives lines the ability to span gaps\n\t\tvalues.spanGaps = valueOrDefault$5(dataset.spanGaps, options.spanGaps);\n\t\tvalues.tension = valueOrDefault$5(dataset.lineTension, elementOptions.tension);\n\t\tvalues.steppedLine = resolve$4([custom.steppedLine, dataset.steppedLine, elementOptions.stepped]);\n\n\t\treturn values;\n\t},\n\n\tcalculatePointY: function(value, index, datasetIndex) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar meta = me.getMeta();\n\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\tvar sumPos = 0;\n\t\tvar sumNeg = 0;\n\t\tvar i, ds, dsMeta;\n\n\t\tif (yScale.options.stacked) {\n\t\t\tfor (i = 0; i < datasetIndex; i++) {\n\t\t\t\tds = chart.data.datasets[i];\n\t\t\t\tdsMeta = chart.getDatasetMeta(i);\n\t\t\t\tif (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i)) {\n\t\t\t\t\tvar stackedRightValue = Number(yScale.getRightValue(ds.data[index]));\n\t\t\t\t\tif (stackedRightValue < 0) {\n\t\t\t\t\t\tsumNeg += stackedRightValue || 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsumPos += stackedRightValue || 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar rightValue = Number(yScale.getRightValue(value));\n\t\t\tif (rightValue < 0) {\n\t\t\t\treturn yScale.getPixelForValue(sumNeg + rightValue);\n\t\t\t}\n\t\t\treturn yScale.getPixelForValue(sumPos + rightValue);\n\t\t}\n\n\t\treturn yScale.getPixelForValue(value);\n\t},\n\n\tupdateBezierControlPoints: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar meta = me.getMeta();\n\t\tvar lineModel = meta.dataset._model;\n\t\tvar area = chart.chartArea;\n\t\tvar points = meta.data || [];\n\t\tvar i, ilen, model, controlPoints;\n\n\t\t// Only consider points that are drawn in case the spanGaps option is used\n\t\tif (lineModel.spanGaps) {\n\t\t\tpoints = points.filter(function(pt) {\n\t\t\t\treturn !pt._model.skip;\n\t\t\t});\n\t\t}\n\n\t\tfunction capControlPoint(pt, min, max) {\n\t\t\treturn Math.max(Math.min(pt, max), min);\n\t\t}\n\n\t\tif (lineModel.cubicInterpolationMode === 'monotone') {\n\t\t\thelpers$1.splineCurveMonotone(points);\n\t\t} else {\n\t\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\t\tmodel = points[i]._model;\n\t\t\t\tcontrolPoints = helpers$1.splineCurve(\n\t\t\t\t\thelpers$1.previousItem(points, i)._model,\n\t\t\t\t\tmodel,\n\t\t\t\t\thelpers$1.nextItem(points, i)._model,\n\t\t\t\t\tlineModel.tension\n\t\t\t\t);\n\t\t\t\tmodel.controlPointPreviousX = controlPoints.previous.x;\n\t\t\t\tmodel.controlPointPreviousY = controlPoints.previous.y;\n\t\t\t\tmodel.controlPointNextX = controlPoints.next.x;\n\t\t\t\tmodel.controlPointNextY = controlPoints.next.y;\n\t\t\t}\n\t\t}\n\n\t\tif (chart.options.elements.line.capBezierPoints) {\n\t\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\t\tmodel = points[i]._model;\n\t\t\t\tif (isPointInArea(model, area)) {\n\t\t\t\t\tif (i > 0 && isPointInArea(points[i - 1]._model, area)) {\n\t\t\t\t\t\tmodel.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);\n\t\t\t\t\t\tmodel.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);\n\t\t\t\t\t}\n\t\t\t\t\tif (i < points.length - 1 && isPointInArea(points[i + 1]._model, area)) {\n\t\t\t\t\t\tmodel.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);\n\t\t\t\t\t\tmodel.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tdraw: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar meta = me.getMeta();\n\t\tvar points = meta.data || [];\n\t\tvar area = chart.chartArea;\n\t\tvar ilen = points.length;\n\t\tvar halfBorderWidth;\n\t\tvar i = 0;\n\n\t\tif (lineEnabled(me.getDataset(), chart.options)) {\n\t\t\thalfBorderWidth = (meta.dataset._model.borderWidth || 0) / 2;\n\n\t\t\thelpers$1.canvas.clipArea(chart.ctx, {\n\t\t\t\tleft: area.left,\n\t\t\t\tright: area.right,\n\t\t\t\ttop: area.top - halfBorderWidth,\n\t\t\t\tbottom: area.bottom + halfBorderWidth\n\t\t\t});\n\n\t\t\tmeta.dataset.draw();\n\n\t\t\thelpers$1.canvas.unclipArea(chart.ctx);\n\t\t}\n\n\t\t// Draw the points\n\t\tfor (; i < ilen; ++i) {\n\t\t\tpoints[i].draw(area);\n\t\t}\n\t},\n\n\t/**\n\t * @protected\n\t */\n\tsetHoverStyle: function(point) {\n\t\tvar model = point._model;\n\t\tvar options = point._options;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\n\t\tpoint.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth,\n\t\t\tradius: model.radius\n\t\t};\n\n\t\tmodel.backgroundColor = valueOrDefault$5(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n\t\tmodel.borderColor = valueOrDefault$5(options.hoverBorderColor, getHoverColor(options.borderColor));\n\t\tmodel.borderWidth = valueOrDefault$5(options.hoverBorderWidth, options.borderWidth);\n\t\tmodel.radius = valueOrDefault$5(options.hoverRadius, options.radius);\n\t},\n});\n\nvar resolve$5 = helpers$1.options.resolve;\n\ncore_defaults._set('polarArea', {\n\tscale: {\n\t\ttype: 'radialLinear',\n\t\tangleLines: {\n\t\t\tdisplay: false\n\t\t},\n\t\tgridLines: {\n\t\t\tcircular: true\n\t\t},\n\t\tpointLabels: {\n\t\t\tdisplay: false\n\t\t},\n\t\tticks: {\n\t\t\tbeginAtZero: true\n\t\t}\n\t},\n\n\t// Boolean - Whether to animate the rotation of the chart\n\tanimation: {\n\t\tanimateRotate: true,\n\t\tanimateScale: true\n\t},\n\n\tstartAngle: -0.5 * Math.PI,\n\tlegendCallback: function(chart) {\n\t\tvar text = [];\n\t\ttext.push('<ul class=\"' + chart.id + '-legend\">');\n\n\t\tvar data = chart.data;\n\t\tvar datasets = data.datasets;\n\t\tvar labels = data.labels;\n\n\t\tif (datasets.length) {\n\t\t\tfor (var i = 0; i < datasets[0].data.length; ++i) {\n\t\t\t\ttext.push('<li><span style=\"background-color:' + datasets[0].backgroundColor[i] + '\"></span>');\n\t\t\t\tif (labels[i]) {\n\t\t\t\t\ttext.push(labels[i]);\n\t\t\t\t}\n\t\t\t\ttext.push('</li>');\n\t\t\t}\n\t\t}\n\n\t\ttext.push('</ul>');\n\t\treturn text.join('');\n\t},\n\tlegend: {\n\t\tlabels: {\n\t\t\tgenerateLabels: function(chart) {\n\t\t\t\tvar data = chart.data;\n\t\t\t\tif (data.labels.length && data.datasets.length) {\n\t\t\t\t\treturn data.labels.map(function(label, i) {\n\t\t\t\t\t\tvar meta = chart.getDatasetMeta(0);\n\t\t\t\t\t\tvar ds = data.datasets[0];\n\t\t\t\t\t\tvar arc = meta.data[i];\n\t\t\t\t\t\tvar custom = arc.custom || {};\n\t\t\t\t\t\tvar arcOpts = chart.options.elements.arc;\n\t\t\t\t\t\tvar fill = resolve$5([custom.backgroundColor, ds.backgroundColor, arcOpts.backgroundColor], undefined, i);\n\t\t\t\t\t\tvar stroke = resolve$5([custom.borderColor, ds.borderColor, arcOpts.borderColor], undefined, i);\n\t\t\t\t\t\tvar bw = resolve$5([custom.borderWidth, ds.borderWidth, arcOpts.borderWidth], undefined, i);\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttext: label,\n\t\t\t\t\t\t\tfillStyle: fill,\n\t\t\t\t\t\t\tstrokeStyle: stroke,\n\t\t\t\t\t\t\tlineWidth: bw,\n\t\t\t\t\t\t\thidden: isNaN(ds.data[i]) || meta.data[i].hidden,\n\n\t\t\t\t\t\t\t// Extra data used for toggling the correct item\n\t\t\t\t\t\t\tindex: i\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t}\n\t\t},\n\n\t\tonClick: function(e, legendItem) {\n\t\t\tvar index = legendItem.index;\n\t\t\tvar chart = this.chart;\n\t\t\tvar i, ilen, meta;\n\n\t\t\tfor (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n\t\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\t\tmeta.data[index].hidden = !meta.data[index].hidden;\n\t\t\t}\n\n\t\t\tchart.update();\n\t\t}\n\t},\n\n\t// Need to override these to give a nice default\n\ttooltips: {\n\t\tcallbacks: {\n\t\t\ttitle: function() {\n\t\t\t\treturn '';\n\t\t\t},\n\t\t\tlabel: function(item, data) {\n\t\t\t\treturn data.labels[item.index] + ': ' + item.yLabel;\n\t\t\t}\n\t\t}\n\t}\n});\n\nvar controller_polarArea = core_datasetController.extend({\n\n\tdataElementType: elements.Arc,\n\n\tlinkScales: helpers$1.noop,\n\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar dataset = me.getDataset();\n\t\tvar meta = me.getMeta();\n\t\tvar start = me.chart.options.startAngle || 0;\n\t\tvar starts = me._starts = [];\n\t\tvar angles = me._angles = [];\n\t\tvar arcs = meta.data;\n\t\tvar i, ilen, angle;\n\n\t\tme._updateRadius();\n\n\t\tmeta.count = me.countVisibleElements();\n\n\t\tfor (i = 0, ilen = dataset.data.length; i < ilen; i++) {\n\t\t\tstarts[i] = start;\n\t\t\tangle = me._computeAngle(i);\n\t\t\tangles[i] = angle;\n\t\t\tstart += angle;\n\t\t}\n\n\t\tfor (i = 0, ilen = arcs.length; i < ilen; ++i) {\n\t\t\tarcs[i]._options = me._resolveElementOptions(arcs[i], i);\n\t\t\tme.updateElement(arcs[i], i, reset);\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_updateRadius: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar chartArea = chart.chartArea;\n\t\tvar opts = chart.options;\n\t\tvar minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n\t\tchart.outerRadius = Math.max(minSize / 2, 0);\n\t\tchart.innerRadius = Math.max(opts.cutoutPercentage ? (chart.outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n\t\tchart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();\n\n\t\tme.outerRadius = chart.outerRadius - (chart.radiusLength * me.index);\n\t\tme.innerRadius = me.outerRadius - chart.radiusLength;\n\t},\n\n\tupdateElement: function(arc, index, reset) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar dataset = me.getDataset();\n\t\tvar opts = chart.options;\n\t\tvar animationOpts = opts.animation;\n\t\tvar scale = chart.scale;\n\t\tvar labels = chart.data.labels;\n\n\t\tvar centerX = scale.xCenter;\n\t\tvar centerY = scale.yCenter;\n\n\t\t// var negHalfPI = -0.5 * Math.PI;\n\t\tvar datasetStartAngle = opts.startAngle;\n\t\tvar distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);\n\t\tvar startAngle = me._starts[index];\n\t\tvar endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);\n\n\t\tvar resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);\n\t\tvar options = arc._options || {};\n\n\t\thelpers$1.extend(arc, {\n\t\t\t// Utility\n\t\t\t_datasetIndex: me.index,\n\t\t\t_index: index,\n\t\t\t_scale: scale,\n\n\t\t\t// Desired view properties\n\t\t\t_model: {\n\t\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\t\tborderColor: options.borderColor,\n\t\t\t\tborderWidth: options.borderWidth,\n\t\t\t\tborderAlign: options.borderAlign,\n\t\t\t\tx: centerX,\n\t\t\t\ty: centerY,\n\t\t\t\tinnerRadius: 0,\n\t\t\t\touterRadius: reset ? resetRadius : distance,\n\t\t\t\tstartAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,\n\t\t\t\tendAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,\n\t\t\t\tlabel: helpers$1.valueAtIndexOrDefault(labels, index, labels[index])\n\t\t\t}\n\t\t});\n\n\t\tarc.pivot();\n\t},\n\n\tcountVisibleElements: function() {\n\t\tvar dataset = this.getDataset();\n\t\tvar meta = this.getMeta();\n\t\tvar count = 0;\n\n\t\thelpers$1.each(meta.data, function(element, index) {\n\t\t\tif (!isNaN(dataset.data[index]) && !element.hidden) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t});\n\n\t\treturn count;\n\t},\n\n\t/**\n\t * @protected\n\t */\n\tsetHoverStyle: function(arc) {\n\t\tvar model = arc._model;\n\t\tvar options = arc._options;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\t\tvar valueOrDefault = helpers$1.valueOrDefault;\n\n\t\tarc.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth,\n\t\t};\n\n\t\tmodel.backgroundColor = valueOrDefault(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n\t\tmodel.borderColor = valueOrDefault(options.hoverBorderColor, getHoverColor(options.borderColor));\n\t\tmodel.borderWidth = valueOrDefault(options.hoverBorderWidth, options.borderWidth);\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveElementOptions: function(arc, index) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar dataset = me.getDataset();\n\t\tvar custom = arc.custom || {};\n\t\tvar options = chart.options.elements.arc;\n\t\tvar values = {};\n\t\tvar i, ilen, key;\n\n\t\t// Scriptable options\n\t\tvar context = {\n\t\t\tchart: chart,\n\t\t\tdataIndex: index,\n\t\t\tdataset: dataset,\n\t\t\tdatasetIndex: me.index\n\t\t};\n\n\t\tvar keys = [\n\t\t\t'backgroundColor',\n\t\t\t'borderColor',\n\t\t\t'borderWidth',\n\t\t\t'borderAlign',\n\t\t\t'hoverBackgroundColor',\n\t\t\t'hoverBorderColor',\n\t\t\t'hoverBorderWidth',\n\t\t];\n\n\t\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\t\tkey = keys[i];\n\t\t\tvalues[key] = resolve$5([\n\t\t\t\tcustom[key],\n\t\t\t\tdataset[key],\n\t\t\t\toptions[key]\n\t\t\t], context, index);\n\t\t}\n\n\t\treturn values;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_computeAngle: function(index) {\n\t\tvar me = this;\n\t\tvar count = this.getMeta().count;\n\t\tvar dataset = me.getDataset();\n\t\tvar meta = me.getMeta();\n\n\t\tif (isNaN(dataset.data[index]) || meta.data[index].hidden) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Scriptable options\n\t\tvar context = {\n\t\t\tchart: me.chart,\n\t\t\tdataIndex: index,\n\t\t\tdataset: dataset,\n\t\t\tdatasetIndex: me.index\n\t\t};\n\n\t\treturn resolve$5([\n\t\t\tme.chart.options.elements.arc.angle,\n\t\t\t(2 * Math.PI) / count\n\t\t], context, index);\n\t}\n});\n\ncore_defaults._set('pie', helpers$1.clone(core_defaults.doughnut));\ncore_defaults._set('pie', {\n\tcutoutPercentage: 0\n});\n\n// Pie charts are Doughnut chart with different defaults\nvar controller_pie = controller_doughnut;\n\nvar valueOrDefault$6 = helpers$1.valueOrDefault;\nvar resolve$6 = helpers$1.options.resolve;\n\ncore_defaults._set('radar', {\n\tscale: {\n\t\ttype: 'radialLinear'\n\t},\n\telements: {\n\t\tline: {\n\t\t\ttension: 0 // no bezier in radar\n\t\t}\n\t}\n});\n\nvar controller_radar = core_datasetController.extend({\n\n\tdatasetElementType: elements.Line,\n\n\tdataElementType: elements.Point,\n\n\tlinkScales: helpers$1.noop,\n\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar line = meta.dataset;\n\t\tvar points = meta.data || [];\n\t\tvar scale = me.chart.scale;\n\t\tvar dataset = me.getDataset();\n\t\tvar i, ilen;\n\n\t\t// Compatibility: If the properties are defined with only the old name, use those values\n\t\tif ((dataset.tension !== undefined) && (dataset.lineTension === undefined)) {\n\t\t\tdataset.lineTension = dataset.tension;\n\t\t}\n\n\t\t// Utility\n\t\tline._scale = scale;\n\t\tline._datasetIndex = me.index;\n\t\t// Data\n\t\tline._children = points;\n\t\tline._loop = true;\n\t\t// Model\n\t\tline._model = me._resolveLineOptions(line);\n\n\t\tline.pivot();\n\n\t\t// Update Points\n\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\tme.updateElement(points[i], i, reset);\n\t\t}\n\n\t\t// Update bezier control points\n\t\tme.updateBezierControlPoints();\n\n\t\t// Now pivot the point for animation\n\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\tpoints[i].pivot();\n\t\t}\n\t},\n\n\tupdateElement: function(point, index, reset) {\n\t\tvar me = this;\n\t\tvar custom = point.custom || {};\n\t\tvar dataset = me.getDataset();\n\t\tvar scale = me.chart.scale;\n\t\tvar pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);\n\t\tvar options = me._resolvePointOptions(point, index);\n\t\tvar lineModel = me.getMeta().dataset._model;\n\t\tvar x = reset ? scale.xCenter : pointPosition.x;\n\t\tvar y = reset ? scale.yCenter : pointPosition.y;\n\n\t\t// Utility\n\t\tpoint._scale = scale;\n\t\tpoint._options = options;\n\t\tpoint._datasetIndex = me.index;\n\t\tpoint._index = index;\n\n\t\t// Desired view properties\n\t\tpoint._model = {\n\t\t\tx: x, // value not used in dataset scale, but we want a consistent API between scales\n\t\t\ty: y,\n\t\t\tskip: custom.skip || isNaN(x) || isNaN(y),\n\t\t\t// Appearance\n\t\t\tradius: options.radius,\n\t\t\tpointStyle: options.pointStyle,\n\t\t\trotation: options.rotation,\n\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\tborderColor: options.borderColor,\n\t\t\tborderWidth: options.borderWidth,\n\t\t\ttension: valueOrDefault$6(custom.tension, lineModel ? lineModel.tension : 0),\n\n\t\t\t// Tooltip\n\t\t\thitRadius: options.hitRadius\n\t\t};\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolvePointOptions: function(element, index) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar dataset = chart.data.datasets[me.index];\n\t\tvar custom = element.custom || {};\n\t\tvar options = chart.options.elements.point;\n\t\tvar values = {};\n\t\tvar i, ilen, key;\n\n\t\t// Scriptable options\n\t\tvar context = {\n\t\t\tchart: chart,\n\t\t\tdataIndex: index,\n\t\t\tdataset: dataset,\n\t\t\tdatasetIndex: me.index\n\t\t};\n\n\t\tvar ELEMENT_OPTIONS = {\n\t\t\tbackgroundColor: 'pointBackgroundColor',\n\t\t\tborderColor: 'pointBorderColor',\n\t\t\tborderWidth: 'pointBorderWidth',\n\t\t\thitRadius: 'pointHitRadius',\n\t\t\thoverBackgroundColor: 'pointHoverBackgroundColor',\n\t\t\thoverBorderColor: 'pointHoverBorderColor',\n\t\t\thoverBorderWidth: 'pointHoverBorderWidth',\n\t\t\thoverRadius: 'pointHoverRadius',\n\t\t\tpointStyle: 'pointStyle',\n\t\t\tradius: 'pointRadius',\n\t\t\trotation: 'pointRotation'\n\t\t};\n\t\tvar keys = Object.keys(ELEMENT_OPTIONS);\n\n\t\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\t\tkey = keys[i];\n\t\t\tvalues[key] = resolve$6([\n\t\t\t\tcustom[key],\n\t\t\t\tdataset[ELEMENT_OPTIONS[key]],\n\t\t\t\tdataset[key],\n\t\t\t\toptions[key]\n\t\t\t], context, index);\n\t\t}\n\n\t\treturn values;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveLineOptions: function(element) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar dataset = chart.data.datasets[me.index];\n\t\tvar custom = element.custom || {};\n\t\tvar options = chart.options.elements.line;\n\t\tvar values = {};\n\t\tvar i, ilen, key;\n\n\t\tvar keys = [\n\t\t\t'backgroundColor',\n\t\t\t'borderWidth',\n\t\t\t'borderColor',\n\t\t\t'borderCapStyle',\n\t\t\t'borderDash',\n\t\t\t'borderDashOffset',\n\t\t\t'borderJoinStyle',\n\t\t\t'fill'\n\t\t];\n\n\t\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\t\tkey = keys[i];\n\t\t\tvalues[key] = resolve$6([\n\t\t\t\tcustom[key],\n\t\t\t\tdataset[key],\n\t\t\t\toptions[key]\n\t\t\t]);\n\t\t}\n\n\t\tvalues.tension = valueOrDefault$6(dataset.lineTension, options.tension);\n\n\t\treturn values;\n\t},\n\n\tupdateBezierControlPoints: function() {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar area = me.chart.chartArea;\n\t\tvar points = meta.data || [];\n\t\tvar i, ilen, model, controlPoints;\n\n\t\tfunction capControlPoint(pt, min, max) {\n\t\t\treturn Math.max(Math.min(pt, max), min);\n\t\t}\n\n\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\tmodel = points[i]._model;\n\t\t\tcontrolPoints = helpers$1.splineCurve(\n\t\t\t\thelpers$1.previousItem(points, i, true)._model,\n\t\t\t\tmodel,\n\t\t\t\thelpers$1.nextItem(points, i, true)._model,\n\t\t\t\tmodel.tension\n\t\t\t);\n\n\t\t\t// Prevent the bezier going outside of the bounds of the graph\n\t\t\tmodel.controlPointPreviousX = capControlPoint(controlPoints.previous.x, area.left, area.right);\n\t\t\tmodel.controlPointPreviousY = capControlPoint(controlPoints.previous.y, area.top, area.bottom);\n\t\t\tmodel.controlPointNextX = capControlPoint(controlPoints.next.x, area.left, area.right);\n\t\t\tmodel.controlPointNextY = capControlPoint(controlPoints.next.y, area.top, area.bottom);\n\t\t}\n\t},\n\n\tsetHoverStyle: function(point) {\n\t\tvar model = point._model;\n\t\tvar options = point._options;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\n\t\tpoint.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth,\n\t\t\tradius: model.radius\n\t\t};\n\n\t\tmodel.backgroundColor = valueOrDefault$6(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n\t\tmodel.borderColor = valueOrDefault$6(options.hoverBorderColor, getHoverColor(options.borderColor));\n\t\tmodel.borderWidth = valueOrDefault$6(options.hoverBorderWidth, options.borderWidth);\n\t\tmodel.radius = valueOrDefault$6(options.hoverRadius, options.radius);\n\t}\n});\n\ncore_defaults._set('scatter', {\n\thover: {\n\t\tmode: 'single'\n\t},\n\n\tscales: {\n\t\txAxes: [{\n\t\t\tid: 'x-axis-1',    // need an ID so datasets can reference the scale\n\t\t\ttype: 'linear',    // scatter should not use a category axis\n\t\t\tposition: 'bottom'\n\t\t}],\n\t\tyAxes: [{\n\t\t\tid: 'y-axis-1',\n\t\t\ttype: 'linear',\n\t\t\tposition: 'left'\n\t\t}]\n\t},\n\n\tshowLines: false,\n\n\ttooltips: {\n\t\tcallbacks: {\n\t\t\ttitle: function() {\n\t\t\t\treturn '';     // doesn't make sense for scatter since data are formatted as a point\n\t\t\t},\n\t\t\tlabel: function(item) {\n\t\t\t\treturn '(' + item.xLabel + ', ' + item.yLabel + ')';\n\t\t\t}\n\t\t}\n\t}\n});\n\n// Scatter charts use line controllers\nvar controller_scatter = controller_line;\n\n// NOTE export a map in which the key represents the controller type, not\n// the class, and so must be CamelCase in order to be correctly retrieved\n// by the controller in core.controller.js (`controllers[meta.type]`).\n\nvar controllers = {\n\tbar: controller_bar,\n\tbubble: controller_bubble,\n\tdoughnut: controller_doughnut,\n\thorizontalBar: controller_horizontalBar,\n\tline: controller_line,\n\tpolarArea: controller_polarArea,\n\tpie: controller_pie,\n\tradar: controller_radar,\n\tscatter: controller_scatter\n};\n\n/**\n * Helper function to get relative position for an event\n * @param {Event|IEvent} event - The event to get the position for\n * @param {Chart} chart - The chart\n * @returns {object} the event position\n */\nfunction getRelativePosition(e, chart) {\n\tif (e.native) {\n\t\treturn {\n\t\t\tx: e.x,\n\t\t\ty: e.y\n\t\t};\n\t}\n\n\treturn helpers$1.getRelativePosition(e, chart);\n}\n\n/**\n * Helper function to traverse all of the visible elements in the chart\n * @param {Chart} chart - the chart\n * @param {function} handler - the callback to execute for each visible item\n */\nfunction parseVisibleItems(chart, handler) {\n\tvar datasets = chart.data.datasets;\n\tvar meta, i, j, ilen, jlen;\n\n\tfor (i = 0, ilen = datasets.length; i < ilen; ++i) {\n\t\tif (!chart.isDatasetVisible(i)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tmeta = chart.getDatasetMeta(i);\n\t\tfor (j = 0, jlen = meta.data.length; j < jlen; ++j) {\n\t\t\tvar element = meta.data[j];\n\t\t\tif (!element._view.skip) {\n\t\t\t\thandler(element);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {ChartElement[]} items - elements to filter\n * @param {object} position - the point to be nearest to\n * @return {ChartElement[]} the nearest items\n */\nfunction getIntersectItems(chart, position) {\n\tvar elements = [];\n\n\tparseVisibleItems(chart, function(element) {\n\t\tif (element.inRange(position.x, position.y)) {\n\t\t\telements.push(element);\n\t\t}\n\t});\n\n\treturn elements;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in teh chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {object} position - the point to be nearest to\n * @param {boolean} intersect - if true, only consider items that intersect the position\n * @param {function} distanceMetric - function to provide the distance between points\n * @return {ChartElement[]} the nearest items\n */\nfunction getNearestItems(chart, position, intersect, distanceMetric) {\n\tvar minDistance = Number.POSITIVE_INFINITY;\n\tvar nearestItems = [];\n\n\tparseVisibleItems(chart, function(element) {\n\t\tif (intersect && !element.inRange(position.x, position.y)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar center = element.getCenterPoint();\n\t\tvar distance = distanceMetric(position, center);\n\t\tif (distance < minDistance) {\n\t\t\tnearestItems = [element];\n\t\t\tminDistance = distance;\n\t\t} else if (distance === minDistance) {\n\t\t\t// Can have multiple items at the same distance in which case we sort by size\n\t\t\tnearestItems.push(element);\n\t\t}\n\t});\n\n\treturn nearestItems;\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy\n */\nfunction getDistanceMetricForAxis(axis) {\n\tvar useX = axis.indexOf('x') !== -1;\n\tvar useY = axis.indexOf('y') !== -1;\n\n\treturn function(pt1, pt2) {\n\t\tvar deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n\t\tvar deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n\t\treturn Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n\t};\n}\n\nfunction indexMode(chart, e, options) {\n\tvar position = getRelativePosition(e, chart);\n\t// Default axis for index mode is 'x' to match old behaviour\n\toptions.axis = options.axis || 'x';\n\tvar distanceMetric = getDistanceMetricForAxis(options.axis);\n\tvar items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);\n\tvar elements = [];\n\n\tif (!items.length) {\n\t\treturn [];\n\t}\n\n\tchart.data.datasets.forEach(function(dataset, datasetIndex) {\n\t\tif (chart.isDatasetVisible(datasetIndex)) {\n\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\tvar element = meta.data[items[0]._index];\n\n\t\t\t// don't count items that are skipped (null data)\n\t\t\tif (element && !element._view.skip) {\n\t\t\t\telements.push(element);\n\t\t\t}\n\t\t}\n\t});\n\n\treturn elements;\n}\n\n/**\n * @interface IInteractionOptions\n */\n/**\n * If true, only consider items that intersect the point\n * @name IInterfaceOptions#boolean\n * @type Boolean\n */\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nvar core_interaction = {\n\t// Helper function for different modes\n\tmodes: {\n\t\tsingle: function(chart, e) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\tvar elements = [];\n\n\t\t\tparseVisibleItems(chart, function(element) {\n\t\t\t\tif (element.inRange(position.x, position.y)) {\n\t\t\t\t\telements.push(element);\n\t\t\t\t\treturn elements;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn elements.slice(0, 1);\n\t\t},\n\n\t\t/**\n\t\t * @function Chart.Interaction.modes.label\n\t\t * @deprecated since version 2.4.0\n\t\t * @todo remove at version 3\n\t\t * @private\n\t\t */\n\t\tlabel: indexMode,\n\n\t\t/**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use during interaction\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\tindex: indexMode,\n\n\t\t/**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use during interaction\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\tdataset: function(chart, e, options) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\toptions.axis = options.axis || 'xy';\n\t\t\tvar distanceMetric = getDistanceMetricForAxis(options.axis);\n\t\t\tvar items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);\n\n\t\t\tif (items.length > 0) {\n\t\t\t\titems = chart.getDatasetMeta(items[0]._datasetIndex).data;\n\t\t\t}\n\n\t\t\treturn items;\n\t\t},\n\n\t\t/**\n\t\t * @function Chart.Interaction.modes.x-axis\n\t\t * @deprecated since version 2.4.0. Use index mode and intersect == true\n\t\t * @todo remove at version 3\n\t\t * @private\n\t\t */\n\t\t'x-axis': function(chart, e) {\n\t\t\treturn indexMode(chart, e, {intersect: false});\n\t\t},\n\n\t\t/**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\tpoint: function(chart, e) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\treturn getIntersectItems(chart, position);\n\t\t},\n\n\t\t/**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\tnearest: function(chart, e, options) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\toptions.axis = options.axis || 'xy';\n\t\t\tvar distanceMetric = getDistanceMetricForAxis(options.axis);\n\t\t\treturn getNearestItems(chart, position, options.intersect, distanceMetric);\n\t\t},\n\n\t\t/**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\tx: function(chart, e, options) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\tvar items = [];\n\t\t\tvar intersectsItem = false;\n\n\t\t\tparseVisibleItems(chart, function(element) {\n\t\t\t\tif (element.inXRange(position.x)) {\n\t\t\t\t\titems.push(element);\n\t\t\t\t}\n\n\t\t\t\tif (element.inRange(position.x, position.y)) {\n\t\t\t\t\tintersectsItem = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// If we want to trigger on an intersect and we don't have any items\n\t\t\t// that intersect the position, return nothing\n\t\t\tif (options.intersect && !intersectsItem) {\n\t\t\t\titems = [];\n\t\t\t}\n\t\t\treturn items;\n\t\t},\n\n\t\t/**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\ty: function(chart, e, options) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\tvar items = [];\n\t\t\tvar intersectsItem = false;\n\n\t\t\tparseVisibleItems(chart, function(element) {\n\t\t\t\tif (element.inYRange(position.y)) {\n\t\t\t\t\titems.push(element);\n\t\t\t\t}\n\n\t\t\t\tif (element.inRange(position.x, position.y)) {\n\t\t\t\t\tintersectsItem = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// If we want to trigger on an intersect and we don't have any items\n\t\t\t// that intersect the position, return nothing\n\t\t\tif (options.intersect && !intersectsItem) {\n\t\t\t\titems = [];\n\t\t\t}\n\t\t\treturn items;\n\t\t}\n\t}\n};\n\nfunction filterByPosition(array, position) {\n\treturn helpers$1.where(array, function(v) {\n\t\treturn v.position === position;\n\t});\n}\n\nfunction sortByWeight(array, reverse) {\n\tarray.forEach(function(v, i) {\n\t\tv._tmpIndex_ = i;\n\t\treturn v;\n\t});\n\tarray.sort(function(a, b) {\n\t\tvar v0 = reverse ? b : a;\n\t\tvar v1 = reverse ? a : b;\n\t\treturn v0.weight === v1.weight ?\n\t\t\tv0._tmpIndex_ - v1._tmpIndex_ :\n\t\t\tv0.weight - v1.weight;\n\t});\n\tarray.forEach(function(v) {\n\t\tdelete v._tmpIndex_;\n\t});\n}\n\nfunction findMaxPadding(boxes) {\n\tvar top = 0;\n\tvar left = 0;\n\tvar bottom = 0;\n\tvar right = 0;\n\thelpers$1.each(boxes, function(box) {\n\t\tif (box.getPadding) {\n\t\t\tvar boxPadding = box.getPadding();\n\t\t\ttop = Math.max(top, boxPadding.top);\n\t\t\tleft = Math.max(left, boxPadding.left);\n\t\t\tbottom = Math.max(bottom, boxPadding.bottom);\n\t\t\tright = Math.max(right, boxPadding.right);\n\t\t}\n\t});\n\treturn {\n\t\ttop: top,\n\t\tleft: left,\n\t\tbottom: bottom,\n\t\tright: right\n\t};\n}\n\nfunction addSizeByPosition(boxes, size) {\n\thelpers$1.each(boxes, function(box) {\n\t\tsize[box.position] += box.isHorizontal() ? box.height : box.width;\n\t});\n}\n\ncore_defaults._set('global', {\n\tlayout: {\n\t\tpadding: {\n\t\t\ttop: 0,\n\t\t\tright: 0,\n\t\t\tbottom: 0,\n\t\t\tleft: 0\n\t\t}\n\t}\n});\n\n/**\n * @interface ILayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} getPadding -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nvar core_layouts = {\n\tdefaults: {},\n\n\t/**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {ILayoutItem} item - the item to add to be layed out\n\t */\n\taddBox: function(chart, item) {\n\t\tif (!chart.boxes) {\n\t\t\tchart.boxes = [];\n\t\t}\n\n\t\t// initialize item with default values\n\t\titem.fullWidth = item.fullWidth || false;\n\t\titem.position = item.position || 'top';\n\t\titem.weight = item.weight || 0;\n\n\t\tchart.boxes.push(item);\n\t},\n\n\t/**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {ILayoutItem} layoutItem - the item to remove from the layout\n\t */\n\tremoveBox: function(chart, layoutItem) {\n\t\tvar index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n\t\tif (index !== -1) {\n\t\t\tchart.boxes.splice(index, 1);\n\t\t}\n\t},\n\n\t/**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {ILayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n\tconfigure: function(chart, item, options) {\n\t\tvar props = ['fullWidth', 'position', 'weight'];\n\t\tvar ilen = props.length;\n\t\tvar i = 0;\n\t\tvar prop;\n\n\t\tfor (; i < ilen; ++i) {\n\t\t\tprop = props[i];\n\t\t\tif (options.hasOwnProperty(prop)) {\n\t\t\t\titem[prop] = options[prop];\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n\t */\n\tupdate: function(chart, width, height) {\n\t\tif (!chart) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar layoutOptions = chart.options.layout || {};\n\t\tvar padding = helpers$1.options.toPadding(layoutOptions.padding);\n\t\tvar leftPadding = padding.left;\n\t\tvar rightPadding = padding.right;\n\t\tvar topPadding = padding.top;\n\t\tvar bottomPadding = padding.bottom;\n\n\t\tvar leftBoxes = filterByPosition(chart.boxes, 'left');\n\t\tvar rightBoxes = filterByPosition(chart.boxes, 'right');\n\t\tvar topBoxes = filterByPosition(chart.boxes, 'top');\n\t\tvar bottomBoxes = filterByPosition(chart.boxes, 'bottom');\n\t\tvar chartAreaBoxes = filterByPosition(chart.boxes, 'chartArea');\n\n\t\t// Sort boxes by weight. A higher weight is further away from the chart area\n\t\tsortByWeight(leftBoxes, true);\n\t\tsortByWeight(rightBoxes, false);\n\t\tsortByWeight(topBoxes, true);\n\t\tsortByWeight(bottomBoxes, false);\n\n\t\tvar verticalBoxes = leftBoxes.concat(rightBoxes);\n\t\tvar horizontalBoxes = topBoxes.concat(bottomBoxes);\n\t\tvar outerBoxes = verticalBoxes.concat(horizontalBoxes);\n\n\t\t// Essentially we now have any number of boxes on each of the 4 sides.\n\t\t// Our canvas looks like the following.\n\t\t// The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n\t\t// B1 is the bottom axis\n\t\t// There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n\t\t// These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n\t\t// an error will be thrown.\n\t\t//\n\t\t// |----------------------------------------------------|\n\t\t// |                  T1 (Full Width)                   |\n\t\t// |----------------------------------------------------|\n\t\t// |    |    |                 T2                  |    |\n\t\t// |    |----|-------------------------------------|----|\n\t\t// |    |    | C1 |                           | C2 |    |\n\t\t// |    |    |----|                           |----|    |\n\t\t// |    |    |                                     |    |\n\t\t// | L1 | L2 |           ChartArea (C0)            | R1 |\n\t\t// |    |    |                                     |    |\n\t\t// |    |    |----|                           |----|    |\n\t\t// |    |    | C3 |                           | C4 |    |\n\t\t// |    |----|-------------------------------------|----|\n\t\t// |    |    |                 B1                  |    |\n\t\t// |----------------------------------------------------|\n\t\t// |                  B2 (Full Width)                   |\n\t\t// |----------------------------------------------------|\n\t\t//\n\t\t// What we do to find the best sizing, we do the following\n\t\t// 1. Determine the minimum size of the chart area.\n\t\t// 2. Split the remaining width equally between each vertical axis\n\t\t// 3. Split the remaining height equally between each horizontal axis\n\t\t// 4. Give each layout the maximum size it can be. The layout will return it's minimum size\n\t\t// 5. Adjust the sizes of each axis based on it's minimum reported size.\n\t\t// 6. Refit each axis\n\t\t// 7. Position each axis in the final location\n\t\t// 8. Tell the chart the final location of the chart area\n\t\t// 9. Tell any axes that overlay the chart area the positions of the chart area\n\n\t\t// Step 1\n\t\tvar chartWidth = width - leftPadding - rightPadding;\n\t\tvar chartHeight = height - topPadding - bottomPadding;\n\t\tvar chartAreaWidth = chartWidth / 2; // min 50%\n\n\t\t// Step 2\n\t\tvar verticalBoxWidth = (width - chartAreaWidth) / verticalBoxes.length;\n\n\t\t// Step 3\n\t\t// TODO re-limit horizontal axis height (this limit has affected only padding calculation since PR 1837)\n\t\t// var horizontalBoxHeight = (height - chartAreaHeight) / horizontalBoxes.length;\n\n\t\t// Step 4\n\t\tvar maxChartAreaWidth = chartWidth;\n\t\tvar maxChartAreaHeight = chartHeight;\n\t\tvar outerBoxSizes = {top: topPadding, left: leftPadding, bottom: bottomPadding, right: rightPadding};\n\t\tvar minBoxSizes = [];\n\t\tvar maxPadding;\n\n\t\tfunction getMinimumBoxSize(box) {\n\t\t\tvar minSize;\n\t\t\tvar isHorizontal = box.isHorizontal();\n\n\t\t\tif (isHorizontal) {\n\t\t\t\tminSize = box.update(box.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2);\n\t\t\t\tmaxChartAreaHeight -= minSize.height;\n\t\t\t} else {\n\t\t\t\tminSize = box.update(verticalBoxWidth, maxChartAreaHeight);\n\t\t\t\tmaxChartAreaWidth -= minSize.width;\n\t\t\t}\n\n\t\t\tminBoxSizes.push({\n\t\t\t\thorizontal: isHorizontal,\n\t\t\t\twidth: minSize.width,\n\t\t\t\tbox: box,\n\t\t\t});\n\t\t}\n\n\t\thelpers$1.each(outerBoxes, getMinimumBoxSize);\n\n\t\t// If a horizontal box has padding, we move the left boxes over to avoid ugly charts (see issue #2478)\n\t\tmaxPadding = findMaxPadding(outerBoxes);\n\n\t\t// At this point, maxChartAreaHeight and maxChartAreaWidth are the size the chart area could\n\t\t// be if the axes are drawn at their minimum sizes.\n\t\t// Steps 5 & 6\n\n\t\t// Function to fit a box\n\t\tfunction fitBox(box) {\n\t\t\tvar minBoxSize = helpers$1.findNextWhere(minBoxSizes, function(minBox) {\n\t\t\t\treturn minBox.box === box;\n\t\t\t});\n\n\t\t\tif (minBoxSize) {\n\t\t\t\tif (minBoxSize.horizontal) {\n\t\t\t\t\tvar scaleMargin = {\n\t\t\t\t\t\tleft: Math.max(outerBoxSizes.left, maxPadding.left),\n\t\t\t\t\t\tright: Math.max(outerBoxSizes.right, maxPadding.right),\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tbottom: 0\n\t\t\t\t\t};\n\n\t\t\t\t\t// Don't use min size here because of label rotation. When the labels are rotated, their rotation highly depends\n\t\t\t\t\t// on the margin. Sometimes they need to increase in size slightly\n\t\t\t\t\tbox.update(box.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);\n\t\t\t\t} else {\n\t\t\t\t\tbox.update(minBoxSize.width, maxChartAreaHeight);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Update, and calculate the left and right margins for the horizontal boxes\n\t\thelpers$1.each(verticalBoxes, fitBox);\n\t\taddSizeByPosition(verticalBoxes, outerBoxSizes);\n\n\t\t// Set the Left and Right margins for the horizontal boxes\n\t\thelpers$1.each(horizontalBoxes, fitBox);\n\t\taddSizeByPosition(horizontalBoxes, outerBoxSizes);\n\n\t\tfunction finalFitVerticalBox(box) {\n\t\t\tvar minBoxSize = helpers$1.findNextWhere(minBoxSizes, function(minSize) {\n\t\t\t\treturn minSize.box === box;\n\t\t\t});\n\n\t\t\tvar scaleMargin = {\n\t\t\t\tleft: 0,\n\t\t\t\tright: 0,\n\t\t\t\ttop: outerBoxSizes.top,\n\t\t\t\tbottom: outerBoxSizes.bottom\n\t\t\t};\n\n\t\t\tif (minBoxSize) {\n\t\t\t\tbox.update(minBoxSize.width, maxChartAreaHeight, scaleMargin);\n\t\t\t}\n\t\t}\n\n\t\t// Let the left layout know the final margin\n\t\thelpers$1.each(verticalBoxes, finalFitVerticalBox);\n\n\t\t// Recalculate because the size of each layout might have changed slightly due to the margins (label rotation for instance)\n\t\touterBoxSizes = {top: topPadding, left: leftPadding, bottom: bottomPadding, right: rightPadding};\n\t\taddSizeByPosition(outerBoxes, outerBoxSizes);\n\n\t\t// We may be adding some padding to account for rotated x axis labels\n\t\tvar leftPaddingAddition = Math.max(maxPadding.left - outerBoxSizes.left, 0);\n\t\touterBoxSizes.left += leftPaddingAddition;\n\t\touterBoxSizes.right += Math.max(maxPadding.right - outerBoxSizes.right, 0);\n\n\t\tvar topPaddingAddition = Math.max(maxPadding.top - outerBoxSizes.top, 0);\n\t\touterBoxSizes.top += topPaddingAddition;\n\t\touterBoxSizes.bottom += Math.max(maxPadding.bottom - outerBoxSizes.bottom, 0);\n\n\t\t// Figure out if our chart area changed. This would occur if the dataset layout label rotation\n\t\t// changed due to the application of the margins in step 6. Since we can only get bigger, this is safe to do\n\t\t// without calling `fit` again\n\t\tvar newMaxChartAreaHeight = height - outerBoxSizes.top - outerBoxSizes.bottom;\n\t\tvar newMaxChartAreaWidth = width - outerBoxSizes.left - outerBoxSizes.right;\n\n\t\tif (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {\n\t\t\thelpers$1.each(verticalBoxes, function(box) {\n\t\t\t\tbox.height = newMaxChartAreaHeight;\n\t\t\t});\n\n\t\t\thelpers$1.each(horizontalBoxes, function(box) {\n\t\t\t\tif (!box.fullWidth) {\n\t\t\t\t\tbox.width = newMaxChartAreaWidth;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tmaxChartAreaHeight = newMaxChartAreaHeight;\n\t\t\tmaxChartAreaWidth = newMaxChartAreaWidth;\n\t\t}\n\n\t\t// Step 7 - Position the boxes\n\t\tvar left = leftPadding + leftPaddingAddition;\n\t\tvar top = topPadding + topPaddingAddition;\n\n\t\tfunction placeBox(box) {\n\t\t\tif (box.isHorizontal()) {\n\t\t\t\tbox.left = box.fullWidth ? leftPadding : outerBoxSizes.left;\n\t\t\t\tbox.right = box.fullWidth ? width - rightPadding : outerBoxSizes.left + maxChartAreaWidth;\n\t\t\t\tbox.top = top;\n\t\t\t\tbox.bottom = top + box.height;\n\n\t\t\t\t// Move to next point\n\t\t\t\ttop = box.bottom;\n\n\t\t\t} else {\n\n\t\t\t\tbox.left = left;\n\t\t\t\tbox.right = left + box.width;\n\t\t\t\tbox.top = outerBoxSizes.top;\n\t\t\t\tbox.bottom = outerBoxSizes.top + maxChartAreaHeight;\n\n\t\t\t\t// Move to next point\n\t\t\t\tleft = box.right;\n\t\t\t}\n\t\t}\n\n\t\thelpers$1.each(leftBoxes.concat(topBoxes), placeBox);\n\n\t\t// Account for chart width and height\n\t\tleft += maxChartAreaWidth;\n\t\ttop += maxChartAreaHeight;\n\n\t\thelpers$1.each(rightBoxes, placeBox);\n\t\thelpers$1.each(bottomBoxes, placeBox);\n\n\t\t// Step 8\n\t\tchart.chartArea = {\n\t\t\tleft: outerBoxSizes.left,\n\t\t\ttop: outerBoxSizes.top,\n\t\t\tright: outerBoxSizes.left + maxChartAreaWidth,\n\t\t\tbottom: outerBoxSizes.top + maxChartAreaHeight\n\t\t};\n\n\t\t// Step 9\n\t\thelpers$1.each(chartAreaBoxes, function(box) {\n\t\t\tbox.left = chart.chartArea.left;\n\t\t\tbox.top = chart.chartArea.top;\n\t\t\tbox.right = chart.chartArea.right;\n\t\t\tbox.bottom = chart.chartArea.bottom;\n\n\t\t\tbox.update(maxChartAreaWidth, maxChartAreaHeight);\n\t\t});\n\t}\n};\n\n/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nvar platform_basic = {\n\tacquireContext: function(item) {\n\t\tif (item && item.canvas) {\n\t\t\t// Support for any object associated to a canvas (including a context2d)\n\t\t\titem = item.canvas;\n\t\t}\n\n\t\treturn item && item.getContext('2d') || null;\n\t}\n};\n\nvar platform_dom = \"/*\\n * DOM element rendering detection\\n * https://davidwalsh.name/detect-node-insertion\\n */\\n@keyframes chartjs-render-animation {\\n\\tfrom { opacity: 0.99; }\\n\\tto { opacity: 1; }\\n}\\n\\n.chartjs-render-monitor {\\n\\tanimation: chartjs-render-animation 0.001s;\\n}\\n\\n/*\\n * DOM element resizing detection\\n * https://github.com/marcj/css-element-queries\\n */\\n.chartjs-size-monitor,\\n.chartjs-size-monitor-expand,\\n.chartjs-size-monitor-shrink {\\n\\tposition: absolute;\\n\\tdirection: ltr;\\n\\tleft: 0;\\n\\ttop: 0;\\n\\tright: 0;\\n\\tbottom: 0;\\n\\toverflow: hidden;\\n\\tpointer-events: none;\\n\\tvisibility: hidden;\\n\\tz-index: -1;\\n}\\n\\n.chartjs-size-monitor-expand > div {\\n\\tposition: absolute;\\n\\twidth: 1000000px;\\n\\theight: 1000000px;\\n\\tleft: 0;\\n\\ttop: 0;\\n}\\n\\n.chartjs-size-monitor-shrink > div {\\n\\tposition: absolute;\\n\\twidth: 200%;\\n\\theight: 200%;\\n\\tleft: 0;\\n\\ttop: 0;\\n}\\n\";\n\nvar platform_dom$1 = /*#__PURE__*/Object.freeze({\ndefault: platform_dom\n});\n\nfunction getCjsExportFromNamespace (n) {\n\treturn n && n.default || n;\n}\n\nvar stylesheet = getCjsExportFromNamespace(platform_dom$1);\n\nvar EXPANDO_KEY = '$chartjs';\nvar CSS_PREFIX = 'chartjs-';\nvar CSS_SIZE_MONITOR = CSS_PREFIX + 'size-monitor';\nvar CSS_RENDER_MONITOR = CSS_PREFIX + 'render-monitor';\nvar CSS_RENDER_ANIMATION = CSS_PREFIX + 'render-animation';\nvar ANIMATION_START_EVENTS = ['animationstart', 'webkitAnimationStart'];\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nvar EVENT_TYPES = {\n\ttouchstart: 'mousedown',\n\ttouchmove: 'mousemove',\n\ttouchend: 'mouseup',\n\tpointerenter: 'mouseenter',\n\tpointerdown: 'mousedown',\n\tpointermove: 'mousemove',\n\tpointerup: 'mouseup',\n\tpointerleave: 'mouseout',\n\tpointerout: 'mouseout'\n};\n\n/**\n * The \"used\" size is the final value of a dimension property after all calculations have\n * been performed. This method uses the computed style of `element` but returns undefined\n * if the computed style is not expressed in pixels. That can happen in some cases where\n * `element` has a size relative to its parent and this last one is not yet displayed,\n * for example because of `display: none` on a parent node.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n * @returns {number} Size in pixels or undefined if unknown.\n */\nfunction readUsedSize(element, property) {\n\tvar value = helpers$1.getStyle(element, property);\n\tvar matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n\treturn matches ? Number(matches[1]) : undefined;\n}\n\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n */\nfunction initCanvas(canvas, config) {\n\tvar style = canvas.style;\n\n\t// NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n\t// returns null or '' if no explicit value has been set to the canvas attribute.\n\tvar renderHeight = canvas.getAttribute('height');\n\tvar renderWidth = canvas.getAttribute('width');\n\n\t// Chart.js modifies some canvas values that we want to restore on destroy\n\tcanvas[EXPANDO_KEY] = {\n\t\tinitial: {\n\t\t\theight: renderHeight,\n\t\t\twidth: renderWidth,\n\t\t\tstyle: {\n\t\t\t\tdisplay: style.display,\n\t\t\t\theight: style.height,\n\t\t\t\twidth: style.width\n\t\t\t}\n\t\t}\n\t};\n\n\t// Force canvas to display as block to avoid extra space caused by inline\n\t// elements, which would interfere with the responsive resize process.\n\t// https://github.com/chartjs/Chart.js/issues/2538\n\tstyle.display = style.display || 'block';\n\n\tif (renderWidth === null || renderWidth === '') {\n\t\tvar displayWidth = readUsedSize(canvas, 'width');\n\t\tif (displayWidth !== undefined) {\n\t\t\tcanvas.width = displayWidth;\n\t\t}\n\t}\n\n\tif (renderHeight === null || renderHeight === '') {\n\t\tif (canvas.style.height === '') {\n\t\t\t// If no explicit render height and style height, let's apply the aspect ratio,\n\t\t\t// which one can be specified by the user but also by charts as default option\n\t\t\t// (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n\t\t\tcanvas.height = canvas.width / (config.options.aspectRatio || 2);\n\t\t} else {\n\t\t\tvar displayHeight = readUsedSize(canvas, 'height');\n\t\t\tif (displayWidth !== undefined) {\n\t\t\t\tcanvas.height = displayHeight;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn canvas;\n}\n\n/**\n * Detects support for options object argument in addEventListener.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n * @private\n */\nvar supportsEventListenerOptions = (function() {\n\tvar supports = false;\n\ttry {\n\t\tvar options = Object.defineProperty({}, 'passive', {\n\t\t\t// eslint-disable-next-line getter-return\n\t\t\tget: function() {\n\t\t\t\tsupports = true;\n\t\t\t}\n\t\t});\n\t\twindow.addEventListener('e', null, options);\n\t} catch (e) {\n\t\t// continue regardless of error\n\t}\n\treturn supports;\n}());\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nvar eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n\tnode.addEventListener(type, listener, eventListenerOptions);\n}\n\nfunction removeListener(node, type, listener) {\n\tnode.removeEventListener(type, listener, eventListenerOptions);\n}\n\nfunction createEvent(type, chart, x, y, nativeEvent) {\n\treturn {\n\t\ttype: type,\n\t\tchart: chart,\n\t\tnative: nativeEvent || null,\n\t\tx: x !== undefined ? x : null,\n\t\ty: y !== undefined ? y : null,\n\t};\n}\n\nfunction fromNativeEvent(event, chart) {\n\tvar type = EVENT_TYPES[event.type] || event.type;\n\tvar pos = helpers$1.getRelativePosition(event, chart);\n\treturn createEvent(type, chart, pos.x, pos.y, event);\n}\n\nfunction throttled(fn, thisArg) {\n\tvar ticking = false;\n\tvar args = [];\n\n\treturn function() {\n\t\targs = Array.prototype.slice.call(arguments);\n\t\tthisArg = thisArg || this;\n\n\t\tif (!ticking) {\n\t\t\tticking = true;\n\t\t\thelpers$1.requestAnimFrame.call(window, function() {\n\t\t\t\tticking = false;\n\t\t\t\tfn.apply(thisArg, args);\n\t\t\t});\n\t\t}\n\t};\n}\n\nfunction createDiv(cls) {\n\tvar el = document.createElement('div');\n\tel.className = cls || '';\n\treturn el;\n}\n\n// Implementation based on https://github.com/marcj/css-element-queries\nfunction createResizer(handler) {\n\tvar maxSize = 1000000;\n\n\t// NOTE(SB) Don't use innerHTML because it could be considered unsafe.\n\t// https://github.com/chartjs/Chart.js/issues/5902\n\tvar resizer = createDiv(CSS_SIZE_MONITOR);\n\tvar expand = createDiv(CSS_SIZE_MONITOR + '-expand');\n\tvar shrink = createDiv(CSS_SIZE_MONITOR + '-shrink');\n\n\texpand.appendChild(createDiv());\n\tshrink.appendChild(createDiv());\n\n\tresizer.appendChild(expand);\n\tresizer.appendChild(shrink);\n\tresizer._reset = function() {\n\t\texpand.scrollLeft = maxSize;\n\t\texpand.scrollTop = maxSize;\n\t\tshrink.scrollLeft = maxSize;\n\t\tshrink.scrollTop = maxSize;\n\t};\n\n\tvar onScroll = function() {\n\t\tresizer._reset();\n\t\thandler();\n\t};\n\n\taddListener(expand, 'scroll', onScroll.bind(expand, 'expand'));\n\taddListener(shrink, 'scroll', onScroll.bind(shrink, 'shrink'));\n\n\treturn resizer;\n}\n\n// https://davidwalsh.name/detect-node-insertion\nfunction watchForRender(node, handler) {\n\tvar expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});\n\tvar proxy = expando.renderProxy = function(e) {\n\t\tif (e.animationName === CSS_RENDER_ANIMATION) {\n\t\t\thandler();\n\t\t}\n\t};\n\n\thelpers$1.each(ANIMATION_START_EVENTS, function(type) {\n\t\taddListener(node, type, proxy);\n\t});\n\n\t// #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class\n\t// is removed then added back immediately (same animation frame?). Accessing the\n\t// `offsetParent` property will force a reflow and re-evaluate the CSS animation.\n\t// https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics\n\t// https://github.com/chartjs/Chart.js/issues/4737\n\texpando.reflow = !!node.offsetParent;\n\n\tnode.classList.add(CSS_RENDER_MONITOR);\n}\n\nfunction unwatchForRender(node) {\n\tvar expando = node[EXPANDO_KEY] || {};\n\tvar proxy = expando.renderProxy;\n\n\tif (proxy) {\n\t\thelpers$1.each(ANIMATION_START_EVENTS, function(type) {\n\t\t\tremoveListener(node, type, proxy);\n\t\t});\n\n\t\tdelete expando.renderProxy;\n\t}\n\n\tnode.classList.remove(CSS_RENDER_MONITOR);\n}\n\nfunction addResizeListener(node, listener, chart) {\n\tvar expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});\n\n\t// Let's keep track of this added resizer and thus avoid DOM query when removing it.\n\tvar resizer = expando.resizer = createResizer(throttled(function() {\n\t\tif (expando.resizer) {\n\t\t\tvar container = chart.options.maintainAspectRatio && node.parentNode;\n\t\t\tvar w = container ? container.clientWidth : 0;\n\t\t\tlistener(createEvent('resize', chart));\n\t\t\tif (container && container.clientWidth < w && chart.canvas) {\n\t\t\t\t// If the container size shrank during chart resize, let's assume\n\t\t\t\t// scrollbar appeared. So we resize again with the scrollbar visible -\n\t\t\t\t// effectively making chart smaller and the scrollbar hidden again.\n\t\t\t\t// Because we are inside `throttled`, and currently `ticking`, scroll\n\t\t\t\t// events are ignored during this whole 2 resize process.\n\t\t\t\t// If we assumed wrong and something else happened, we are resizing\n\t\t\t\t// twice in a frame (potential performance issue)\n\t\t\t\tlistener(createEvent('resize', chart));\n\t\t\t}\n\t\t}\n\t}));\n\n\t// The resizer needs to be attached to the node parent, so we first need to be\n\t// sure that `node` is attached to the DOM before injecting the resizer element.\n\twatchForRender(node, function() {\n\t\tif (expando.resizer) {\n\t\t\tvar container = node.parentNode;\n\t\t\tif (container && container !== resizer.parentNode) {\n\t\t\t\tcontainer.insertBefore(resizer, container.firstChild);\n\t\t\t}\n\n\t\t\t// The container size might have changed, let's reset the resizer state.\n\t\t\tresizer._reset();\n\t\t}\n\t});\n}\n\nfunction removeResizeListener(node) {\n\tvar expando = node[EXPANDO_KEY] || {};\n\tvar resizer = expando.resizer;\n\n\tdelete expando.resizer;\n\tunwatchForRender(node);\n\n\tif (resizer && resizer.parentNode) {\n\t\tresizer.parentNode.removeChild(resizer);\n\t}\n}\n\nfunction injectCSS(platform, css) {\n\t// https://stackoverflow.com/q/3922139\n\tvar style = platform._style || document.createElement('style');\n\tif (!platform._style) {\n\t\tplatform._style = style;\n\t\tcss = '/* Chart.js */\\n' + css;\n\t\tstyle.setAttribute('type', 'text/css');\n\t\tdocument.getElementsByTagName('head')[0].appendChild(style);\n\t}\n\n\tstyle.appendChild(document.createTextNode(css));\n}\n\nvar platform_dom$2 = {\n\t/**\n\t * When `true`, prevents the automatic injection of the stylesheet required to\n\t * correctly detect when the chart is added to the DOM and then resized. This\n\t * switch has been added to allow external stylesheet (`dist/Chart(.min)?.js`)\n\t * to be manually imported to make this library compatible with any CSP.\n\t * See https://github.com/chartjs/Chart.js/issues/5208\n\t */\n\tdisableCSSInjection: false,\n\n\t/**\n\t * This property holds whether this platform is enabled for the current environment.\n\t * Currently used by platform.js to select the proper implementation.\n\t * @private\n\t */\n\t_enabled: typeof window !== 'undefined' && typeof document !== 'undefined',\n\n\t/**\n\t * @private\n\t */\n\t_ensureLoaded: function() {\n\t\tif (this._loaded) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._loaded = true;\n\n\t\t// https://github.com/chartjs/Chart.js/issues/5208\n\t\tif (!this.disableCSSInjection) {\n\t\t\tinjectCSS(this, stylesheet);\n\t\t}\n\t},\n\n\tacquireContext: function(item, config) {\n\t\tif (typeof item === 'string') {\n\t\t\titem = document.getElementById(item);\n\t\t} else if (item.length) {\n\t\t\t// Support for array based queries (such as jQuery)\n\t\t\titem = item[0];\n\t\t}\n\n\t\tif (item && item.canvas) {\n\t\t\t// Support for any object associated to a canvas (including a context2d)\n\t\t\titem = item.canvas;\n\t\t}\n\n\t\t// To prevent canvas fingerprinting, some add-ons undefine the getContext\n\t\t// method, for example: https://github.com/kkapsner/CanvasBlocker\n\t\t// https://github.com/chartjs/Chart.js/issues/2807\n\t\tvar context = item && item.getContext && item.getContext('2d');\n\n\t\t// Load platform resources on first chart creation, to make possible to change\n\t\t// platform options after importing the library (e.g. `disableCSSInjection`).\n\t\tthis._ensureLoaded();\n\n\t\t// `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is\n\t\t// inside an iframe or when running in a protected environment. We could guess the\n\t\t// types from their toString() value but let's keep things flexible and assume it's\n\t\t// a sufficient condition if the item has a context2D which has item as `canvas`.\n\t\t// https://github.com/chartjs/Chart.js/issues/3887\n\t\t// https://github.com/chartjs/Chart.js/issues/4102\n\t\t// https://github.com/chartjs/Chart.js/issues/4152\n\t\tif (context && context.canvas === item) {\n\t\t\tinitCanvas(item, config);\n\t\t\treturn context;\n\t\t}\n\n\t\treturn null;\n\t},\n\n\treleaseContext: function(context) {\n\t\tvar canvas = context.canvas;\n\t\tif (!canvas[EXPANDO_KEY]) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar initial = canvas[EXPANDO_KEY].initial;\n\t\t['height', 'width'].forEach(function(prop) {\n\t\t\tvar value = initial[prop];\n\t\t\tif (helpers$1.isNullOrUndef(value)) {\n\t\t\t\tcanvas.removeAttribute(prop);\n\t\t\t} else {\n\t\t\t\tcanvas.setAttribute(prop, value);\n\t\t\t}\n\t\t});\n\n\t\thelpers$1.each(initial.style || {}, function(value, key) {\n\t\t\tcanvas.style[key] = value;\n\t\t});\n\n\t\t// The canvas render size might have been changed (and thus the state stack discarded),\n\t\t// we can't use save() and restore() to restore the initial state. So make sure that at\n\t\t// least the canvas context is reset to the default state by setting the canvas width.\n\t\t// https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n\t\t// eslint-disable-next-line no-self-assign\n\t\tcanvas.width = canvas.width;\n\n\t\tdelete canvas[EXPANDO_KEY];\n\t},\n\n\taddEventListener: function(chart, type, listener) {\n\t\tvar canvas = chart.canvas;\n\t\tif (type === 'resize') {\n\t\t\t// Note: the resize event is not supported on all browsers.\n\t\t\taddResizeListener(canvas, listener, chart);\n\t\t\treturn;\n\t\t}\n\n\t\tvar expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});\n\t\tvar proxies = expando.proxies || (expando.proxies = {});\n\t\tvar proxy = proxies[chart.id + '_' + type] = function(event) {\n\t\t\tlistener(fromNativeEvent(event, chart));\n\t\t};\n\n\t\taddListener(canvas, type, proxy);\n\t},\n\n\tremoveEventListener: function(chart, type, listener) {\n\t\tvar canvas = chart.canvas;\n\t\tif (type === 'resize') {\n\t\t\t// Note: the resize event is not supported on all browsers.\n\t\t\tremoveResizeListener(canvas);\n\t\t\treturn;\n\t\t}\n\n\t\tvar expando = listener[EXPANDO_KEY] || {};\n\t\tvar proxies = expando.proxies || {};\n\t\tvar proxy = proxies[chart.id + '_' + type];\n\t\tif (!proxy) {\n\t\t\treturn;\n\t\t}\n\n\t\tremoveListener(canvas, type, proxy);\n\t}\n};\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use EventTarget.addEventListener instead.\n * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+\n * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n * @function Chart.helpers.addEvent\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers$1.addEvent = addListener;\n\n/**\n * Provided for backward compatibility, use EventTarget.removeEventListener instead.\n * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+\n * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\n * @function Chart.helpers.removeEvent\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers$1.removeEvent = removeListener;\n\n// @TODO Make possible to select another platform at build time.\nvar implementation = platform_dom$2._enabled ? platform_dom$2 : platform_basic;\n\n/**\n * @namespace Chart.platform\n * @see https://chartjs.gitbooks.io/proposals/content/Platform.html\n * @since 2.4.0\n */\nvar platform = helpers$1.extend({\n\t/**\n\t * @since 2.7.0\n\t */\n\tinitialize: function() {},\n\n\t/**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {*} item - The native item from which to acquire context (platform specific)\n\t * @param {object} options - The chart options\n\t * @returns {CanvasRenderingContext2D} context2d instance\n\t */\n\tacquireContext: function() {},\n\n\t/**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n\treleaseContext: function() {},\n\n\t/**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link IEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link IEvent} interface) when an event of the specified type occurs.\n\t */\n\taddEventListener: function() {},\n\n\t/**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link IEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n\tremoveEventListener: function() {}\n\n}, implementation);\n\ncore_defaults._set('global', {\n\tplugins: {}\n});\n\n/**\n * The plugin service singleton\n * @namespace Chart.plugins\n * @since 2.1.0\n */\nvar core_plugins = {\n\t/**\n\t * Globally registered plugins.\n\t * @private\n\t */\n\t_plugins: [],\n\n\t/**\n\t * This identifier is used to invalidate the descriptors cache attached to each chart\n\t * when a global plugin is registered or unregistered. In this case, the cache ID is\n\t * incremented and descriptors are regenerated during following API calls.\n\t * @private\n\t */\n\t_cacheId: 0,\n\n\t/**\n\t * Registers the given plugin(s) if not already registered.\n\t * @param {IPlugin[]|IPlugin} plugins plugin instance(s).\n\t */\n\tregister: function(plugins) {\n\t\tvar p = this._plugins;\n\t\t([]).concat(plugins).forEach(function(plugin) {\n\t\t\tif (p.indexOf(plugin) === -1) {\n\t\t\t\tp.push(plugin);\n\t\t\t}\n\t\t});\n\n\t\tthis._cacheId++;\n\t},\n\n\t/**\n\t * Unregisters the given plugin(s) only if registered.\n\t * @param {IPlugin[]|IPlugin} plugins plugin instance(s).\n\t */\n\tunregister: function(plugins) {\n\t\tvar p = this._plugins;\n\t\t([]).concat(plugins).forEach(function(plugin) {\n\t\t\tvar idx = p.indexOf(plugin);\n\t\t\tif (idx !== -1) {\n\t\t\t\tp.splice(idx, 1);\n\t\t\t}\n\t\t});\n\n\t\tthis._cacheId++;\n\t},\n\n\t/**\n\t * Remove all registered plugins.\n\t * @since 2.1.5\n\t */\n\tclear: function() {\n\t\tthis._plugins = [];\n\t\tthis._cacheId++;\n\t},\n\n\t/**\n\t * Returns the number of registered plugins?\n\t * @returns {number}\n\t * @since 2.1.5\n\t */\n\tcount: function() {\n\t\treturn this._plugins.length;\n\t},\n\n\t/**\n\t * Returns all registered plugin instances.\n\t * @returns {IPlugin[]} array of plugin objects.\n\t * @since 2.1.5\n\t */\n\tgetAll: function() {\n\t\treturn this._plugins;\n\t},\n\n\t/**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Array} [args] - Extra arguments to apply to the hook call.\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n\tnotify: function(chart, hook, args) {\n\t\tvar descriptors = this.descriptors(chart);\n\t\tvar ilen = descriptors.length;\n\t\tvar i, descriptor, plugin, params, method;\n\n\t\tfor (i = 0; i < ilen; ++i) {\n\t\t\tdescriptor = descriptors[i];\n\t\t\tplugin = descriptor.plugin;\n\t\t\tmethod = plugin[hook];\n\t\t\tif (typeof method === 'function') {\n\t\t\t\tparams = [chart].concat(args || []);\n\t\t\t\tparams.push(descriptor.options);\n\t\t\t\tif (method.apply(plugin, params) === false) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * Returns descriptors of enabled plugins for the given chart.\n\t * @returns {object[]} [{ plugin, options }]\n\t * @private\n\t */\n\tdescriptors: function(chart) {\n\t\tvar cache = chart.$plugins || (chart.$plugins = {});\n\t\tif (cache.id === this._cacheId) {\n\t\t\treturn cache.descriptors;\n\t\t}\n\n\t\tvar plugins = [];\n\t\tvar descriptors = [];\n\t\tvar config = (chart && chart.config) || {};\n\t\tvar options = (config.options && config.options.plugins) || {};\n\n\t\tthis._plugins.concat(config.plugins || []).forEach(function(plugin) {\n\t\t\tvar idx = plugins.indexOf(plugin);\n\t\t\tif (idx !== -1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar id = plugin.id;\n\t\t\tvar opts = options[id];\n\t\t\tif (opts === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (opts === true) {\n\t\t\t\topts = helpers$1.clone(core_defaults.global.plugins[id]);\n\t\t\t}\n\n\t\t\tplugins.push(plugin);\n\t\t\tdescriptors.push({\n\t\t\t\tplugin: plugin,\n\t\t\t\toptions: opts || {}\n\t\t\t});\n\t\t});\n\n\t\tcache.descriptors = descriptors;\n\t\tcache.id = this._cacheId;\n\t\treturn descriptors;\n\t},\n\n\t/**\n\t * Invalidates cache for the given chart: descriptors hold a reference on plugin option,\n\t * but in some cases, this reference can be changed by the user when updating options.\n\t * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n\t * @private\n\t */\n\t_invalidate: function(chart) {\n\t\tdelete chart.$plugins;\n\t}\n};\n\nvar core_scaleService = {\n\t// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then\n\t// use the new chart options to grab the correct scale\n\tconstructors: {},\n\t// Use a registration function so that we can move to an ES6 map when we no longer need to support\n\t// old browsers\n\n\t// Scale config defaults\n\tdefaults: {},\n\tregisterScaleType: function(type, scaleConstructor, scaleDefaults) {\n\t\tthis.constructors[type] = scaleConstructor;\n\t\tthis.defaults[type] = helpers$1.clone(scaleDefaults);\n\t},\n\tgetScaleConstructor: function(type) {\n\t\treturn this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;\n\t},\n\tgetScaleDefaults: function(type) {\n\t\t// Return the scale defaults merged with the global settings so that we always use the latest ones\n\t\treturn this.defaults.hasOwnProperty(type) ? helpers$1.merge({}, [core_defaults.scale, this.defaults[type]]) : {};\n\t},\n\tupdateScaleDefaults: function(type, additions) {\n\t\tvar me = this;\n\t\tif (me.defaults.hasOwnProperty(type)) {\n\t\t\tme.defaults[type] = helpers$1.extend(me.defaults[type], additions);\n\t\t}\n\t},\n\taddScalesToLayout: function(chart) {\n\t\t// Adds each scale to the chart.boxes array to be sized accordingly\n\t\thelpers$1.each(chart.scales, function(scale) {\n\t\t\t// Set ILayoutItem parameters for backwards compatibility\n\t\t\tscale.fullWidth = scale.options.fullWidth;\n\t\t\tscale.position = scale.options.position;\n\t\t\tscale.weight = scale.options.weight;\n\t\t\tcore_layouts.addBox(chart, scale);\n\t\t});\n\t}\n};\n\nvar valueOrDefault$7 = helpers$1.valueOrDefault;\n\ncore_defaults._set('global', {\n\ttooltips: {\n\t\tenabled: true,\n\t\tcustom: null,\n\t\tmode: 'nearest',\n\t\tposition: 'average',\n\t\tintersect: true,\n\t\tbackgroundColor: 'rgba(0,0,0,0.8)',\n\t\ttitleFontStyle: 'bold',\n\t\ttitleSpacing: 2,\n\t\ttitleMarginBottom: 6,\n\t\ttitleFontColor: '#fff',\n\t\ttitleAlign: 'left',\n\t\tbodySpacing: 2,\n\t\tbodyFontColor: '#fff',\n\t\tbodyAlign: 'left',\n\t\tfooterFontStyle: 'bold',\n\t\tfooterSpacing: 2,\n\t\tfooterMarginTop: 6,\n\t\tfooterFontColor: '#fff',\n\t\tfooterAlign: 'left',\n\t\tyPadding: 6,\n\t\txPadding: 6,\n\t\tcaretPadding: 2,\n\t\tcaretSize: 5,\n\t\tcornerRadius: 6,\n\t\tmultiKeyBackground: '#fff',\n\t\tdisplayColors: true,\n\t\tborderColor: 'rgba(0,0,0,0)',\n\t\tborderWidth: 0,\n\t\tcallbacks: {\n\t\t\t// Args are: (tooltipItems, data)\n\t\t\tbeforeTitle: helpers$1.noop,\n\t\t\ttitle: function(tooltipItems, data) {\n\t\t\t\tvar title = '';\n\t\t\t\tvar labels = data.labels;\n\t\t\t\tvar labelCount = labels ? labels.length : 0;\n\n\t\t\t\tif (tooltipItems.length > 0) {\n\t\t\t\t\tvar item = tooltipItems[0];\n\t\t\t\t\tif (item.label) {\n\t\t\t\t\t\ttitle = item.label;\n\t\t\t\t\t} else if (item.xLabel) {\n\t\t\t\t\t\ttitle = item.xLabel;\n\t\t\t\t\t} else if (labelCount > 0 && item.index < labelCount) {\n\t\t\t\t\t\ttitle = labels[item.index];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn title;\n\t\t\t},\n\t\t\tafterTitle: helpers$1.noop,\n\n\t\t\t// Args are: (tooltipItems, data)\n\t\t\tbeforeBody: helpers$1.noop,\n\n\t\t\t// Args are: (tooltipItem, data)\n\t\t\tbeforeLabel: helpers$1.noop,\n\t\t\tlabel: function(tooltipItem, data) {\n\t\t\t\tvar label = data.datasets[tooltipItem.datasetIndex].label || '';\n\n\t\t\t\tif (label) {\n\t\t\t\t\tlabel += ': ';\n\t\t\t\t}\n\t\t\t\tif (!helpers$1.isNullOrUndef(tooltipItem.value)) {\n\t\t\t\t\tlabel += tooltipItem.value;\n\t\t\t\t} else {\n\t\t\t\t\tlabel += tooltipItem.yLabel;\n\t\t\t\t}\n\t\t\t\treturn label;\n\t\t\t},\n\t\t\tlabelColor: function(tooltipItem, chart) {\n\t\t\t\tvar meta = chart.getDatasetMeta(tooltipItem.datasetIndex);\n\t\t\t\tvar activeElement = meta.data[tooltipItem.index];\n\t\t\t\tvar view = activeElement._view;\n\t\t\t\treturn {\n\t\t\t\t\tborderColor: view.borderColor,\n\t\t\t\t\tbackgroundColor: view.backgroundColor\n\t\t\t\t};\n\t\t\t},\n\t\t\tlabelTextColor: function() {\n\t\t\t\treturn this._options.bodyFontColor;\n\t\t\t},\n\t\t\tafterLabel: helpers$1.noop,\n\n\t\t\t// Args are: (tooltipItems, data)\n\t\t\tafterBody: helpers$1.noop,\n\n\t\t\t// Args are: (tooltipItems, data)\n\t\t\tbeforeFooter: helpers$1.noop,\n\t\t\tfooter: helpers$1.noop,\n\t\t\tafterFooter: helpers$1.noop\n\t\t}\n\t}\n});\n\nvar positioners = {\n\t/**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t * @function Chart.Tooltip.positioners.average\n\t * @param elements {ChartElement[]} the elements being displayed in the tooltip\n\t * @returns {object} tooltip position\n\t */\n\taverage: function(elements) {\n\t\tif (!elements.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar i, len;\n\t\tvar x = 0;\n\t\tvar y = 0;\n\t\tvar count = 0;\n\n\t\tfor (i = 0, len = elements.length; i < len; ++i) {\n\t\t\tvar el = elements[i];\n\t\t\tif (el && el.hasValue()) {\n\t\t\t\tvar pos = el.tooltipPosition();\n\t\t\t\tx += pos.x;\n\t\t\t\ty += pos.y;\n\t\t\t\t++count;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tx: x / count,\n\t\t\ty: y / count\n\t\t};\n\t},\n\n\t/**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t * @function Chart.Tooltip.positioners.nearest\n\t * @param elements {Chart.Element[]} the tooltip elements\n\t * @param eventPosition {object} the position of the event in canvas coordinates\n\t * @returns {object} the tooltip position\n\t */\n\tnearest: function(elements, eventPosition) {\n\t\tvar x = eventPosition.x;\n\t\tvar y = eventPosition.y;\n\t\tvar minDistance = Number.POSITIVE_INFINITY;\n\t\tvar i, len, nearestElement;\n\n\t\tfor (i = 0, len = elements.length; i < len; ++i) {\n\t\t\tvar el = elements[i];\n\t\t\tif (el && el.hasValue()) {\n\t\t\t\tvar center = el.getCenterPoint();\n\t\t\t\tvar d = helpers$1.distanceBetweenPoints(eventPosition, center);\n\n\t\t\t\tif (d < minDistance) {\n\t\t\t\t\tminDistance = d;\n\t\t\t\t\tnearestElement = el;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (nearestElement) {\n\t\t\tvar tp = nearestElement.tooltipPosition();\n\t\t\tx = tp.x;\n\t\t\ty = tp.y;\n\t\t}\n\n\t\treturn {\n\t\t\tx: x,\n\t\t\ty: y\n\t\t};\n\t}\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n\tif (toPush) {\n\t\tif (helpers$1.isArray(toPush)) {\n\t\t\t// base = base.concat(toPush);\n\t\t\tArray.prototype.push.apply(base, toPush);\n\t\t} else {\n\t\t\tbase.push(toPush);\n\t\t}\n\t}\n\n\treturn base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {string} value - The value to split by newline.\n * @returns {string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n\tif ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n\t\treturn str.split('\\n');\n\t}\n\treturn str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param element - the chart element (point, arc, bar) to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(element) {\n\tvar xScale = element._xScale;\n\tvar yScale = element._yScale || element._scale; // handle radar || polarArea charts\n\tvar index = element._index;\n\tvar datasetIndex = element._datasetIndex;\n\tvar controller = element._chart.getDatasetMeta(datasetIndex).controller;\n\tvar indexScale = controller._getIndexScale();\n\tvar valueScale = controller._getValueScale();\n\n\treturn {\n\t\txLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',\n\t\tyLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',\n\t\tlabel: indexScale ? '' + indexScale.getLabelForIndex(index, datasetIndex) : '',\n\t\tvalue: valueScale ? '' + valueScale.getLabelForIndex(index, datasetIndex) : '',\n\t\tindex: index,\n\t\tdatasetIndex: datasetIndex,\n\t\tx: element._model.x,\n\t\ty: element._model.y\n\t};\n}\n\n/**\n * Helper to get the reset model for the tooltip\n * @param tooltipOpts {object} the tooltip options\n */\nfunction getBaseModel(tooltipOpts) {\n\tvar globalDefaults = core_defaults.global;\n\n\treturn {\n\t\t// Positioning\n\t\txPadding: tooltipOpts.xPadding,\n\t\tyPadding: tooltipOpts.yPadding,\n\t\txAlign: tooltipOpts.xAlign,\n\t\tyAlign: tooltipOpts.yAlign,\n\n\t\t// Body\n\t\tbodyFontColor: tooltipOpts.bodyFontColor,\n\t\t_bodyFontFamily: valueOrDefault$7(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),\n\t\t_bodyFontStyle: valueOrDefault$7(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),\n\t\t_bodyAlign: tooltipOpts.bodyAlign,\n\t\tbodyFontSize: valueOrDefault$7(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),\n\t\tbodySpacing: tooltipOpts.bodySpacing,\n\n\t\t// Title\n\t\ttitleFontColor: tooltipOpts.titleFontColor,\n\t\t_titleFontFamily: valueOrDefault$7(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),\n\t\t_titleFontStyle: valueOrDefault$7(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),\n\t\ttitleFontSize: valueOrDefault$7(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),\n\t\t_titleAlign: tooltipOpts.titleAlign,\n\t\ttitleSpacing: tooltipOpts.titleSpacing,\n\t\ttitleMarginBottom: tooltipOpts.titleMarginBottom,\n\n\t\t// Footer\n\t\tfooterFontColor: tooltipOpts.footerFontColor,\n\t\t_footerFontFamily: valueOrDefault$7(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),\n\t\t_footerFontStyle: valueOrDefault$7(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),\n\t\tfooterFontSize: valueOrDefault$7(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),\n\t\t_footerAlign: tooltipOpts.footerAlign,\n\t\tfooterSpacing: tooltipOpts.footerSpacing,\n\t\tfooterMarginTop: tooltipOpts.footerMarginTop,\n\n\t\t// Appearance\n\t\tcaretSize: tooltipOpts.caretSize,\n\t\tcornerRadius: tooltipOpts.cornerRadius,\n\t\tbackgroundColor: tooltipOpts.backgroundColor,\n\t\topacity: 0,\n\t\tlegendColorBackground: tooltipOpts.multiKeyBackground,\n\t\tdisplayColors: tooltipOpts.displayColors,\n\t\tborderColor: tooltipOpts.borderColor,\n\t\tborderWidth: tooltipOpts.borderWidth\n\t};\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, model) {\n\tvar ctx = tooltip._chart.ctx;\n\n\tvar height = model.yPadding * 2; // Tooltip Padding\n\tvar width = 0;\n\n\t// Count of all lines in the body\n\tvar body = model.body;\n\tvar combinedBodyLength = body.reduce(function(count, bodyItem) {\n\t\treturn count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;\n\t}, 0);\n\tcombinedBodyLength += model.beforeBody.length + model.afterBody.length;\n\n\tvar titleLineCount = model.title.length;\n\tvar footerLineCount = model.footer.length;\n\tvar titleFontSize = model.titleFontSize;\n\tvar bodyFontSize = model.bodyFontSize;\n\tvar footerFontSize = model.footerFontSize;\n\n\theight += titleLineCount * titleFontSize; // Title Lines\n\theight += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing\n\theight += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin\n\theight += combinedBodyLength * bodyFontSize; // Body Lines\n\theight += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing\n\theight += footerLineCount ? model.footerMarginTop : 0; // Footer Margin\n\theight += footerLineCount * (footerFontSize); // Footer Lines\n\theight += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing\n\n\t// Title width\n\tvar widthPadding = 0;\n\tvar maxLineWidth = function(line) {\n\t\twidth = Math.max(width, ctx.measureText(line).width + widthPadding);\n\t};\n\n\tctx.font = helpers$1.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);\n\thelpers$1.each(model.title, maxLineWidth);\n\n\t// Body width\n\tctx.font = helpers$1.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);\n\thelpers$1.each(model.beforeBody.concat(model.afterBody), maxLineWidth);\n\n\t// Body lines may include some extra width due to the color box\n\twidthPadding = model.displayColors ? (bodyFontSize + 2) : 0;\n\thelpers$1.each(body, function(bodyItem) {\n\t\thelpers$1.each(bodyItem.before, maxLineWidth);\n\t\thelpers$1.each(bodyItem.lines, maxLineWidth);\n\t\thelpers$1.each(bodyItem.after, maxLineWidth);\n\t});\n\n\t// Reset back to 0\n\twidthPadding = 0;\n\n\t// Footer width\n\tctx.font = helpers$1.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);\n\thelpers$1.each(model.footer, maxLineWidth);\n\n\t// Add padding\n\twidth += 2 * model.xPadding;\n\n\treturn {\n\t\twidth: width,\n\t\theight: height\n\t};\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(tooltip, size) {\n\tvar model = tooltip._model;\n\tvar chart = tooltip._chart;\n\tvar chartArea = tooltip._chart.chartArea;\n\tvar xAlign = 'center';\n\tvar yAlign = 'center';\n\n\tif (model.y < size.height) {\n\t\tyAlign = 'top';\n\t} else if (model.y > (chart.height - size.height)) {\n\t\tyAlign = 'bottom';\n\t}\n\n\tvar lf, rf; // functions to determine left, right alignment\n\tvar olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart\n\tvar yf; // function to get the y alignment if the tooltip goes outside of the left or right edges\n\tvar midX = (chartArea.left + chartArea.right) / 2;\n\tvar midY = (chartArea.top + chartArea.bottom) / 2;\n\n\tif (yAlign === 'center') {\n\t\tlf = function(x) {\n\t\t\treturn x <= midX;\n\t\t};\n\t\trf = function(x) {\n\t\t\treturn x > midX;\n\t\t};\n\t} else {\n\t\tlf = function(x) {\n\t\t\treturn x <= (size.width / 2);\n\t\t};\n\t\trf = function(x) {\n\t\t\treturn x >= (chart.width - (size.width / 2));\n\t\t};\n\t}\n\n\tolf = function(x) {\n\t\treturn x + size.width + model.caretSize + model.caretPadding > chart.width;\n\t};\n\torf = function(x) {\n\t\treturn x - size.width - model.caretSize - model.caretPadding < 0;\n\t};\n\tyf = function(y) {\n\t\treturn y <= midY ? 'top' : 'bottom';\n\t};\n\n\tif (lf(model.x)) {\n\t\txAlign = 'left';\n\n\t\t// Is tooltip too wide and goes over the right side of the chart.?\n\t\tif (olf(model.x)) {\n\t\t\txAlign = 'center';\n\t\t\tyAlign = yf(model.y);\n\t\t}\n\t} else if (rf(model.x)) {\n\t\txAlign = 'right';\n\n\t\t// Is tooltip too wide and goes outside left edge of canvas?\n\t\tif (orf(model.x)) {\n\t\t\txAlign = 'center';\n\t\t\tyAlign = yf(model.y);\n\t\t}\n\t}\n\n\tvar opts = tooltip._options;\n\treturn {\n\t\txAlign: opts.xAlign ? opts.xAlign : xAlign,\n\t\tyAlign: opts.yAlign ? opts.yAlign : yAlign\n\t};\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(vm, size, alignment, chart) {\n\t// Background Position\n\tvar x = vm.x;\n\tvar y = vm.y;\n\n\tvar caretSize = vm.caretSize;\n\tvar caretPadding = vm.caretPadding;\n\tvar cornerRadius = vm.cornerRadius;\n\tvar xAlign = alignment.xAlign;\n\tvar yAlign = alignment.yAlign;\n\tvar paddingAndSize = caretSize + caretPadding;\n\tvar radiusAndPadding = cornerRadius + caretPadding;\n\n\tif (xAlign === 'right') {\n\t\tx -= size.width;\n\t} else if (xAlign === 'center') {\n\t\tx -= (size.width / 2);\n\t\tif (x + size.width > chart.width) {\n\t\t\tx = chart.width - size.width;\n\t\t}\n\t\tif (x < 0) {\n\t\t\tx = 0;\n\t\t}\n\t}\n\n\tif (yAlign === 'top') {\n\t\ty += paddingAndSize;\n\t} else if (yAlign === 'bottom') {\n\t\ty -= size.height + paddingAndSize;\n\t} else {\n\t\ty -= (size.height / 2);\n\t}\n\n\tif (yAlign === 'center') {\n\t\tif (xAlign === 'left') {\n\t\t\tx += paddingAndSize;\n\t\t} else if (xAlign === 'right') {\n\t\t\tx -= paddingAndSize;\n\t\t}\n\t} else if (xAlign === 'left') {\n\t\tx -= radiusAndPadding;\n\t} else if (xAlign === 'right') {\n\t\tx += radiusAndPadding;\n\t}\n\n\treturn {\n\t\tx: x,\n\t\ty: y\n\t};\n}\n\nfunction getAlignedX(vm, align) {\n\treturn align === 'center'\n\t\t? vm.x + vm.width / 2\n\t\t: align === 'right'\n\t\t\t? vm.x + vm.width - vm.xPadding\n\t\t\t: vm.x + vm.xPadding;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n\treturn pushOrConcat([], splitNewlines(callback));\n}\n\nvar exports$3 = core_element.extend({\n\tinitialize: function() {\n\t\tthis._model = getBaseModel(this._options);\n\t\tthis._lastActive = [];\n\t},\n\n\t// Get the title\n\t// Args are: (tooltipItem, data)\n\tgetTitle: function() {\n\t\tvar me = this;\n\t\tvar opts = me._options;\n\t\tvar callbacks = opts.callbacks;\n\n\t\tvar beforeTitle = callbacks.beforeTitle.apply(me, arguments);\n\t\tvar title = callbacks.title.apply(me, arguments);\n\t\tvar afterTitle = callbacks.afterTitle.apply(me, arguments);\n\n\t\tvar lines = [];\n\t\tlines = pushOrConcat(lines, splitNewlines(beforeTitle));\n\t\tlines = pushOrConcat(lines, splitNewlines(title));\n\t\tlines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n\t\treturn lines;\n\t},\n\n\t// Args are: (tooltipItem, data)\n\tgetBeforeBody: function() {\n\t\treturn getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));\n\t},\n\n\t// Args are: (tooltipItem, data)\n\tgetBody: function(tooltipItems, data) {\n\t\tvar me = this;\n\t\tvar callbacks = me._options.callbacks;\n\t\tvar bodyItems = [];\n\n\t\thelpers$1.each(tooltipItems, function(tooltipItem) {\n\t\t\tvar bodyItem = {\n\t\t\t\tbefore: [],\n\t\t\t\tlines: [],\n\t\t\t\tafter: []\n\t\t\t};\n\t\t\tpushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));\n\t\t\tpushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));\n\t\t\tpushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));\n\n\t\t\tbodyItems.push(bodyItem);\n\t\t});\n\n\t\treturn bodyItems;\n\t},\n\n\t// Args are: (tooltipItem, data)\n\tgetAfterBody: function() {\n\t\treturn getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));\n\t},\n\n\t// Get the footer and beforeFooter and afterFooter lines\n\t// Args are: (tooltipItem, data)\n\tgetFooter: function() {\n\t\tvar me = this;\n\t\tvar callbacks = me._options.callbacks;\n\n\t\tvar beforeFooter = callbacks.beforeFooter.apply(me, arguments);\n\t\tvar footer = callbacks.footer.apply(me, arguments);\n\t\tvar afterFooter = callbacks.afterFooter.apply(me, arguments);\n\n\t\tvar lines = [];\n\t\tlines = pushOrConcat(lines, splitNewlines(beforeFooter));\n\t\tlines = pushOrConcat(lines, splitNewlines(footer));\n\t\tlines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n\t\treturn lines;\n\t},\n\n\tupdate: function(changed) {\n\t\tvar me = this;\n\t\tvar opts = me._options;\n\n\t\t// Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition\n\t\t// that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time\n\t\t// which breaks any animations.\n\t\tvar existingModel = me._model;\n\t\tvar model = me._model = getBaseModel(opts);\n\t\tvar active = me._active;\n\n\t\tvar data = me._data;\n\n\t\t// In the case where active.length === 0 we need to keep these at existing values for good animations\n\t\tvar alignment = {\n\t\t\txAlign: existingModel.xAlign,\n\t\t\tyAlign: existingModel.yAlign\n\t\t};\n\t\tvar backgroundPoint = {\n\t\t\tx: existingModel.x,\n\t\t\ty: existingModel.y\n\t\t};\n\t\tvar tooltipSize = {\n\t\t\twidth: existingModel.width,\n\t\t\theight: existingModel.height\n\t\t};\n\t\tvar tooltipPosition = {\n\t\t\tx: existingModel.caretX,\n\t\t\ty: existingModel.caretY\n\t\t};\n\n\t\tvar i, len;\n\n\t\tif (active.length) {\n\t\t\tmodel.opacity = 1;\n\n\t\t\tvar labelColors = [];\n\t\t\tvar labelTextColors = [];\n\t\t\ttooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);\n\n\t\t\tvar tooltipItems = [];\n\t\t\tfor (i = 0, len = active.length; i < len; ++i) {\n\t\t\t\ttooltipItems.push(createTooltipItem(active[i]));\n\t\t\t}\n\n\t\t\t// If the user provided a filter function, use it to modify the tooltip items\n\t\t\tif (opts.filter) {\n\t\t\t\ttooltipItems = tooltipItems.filter(function(a) {\n\t\t\t\t\treturn opts.filter(a, data);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// If the user provided a sorting function, use it to modify the tooltip items\n\t\t\tif (opts.itemSort) {\n\t\t\t\ttooltipItems = tooltipItems.sort(function(a, b) {\n\t\t\t\t\treturn opts.itemSort(a, b, data);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Determine colors for boxes\n\t\t\thelpers$1.each(tooltipItems, function(tooltipItem) {\n\t\t\t\tlabelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));\n\t\t\t\tlabelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));\n\t\t\t});\n\n\n\t\t\t// Build the Text Lines\n\t\t\tmodel.title = me.getTitle(tooltipItems, data);\n\t\t\tmodel.beforeBody = me.getBeforeBody(tooltipItems, data);\n\t\t\tmodel.body = me.getBody(tooltipItems, data);\n\t\t\tmodel.afterBody = me.getAfterBody(tooltipItems, data);\n\t\t\tmodel.footer = me.getFooter(tooltipItems, data);\n\n\t\t\t// Initial positioning and colors\n\t\t\tmodel.x = tooltipPosition.x;\n\t\t\tmodel.y = tooltipPosition.y;\n\t\t\tmodel.caretPadding = opts.caretPadding;\n\t\t\tmodel.labelColors = labelColors;\n\t\t\tmodel.labelTextColors = labelTextColors;\n\n\t\t\t// data points\n\t\t\tmodel.dataPoints = tooltipItems;\n\n\t\t\t// We need to determine alignment of the tooltip\n\t\t\ttooltipSize = getTooltipSize(this, model);\n\t\t\talignment = determineAlignment(this, tooltipSize);\n\t\t\t// Final Size and Position\n\t\t\tbackgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);\n\t\t} else {\n\t\t\tmodel.opacity = 0;\n\t\t}\n\n\t\tmodel.xAlign = alignment.xAlign;\n\t\tmodel.yAlign = alignment.yAlign;\n\t\tmodel.x = backgroundPoint.x;\n\t\tmodel.y = backgroundPoint.y;\n\t\tmodel.width = tooltipSize.width;\n\t\tmodel.height = tooltipSize.height;\n\n\t\t// Point where the caret on the tooltip points to\n\t\tmodel.caretX = tooltipPosition.x;\n\t\tmodel.caretY = tooltipPosition.y;\n\n\t\tme._model = model;\n\n\t\tif (changed && opts.custom) {\n\t\t\topts.custom.call(me, model);\n\t\t}\n\n\t\treturn me;\n\t},\n\n\tdrawCaret: function(tooltipPoint, size) {\n\t\tvar ctx = this._chart.ctx;\n\t\tvar vm = this._view;\n\t\tvar caretPosition = this.getCaretPosition(tooltipPoint, size, vm);\n\n\t\tctx.lineTo(caretPosition.x1, caretPosition.y1);\n\t\tctx.lineTo(caretPosition.x2, caretPosition.y2);\n\t\tctx.lineTo(caretPosition.x3, caretPosition.y3);\n\t},\n\tgetCaretPosition: function(tooltipPoint, size, vm) {\n\t\tvar x1, x2, x3, y1, y2, y3;\n\t\tvar caretSize = vm.caretSize;\n\t\tvar cornerRadius = vm.cornerRadius;\n\t\tvar xAlign = vm.xAlign;\n\t\tvar yAlign = vm.yAlign;\n\t\tvar ptX = tooltipPoint.x;\n\t\tvar ptY = tooltipPoint.y;\n\t\tvar width = size.width;\n\t\tvar height = size.height;\n\n\t\tif (yAlign === 'center') {\n\t\t\ty2 = ptY + (height / 2);\n\n\t\t\tif (xAlign === 'left') {\n\t\t\t\tx1 = ptX;\n\t\t\t\tx2 = x1 - caretSize;\n\t\t\t\tx3 = x1;\n\n\t\t\t\ty1 = y2 + caretSize;\n\t\t\t\ty3 = y2 - caretSize;\n\t\t\t} else {\n\t\t\t\tx1 = ptX + width;\n\t\t\t\tx2 = x1 + caretSize;\n\t\t\t\tx3 = x1;\n\n\t\t\t\ty1 = y2 - caretSize;\n\t\t\t\ty3 = y2 + caretSize;\n\t\t\t}\n\t\t} else {\n\t\t\tif (xAlign === 'left') {\n\t\t\t\tx2 = ptX + cornerRadius + (caretSize);\n\t\t\t\tx1 = x2 - caretSize;\n\t\t\t\tx3 = x2 + caretSize;\n\t\t\t} else if (xAlign === 'right') {\n\t\t\t\tx2 = ptX + width - cornerRadius - caretSize;\n\t\t\t\tx1 = x2 - caretSize;\n\t\t\t\tx3 = x2 + caretSize;\n\t\t\t} else {\n\t\t\t\tx2 = vm.caretX;\n\t\t\t\tx1 = x2 - caretSize;\n\t\t\t\tx3 = x2 + caretSize;\n\t\t\t}\n\t\t\tif (yAlign === 'top') {\n\t\t\t\ty1 = ptY;\n\t\t\t\ty2 = y1 - caretSize;\n\t\t\t\ty3 = y1;\n\t\t\t} else {\n\t\t\t\ty1 = ptY + height;\n\t\t\t\ty2 = y1 + caretSize;\n\t\t\t\ty3 = y1;\n\t\t\t\t// invert drawing order\n\t\t\t\tvar tmp = x3;\n\t\t\t\tx3 = x1;\n\t\t\t\tx1 = tmp;\n\t\t\t}\n\t\t}\n\t\treturn {x1: x1, x2: x2, x3: x3, y1: y1, y2: y2, y3: y3};\n\t},\n\n\tdrawTitle: function(pt, vm, ctx) {\n\t\tvar title = vm.title;\n\n\t\tif (title.length) {\n\t\t\tpt.x = getAlignedX(vm, vm._titleAlign);\n\n\t\t\tctx.textAlign = vm._titleAlign;\n\t\t\tctx.textBaseline = 'top';\n\n\t\t\tvar titleFontSize = vm.titleFontSize;\n\t\t\tvar titleSpacing = vm.titleSpacing;\n\n\t\t\tctx.fillStyle = vm.titleFontColor;\n\t\t\tctx.font = helpers$1.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);\n\n\t\t\tvar i, len;\n\t\t\tfor (i = 0, len = title.length; i < len; ++i) {\n\t\t\t\tctx.fillText(title[i], pt.x, pt.y);\n\t\t\t\tpt.y += titleFontSize + titleSpacing; // Line Height and spacing\n\n\t\t\t\tif (i + 1 === title.length) {\n\t\t\t\t\tpt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tdrawBody: function(pt, vm, ctx) {\n\t\tvar bodyFontSize = vm.bodyFontSize;\n\t\tvar bodySpacing = vm.bodySpacing;\n\t\tvar bodyAlign = vm._bodyAlign;\n\t\tvar body = vm.body;\n\t\tvar drawColorBoxes = vm.displayColors;\n\t\tvar labelColors = vm.labelColors;\n\t\tvar xLinePadding = 0;\n\t\tvar colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;\n\t\tvar textColor;\n\n\t\tctx.textAlign = bodyAlign;\n\t\tctx.textBaseline = 'top';\n\t\tctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);\n\n\t\tpt.x = getAlignedX(vm, bodyAlign);\n\n\t\t// Before Body\n\t\tvar fillLineOfText = function(line) {\n\t\t\tctx.fillText(line, pt.x + xLinePadding, pt.y);\n\t\t\tpt.y += bodyFontSize + bodySpacing;\n\t\t};\n\n\t\t// Before body lines\n\t\tctx.fillStyle = vm.bodyFontColor;\n\t\thelpers$1.each(vm.beforeBody, fillLineOfText);\n\n\t\txLinePadding = drawColorBoxes && bodyAlign !== 'right'\n\t\t\t? bodyAlign === 'center' ? (bodyFontSize / 2 + 1) : (bodyFontSize + 2)\n\t\t\t: 0;\n\n\t\t// Draw body lines now\n\t\thelpers$1.each(body, function(bodyItem, i) {\n\t\t\ttextColor = vm.labelTextColors[i];\n\t\t\tctx.fillStyle = textColor;\n\t\t\thelpers$1.each(bodyItem.before, fillLineOfText);\n\n\t\t\thelpers$1.each(bodyItem.lines, function(line) {\n\t\t\t\t// Draw Legend-like boxes if needed\n\t\t\t\tif (drawColorBoxes) {\n\t\t\t\t\t// Fill a white rect so that colours merge nicely if the opacity is < 1\n\t\t\t\t\tctx.fillStyle = vm.legendColorBackground;\n\t\t\t\t\tctx.fillRect(colorX, pt.y, bodyFontSize, bodyFontSize);\n\n\t\t\t\t\t// Border\n\t\t\t\t\tctx.lineWidth = 1;\n\t\t\t\t\tctx.strokeStyle = labelColors[i].borderColor;\n\t\t\t\t\tctx.strokeRect(colorX, pt.y, bodyFontSize, bodyFontSize);\n\n\t\t\t\t\t// Inner square\n\t\t\t\t\tctx.fillStyle = labelColors[i].backgroundColor;\n\t\t\t\t\tctx.fillRect(colorX + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);\n\t\t\t\t\tctx.fillStyle = textColor;\n\t\t\t\t}\n\n\t\t\t\tfillLineOfText(line);\n\t\t\t});\n\n\t\t\thelpers$1.each(bodyItem.after, fillLineOfText);\n\t\t});\n\n\t\t// Reset back to 0 for after body\n\t\txLinePadding = 0;\n\n\t\t// After body lines\n\t\thelpers$1.each(vm.afterBody, fillLineOfText);\n\t\tpt.y -= bodySpacing; // Remove last body spacing\n\t},\n\n\tdrawFooter: function(pt, vm, ctx) {\n\t\tvar footer = vm.footer;\n\n\t\tif (footer.length) {\n\t\t\tpt.x = getAlignedX(vm, vm._footerAlign);\n\t\t\tpt.y += vm.footerMarginTop;\n\n\t\t\tctx.textAlign = vm._footerAlign;\n\t\t\tctx.textBaseline = 'top';\n\n\t\t\tctx.fillStyle = vm.footerFontColor;\n\t\t\tctx.font = helpers$1.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);\n\n\t\t\thelpers$1.each(footer, function(line) {\n\t\t\t\tctx.fillText(line, pt.x, pt.y);\n\t\t\t\tpt.y += vm.footerFontSize + vm.footerSpacing;\n\t\t\t});\n\t\t}\n\t},\n\n\tdrawBackground: function(pt, vm, ctx, tooltipSize) {\n\t\tctx.fillStyle = vm.backgroundColor;\n\t\tctx.strokeStyle = vm.borderColor;\n\t\tctx.lineWidth = vm.borderWidth;\n\t\tvar xAlign = vm.xAlign;\n\t\tvar yAlign = vm.yAlign;\n\t\tvar x = pt.x;\n\t\tvar y = pt.y;\n\t\tvar width = tooltipSize.width;\n\t\tvar height = tooltipSize.height;\n\t\tvar radius = vm.cornerRadius;\n\n\t\tctx.beginPath();\n\t\tctx.moveTo(x + radius, y);\n\t\tif (yAlign === 'top') {\n\t\t\tthis.drawCaret(pt, tooltipSize);\n\t\t}\n\t\tctx.lineTo(x + width - radius, y);\n\t\tctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n\t\tif (yAlign === 'center' && xAlign === 'right') {\n\t\t\tthis.drawCaret(pt, tooltipSize);\n\t\t}\n\t\tctx.lineTo(x + width, y + height - radius);\n\t\tctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n\t\tif (yAlign === 'bottom') {\n\t\t\tthis.drawCaret(pt, tooltipSize);\n\t\t}\n\t\tctx.lineTo(x + radius, y + height);\n\t\tctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n\t\tif (yAlign === 'center' && xAlign === 'left') {\n\t\t\tthis.drawCaret(pt, tooltipSize);\n\t\t}\n\t\tctx.lineTo(x, y + radius);\n\t\tctx.quadraticCurveTo(x, y, x + radius, y);\n\t\tctx.closePath();\n\n\t\tctx.fill();\n\n\t\tif (vm.borderWidth > 0) {\n\t\t\tctx.stroke();\n\t\t}\n\t},\n\n\tdraw: function() {\n\t\tvar ctx = this._chart.ctx;\n\t\tvar vm = this._view;\n\n\t\tif (vm.opacity === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar tooltipSize = {\n\t\t\twidth: vm.width,\n\t\t\theight: vm.height\n\t\t};\n\t\tvar pt = {\n\t\t\tx: vm.x,\n\t\t\ty: vm.y\n\t\t};\n\n\t\t// IE11/Edge does not like very small opacities, so snap to 0\n\t\tvar opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;\n\n\t\t// Truthy/falsey value for empty tooltip\n\t\tvar hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;\n\n\t\tif (this._options.enabled && hasTooltipContent) {\n\t\t\tctx.save();\n\t\t\tctx.globalAlpha = opacity;\n\n\t\t\t// Draw Background\n\t\t\tthis.drawBackground(pt, vm, ctx, tooltipSize);\n\n\t\t\t// Draw Title, Body, and Footer\n\t\t\tpt.y += vm.yPadding;\n\n\t\t\t// Titles\n\t\t\tthis.drawTitle(pt, vm, ctx);\n\n\t\t\t// Body\n\t\t\tthis.drawBody(pt, vm, ctx);\n\n\t\t\t// Footer\n\t\t\tthis.drawFooter(pt, vm, ctx);\n\n\t\t\tctx.restore();\n\t\t}\n\t},\n\n\t/**\n\t * Handle an event\n\t * @private\n\t * @param {IEvent} event - The event to handle\n\t * @returns {boolean} true if the tooltip changed\n\t */\n\thandleEvent: function(e) {\n\t\tvar me = this;\n\t\tvar options = me._options;\n\t\tvar changed = false;\n\n\t\tme._lastActive = me._lastActive || [];\n\n\t\t// Find Active Elements for tooltips\n\t\tif (e.type === 'mouseout') {\n\t\t\tme._active = [];\n\t\t} else {\n\t\t\tme._active = me._chart.getElementsAtEventForMode(e, options.mode, options);\n\t\t}\n\n\t\t// Remember Last Actives\n\t\tchanged = !helpers$1.arrayEquals(me._active, me._lastActive);\n\n\t\t// Only handle target event on tooltip change\n\t\tif (changed) {\n\t\t\tme._lastActive = me._active;\n\n\t\t\tif (options.enabled || options.custom) {\n\t\t\t\tme._eventPosition = {\n\t\t\t\t\tx: e.x,\n\t\t\t\t\ty: e.y\n\t\t\t\t};\n\n\t\t\t\tme.update(true);\n\t\t\t\tme.pivot();\n\t\t\t}\n\t\t}\n\n\t\treturn changed;\n\t}\n});\n\n/**\n * @namespace Chart.Tooltip.positioners\n */\nvar positioners_1 = positioners;\n\nvar core_tooltip = exports$3;\ncore_tooltip.positioners = positioners_1;\n\nvar valueOrDefault$8 = helpers$1.valueOrDefault;\n\ncore_defaults._set('global', {\n\telements: {},\n\tevents: [\n\t\t'mousemove',\n\t\t'mouseout',\n\t\t'click',\n\t\t'touchstart',\n\t\t'touchmove'\n\t],\n\thover: {\n\t\tonHover: null,\n\t\tmode: 'nearest',\n\t\tintersect: true,\n\t\tanimationDuration: 400\n\t},\n\tonClick: null,\n\tmaintainAspectRatio: true,\n\tresponsive: true,\n\tresponsiveAnimationDuration: 0\n});\n\n/**\n * Recursively merge the given config objects representing the `scales` option\n * by incorporating scale defaults in `xAxes` and `yAxes` array items, then\n * returns a deep copy of the result, thus doesn't alter inputs.\n */\nfunction mergeScaleConfig(/* config objects ... */) {\n\treturn helpers$1.merge({}, [].slice.call(arguments), {\n\t\tmerger: function(key, target, source, options) {\n\t\t\tif (key === 'xAxes' || key === 'yAxes') {\n\t\t\t\tvar slen = source[key].length;\n\t\t\t\tvar i, type, scale;\n\n\t\t\t\tif (!target[key]) {\n\t\t\t\t\ttarget[key] = [];\n\t\t\t\t}\n\n\t\t\t\tfor (i = 0; i < slen; ++i) {\n\t\t\t\t\tscale = source[key][i];\n\t\t\t\t\ttype = valueOrDefault$8(scale.type, key === 'xAxes' ? 'category' : 'linear');\n\n\t\t\t\t\tif (i >= target[key].length) {\n\t\t\t\t\t\ttarget[key].push({});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!target[key][i].type || (scale.type && scale.type !== target[key][i].type)) {\n\t\t\t\t\t\t// new/untyped scale or type changed: let's apply the new defaults\n\t\t\t\t\t\t// then merge source scale to correctly overwrite the defaults.\n\t\t\t\t\t\thelpers$1.merge(target[key][i], [core_scaleService.getScaleDefaults(type), scale]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// scales type are the same\n\t\t\t\t\t\thelpers$1.merge(target[key][i], scale);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thelpers$1._merger(key, target, source, options);\n\t\t\t}\n\t\t}\n\t});\n}\n\n/**\n * Recursively merge the given config objects as the root options by handling\n * default scale options for the `scales` and `scale` properties, then returns\n * a deep copy of the result, thus doesn't alter inputs.\n */\nfunction mergeConfig(/* config objects ... */) {\n\treturn helpers$1.merge({}, [].slice.call(arguments), {\n\t\tmerger: function(key, target, source, options) {\n\t\t\tvar tval = target[key] || {};\n\t\t\tvar sval = source[key];\n\n\t\t\tif (key === 'scales') {\n\t\t\t\t// scale config merging is complex. Add our own function here for that\n\t\t\t\ttarget[key] = mergeScaleConfig(tval, sval);\n\t\t\t} else if (key === 'scale') {\n\t\t\t\t// used in polar area & radar charts since there is only one scale\n\t\t\t\ttarget[key] = helpers$1.merge(tval, [core_scaleService.getScaleDefaults(sval.type), sval]);\n\t\t\t} else {\n\t\t\t\thelpers$1._merger(key, target, source, options);\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction initConfig(config) {\n\tconfig = config || {};\n\n\t// Do NOT use mergeConfig for the data object because this method merges arrays\n\t// and so would change references to labels and datasets, preventing data updates.\n\tvar data = config.data = config.data || {};\n\tdata.datasets = data.datasets || [];\n\tdata.labels = data.labels || [];\n\n\tconfig.options = mergeConfig(\n\t\tcore_defaults.global,\n\t\tcore_defaults[config.type],\n\t\tconfig.options || {});\n\n\treturn config;\n}\n\nfunction updateConfig(chart) {\n\tvar newOptions = chart.options;\n\n\thelpers$1.each(chart.scales, function(scale) {\n\t\tcore_layouts.removeBox(chart, scale);\n\t});\n\n\tnewOptions = mergeConfig(\n\t\tcore_defaults.global,\n\t\tcore_defaults[chart.config.type],\n\t\tnewOptions);\n\n\tchart.options = chart.config.options = newOptions;\n\tchart.ensureScalesHaveIDs();\n\tchart.buildOrUpdateScales();\n\n\t// Tooltip\n\tchart.tooltip._options = newOptions.tooltips;\n\tchart.tooltip.initialize();\n}\n\nfunction positionIsHorizontal(position) {\n\treturn position === 'top' || position === 'bottom';\n}\n\nvar Chart = function(item, config) {\n\tthis.construct(item, config);\n\treturn this;\n};\n\nhelpers$1.extend(Chart.prototype, /** @lends Chart */ {\n\t/**\n\t * @private\n\t */\n\tconstruct: function(item, config) {\n\t\tvar me = this;\n\n\t\tconfig = initConfig(config);\n\n\t\tvar context = platform.acquireContext(item, config);\n\t\tvar canvas = context && context.canvas;\n\t\tvar height = canvas && canvas.height;\n\t\tvar width = canvas && canvas.width;\n\n\t\tme.id = helpers$1.uid();\n\t\tme.ctx = context;\n\t\tme.canvas = canvas;\n\t\tme.config = config;\n\t\tme.width = width;\n\t\tme.height = height;\n\t\tme.aspectRatio = height ? width / height : null;\n\t\tme.options = config.options;\n\t\tme._bufferedRender = false;\n\n\t\t/**\n\t\t * Provided for backward compatibility, Chart and Chart.Controller have been merged,\n\t\t * the \"instance\" still need to be defined since it might be called from plugins.\n\t\t * @prop Chart#chart\n\t\t * @deprecated since version 2.6.0\n\t\t * @todo remove at version 3\n\t\t * @private\n\t\t */\n\t\tme.chart = me;\n\t\tme.controller = me; // chart.chart.controller #inception\n\n\t\t// Add the chart instance to the global namespace\n\t\tChart.instances[me.id] = me;\n\n\t\t// Define alias to the config data: `chart.data === chart.config.data`\n\t\tObject.defineProperty(me, 'data', {\n\t\t\tget: function() {\n\t\t\t\treturn me.config.data;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tme.config.data = value;\n\t\t\t}\n\t\t});\n\n\t\tif (!context || !canvas) {\n\t\t\t// The given item is not a compatible context2d element, let's return before finalizing\n\t\t\t// the chart initialization but after setting basic chart / controller properties that\n\t\t\t// can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n\t\t\t// https://github.com/chartjs/Chart.js/issues/2807\n\t\t\tconsole.error(\"Failed to create chart: can't acquire context from the given item\");\n\t\t\treturn;\n\t\t}\n\n\t\tme.initialize();\n\t\tme.update();\n\t},\n\n\t/**\n\t * @private\n\t */\n\tinitialize: function() {\n\t\tvar me = this;\n\n\t\t// Before init plugin notification\n\t\tcore_plugins.notify(me, 'beforeInit');\n\n\t\thelpers$1.retinaScale(me, me.options.devicePixelRatio);\n\n\t\tme.bindEvents();\n\n\t\tif (me.options.responsive) {\n\t\t\t// Initial resize before chart draws (must be silent to preserve initial animations).\n\t\t\tme.resize(true);\n\t\t}\n\n\t\t// Make sure scales have IDs and are built before we build any controllers.\n\t\tme.ensureScalesHaveIDs();\n\t\tme.buildOrUpdateScales();\n\t\tme.initToolTip();\n\n\t\t// After init plugin notification\n\t\tcore_plugins.notify(me, 'afterInit');\n\n\t\treturn me;\n\t},\n\n\tclear: function() {\n\t\thelpers$1.canvas.clear(this);\n\t\treturn this;\n\t},\n\n\tstop: function() {\n\t\t// Stops any current animation loop occurring\n\t\tcore_animations.cancelAnimation(this);\n\t\treturn this;\n\t},\n\n\tresize: function(silent) {\n\t\tvar me = this;\n\t\tvar options = me.options;\n\t\tvar canvas = me.canvas;\n\t\tvar aspectRatio = (options.maintainAspectRatio && me.aspectRatio) || null;\n\n\t\t// the canvas render width and height will be casted to integers so make sure that\n\t\t// the canvas display style uses the same integer values to avoid blurring effect.\n\n\t\t// Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collapsed\n\t\tvar newWidth = Math.max(0, Math.floor(helpers$1.getMaximumWidth(canvas)));\n\t\tvar newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers$1.getMaximumHeight(canvas)));\n\n\t\tif (me.width === newWidth && me.height === newHeight) {\n\t\t\treturn;\n\t\t}\n\n\t\tcanvas.width = me.width = newWidth;\n\t\tcanvas.height = me.height = newHeight;\n\t\tcanvas.style.width = newWidth + 'px';\n\t\tcanvas.style.height = newHeight + 'px';\n\n\t\thelpers$1.retinaScale(me, options.devicePixelRatio);\n\n\t\tif (!silent) {\n\t\t\t// Notify any plugins about the resize\n\t\t\tvar newSize = {width: newWidth, height: newHeight};\n\t\t\tcore_plugins.notify(me, 'resize', [newSize]);\n\n\t\t\t// Notify of resize\n\t\t\tif (options.onResize) {\n\t\t\t\toptions.onResize(me, newSize);\n\t\t\t}\n\n\t\t\tme.stop();\n\t\t\tme.update({\n\t\t\t\tduration: options.responsiveAnimationDuration\n\t\t\t});\n\t\t}\n\t},\n\n\tensureScalesHaveIDs: function() {\n\t\tvar options = this.options;\n\t\tvar scalesOptions = options.scales || {};\n\t\tvar scaleOptions = options.scale;\n\n\t\thelpers$1.each(scalesOptions.xAxes, function(xAxisOptions, index) {\n\t\t\txAxisOptions.id = xAxisOptions.id || ('x-axis-' + index);\n\t\t});\n\n\t\thelpers$1.each(scalesOptions.yAxes, function(yAxisOptions, index) {\n\t\t\tyAxisOptions.id = yAxisOptions.id || ('y-axis-' + index);\n\t\t});\n\n\t\tif (scaleOptions) {\n\t\t\tscaleOptions.id = scaleOptions.id || 'scale';\n\t\t}\n\t},\n\n\t/**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n\tbuildOrUpdateScales: function() {\n\t\tvar me = this;\n\t\tvar options = me.options;\n\t\tvar scales = me.scales || {};\n\t\tvar items = [];\n\t\tvar updated = Object.keys(scales).reduce(function(obj, id) {\n\t\t\tobj[id] = false;\n\t\t\treturn obj;\n\t\t}, {});\n\n\t\tif (options.scales) {\n\t\t\titems = items.concat(\n\t\t\t\t(options.scales.xAxes || []).map(function(xAxisOptions) {\n\t\t\t\t\treturn {options: xAxisOptions, dtype: 'category', dposition: 'bottom'};\n\t\t\t\t}),\n\t\t\t\t(options.scales.yAxes || []).map(function(yAxisOptions) {\n\t\t\t\t\treturn {options: yAxisOptions, dtype: 'linear', dposition: 'left'};\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\n\t\tif (options.scale) {\n\t\t\titems.push({\n\t\t\t\toptions: options.scale,\n\t\t\t\tdtype: 'radialLinear',\n\t\t\t\tisDefault: true,\n\t\t\t\tdposition: 'chartArea'\n\t\t\t});\n\t\t}\n\n\t\thelpers$1.each(items, function(item) {\n\t\t\tvar scaleOptions = item.options;\n\t\t\tvar id = scaleOptions.id;\n\t\t\tvar scaleType = valueOrDefault$8(scaleOptions.type, item.dtype);\n\n\t\t\tif (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {\n\t\t\t\tscaleOptions.position = item.dposition;\n\t\t\t}\n\n\t\t\tupdated[id] = true;\n\t\t\tvar scale = null;\n\t\t\tif (id in scales && scales[id].type === scaleType) {\n\t\t\t\tscale = scales[id];\n\t\t\t\tscale.options = scaleOptions;\n\t\t\t\tscale.ctx = me.ctx;\n\t\t\t\tscale.chart = me;\n\t\t\t} else {\n\t\t\t\tvar scaleClass = core_scaleService.getScaleConstructor(scaleType);\n\t\t\t\tif (!scaleClass) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tscale = new scaleClass({\n\t\t\t\t\tid: id,\n\t\t\t\t\ttype: scaleType,\n\t\t\t\t\toptions: scaleOptions,\n\t\t\t\t\tctx: me.ctx,\n\t\t\t\t\tchart: me\n\t\t\t\t});\n\t\t\t\tscales[scale.id] = scale;\n\t\t\t}\n\n\t\t\tscale.mergeTicksOptions();\n\n\t\t\t// TODO(SB): I think we should be able to remove this custom case (options.scale)\n\t\t\t// and consider it as a regular scale part of the \"scales\"\" map only! This would\n\t\t\t// make the logic easier and remove some useless? custom code.\n\t\t\tif (item.isDefault) {\n\t\t\t\tme.scale = scale;\n\t\t\t}\n\t\t});\n\t\t// clear up discarded scales\n\t\thelpers$1.each(updated, function(hasUpdated, id) {\n\t\t\tif (!hasUpdated) {\n\t\t\t\tdelete scales[id];\n\t\t\t}\n\t\t});\n\n\t\tme.scales = scales;\n\n\t\tcore_scaleService.addScalesToLayout(this);\n\t},\n\n\tbuildOrUpdateControllers: function() {\n\t\tvar me = this;\n\t\tvar newControllers = [];\n\n\t\thelpers$1.each(me.data.datasets, function(dataset, datasetIndex) {\n\t\t\tvar meta = me.getDatasetMeta(datasetIndex);\n\t\t\tvar type = dataset.type || me.config.type;\n\n\t\t\tif (meta.type && meta.type !== type) {\n\t\t\t\tme.destroyDatasetMeta(datasetIndex);\n\t\t\t\tmeta = me.getDatasetMeta(datasetIndex);\n\t\t\t}\n\t\t\tmeta.type = type;\n\n\t\t\tif (meta.controller) {\n\t\t\t\tmeta.controller.updateIndex(datasetIndex);\n\t\t\t\tmeta.controller.linkScales();\n\t\t\t} else {\n\t\t\t\tvar ControllerClass = controllers[meta.type];\n\t\t\t\tif (ControllerClass === undefined) {\n\t\t\t\t\tthrow new Error('\"' + meta.type + '\" is not a chart type.');\n\t\t\t\t}\n\n\t\t\t\tmeta.controller = new ControllerClass(me, datasetIndex);\n\t\t\t\tnewControllers.push(meta.controller);\n\t\t\t}\n\t\t}, me);\n\n\t\treturn newControllers;\n\t},\n\n\t/**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n\tresetElements: function() {\n\t\tvar me = this;\n\t\thelpers$1.each(me.data.datasets, function(dataset, datasetIndex) {\n\t\t\tme.getDatasetMeta(datasetIndex).controller.reset();\n\t\t}, me);\n\t},\n\n\t/**\n\t* Resets the chart back to it's state before the initial animation\n\t*/\n\treset: function() {\n\t\tthis.resetElements();\n\t\tthis.tooltip.initialize();\n\t},\n\n\tupdate: function(config) {\n\t\tvar me = this;\n\n\t\tif (!config || typeof config !== 'object') {\n\t\t\t// backwards compatibility\n\t\t\tconfig = {\n\t\t\t\tduration: config,\n\t\t\t\tlazy: arguments[1]\n\t\t\t};\n\t\t}\n\n\t\tupdateConfig(me);\n\n\t\t// plugins options references might have change, let's invalidate the cache\n\t\t// https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n\t\tcore_plugins._invalidate(me);\n\n\t\tif (core_plugins.notify(me, 'beforeUpdate') === false) {\n\t\t\treturn;\n\t\t}\n\n\t\t// In case the entire data object changed\n\t\tme.tooltip._data = me.data;\n\n\t\t// Make sure dataset controllers are updated and new controllers are reset\n\t\tvar newControllers = me.buildOrUpdateControllers();\n\n\t\t// Make sure all dataset controllers have correct meta data counts\n\t\thelpers$1.each(me.data.datasets, function(dataset, datasetIndex) {\n\t\t\tme.getDatasetMeta(datasetIndex).controller.buildOrUpdateElements();\n\t\t}, me);\n\n\t\tme.updateLayout();\n\n\t\t// Can only reset the new controllers after the scales have been updated\n\t\tif (me.options.animation && me.options.animation.duration) {\n\t\t\thelpers$1.each(newControllers, function(controller) {\n\t\t\t\tcontroller.reset();\n\t\t\t});\n\t\t}\n\n\t\tme.updateDatasets();\n\n\t\t// Need to reset tooltip in case it is displayed with elements that are removed\n\t\t// after update.\n\t\tme.tooltip.initialize();\n\n\t\t// Last active contains items that were previously in the tooltip.\n\t\t// When we reset the tooltip, we need to clear it\n\t\tme.lastActive = [];\n\n\t\t// Do this before render so that any plugins that need final scale updates can use it\n\t\tcore_plugins.notify(me, 'afterUpdate');\n\n\t\tif (me._bufferedRender) {\n\t\t\tme._bufferedRequest = {\n\t\t\t\tduration: config.duration,\n\t\t\t\teasing: config.easing,\n\t\t\t\tlazy: config.lazy\n\t\t\t};\n\t\t} else {\n\t\t\tme.render(config);\n\t\t}\n\t},\n\n\t/**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n\tupdateLayout: function() {\n\t\tvar me = this;\n\n\t\tif (core_plugins.notify(me, 'beforeLayout') === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tcore_layouts.update(this, this.width, this.height);\n\n\t\t/**\n\t\t * Provided for backward compatibility, use `afterLayout` instead.\n\t\t * @method IPlugin#afterScaleUpdate\n\t\t * @deprecated since version 2.5.0\n\t\t * @todo remove at version 3\n\t\t * @private\n\t\t */\n\t\tcore_plugins.notify(me, 'afterScaleUpdate');\n\t\tcore_plugins.notify(me, 'afterLayout');\n\t},\n\n\t/**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n\tupdateDatasets: function() {\n\t\tvar me = this;\n\n\t\tif (core_plugins.notify(me, 'beforeDatasetsUpdate') === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n\t\t\tme.updateDataset(i);\n\t\t}\n\n\t\tcore_plugins.notify(me, 'afterDatasetsUpdate');\n\t},\n\n\t/**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n\tupdateDataset: function(index) {\n\t\tvar me = this;\n\t\tvar meta = me.getDatasetMeta(index);\n\t\tvar args = {\n\t\t\tmeta: meta,\n\t\t\tindex: index\n\t\t};\n\n\t\tif (core_plugins.notify(me, 'beforeDatasetUpdate', [args]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tmeta.controller.update();\n\n\t\tcore_plugins.notify(me, 'afterDatasetUpdate', [args]);\n\t},\n\n\trender: function(config) {\n\t\tvar me = this;\n\n\t\tif (!config || typeof config !== 'object') {\n\t\t\t// backwards compatibility\n\t\t\tconfig = {\n\t\t\t\tduration: config,\n\t\t\t\tlazy: arguments[1]\n\t\t\t};\n\t\t}\n\n\t\tvar animationOptions = me.options.animation;\n\t\tvar duration = valueOrDefault$8(config.duration, animationOptions && animationOptions.duration);\n\t\tvar lazy = config.lazy;\n\n\t\tif (core_plugins.notify(me, 'beforeRender') === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar onComplete = function(animation) {\n\t\t\tcore_plugins.notify(me, 'afterRender');\n\t\t\thelpers$1.callback(animationOptions && animationOptions.onComplete, [animation], me);\n\t\t};\n\n\t\tif (animationOptions && duration) {\n\t\t\tvar animation = new core_animation({\n\t\t\t\tnumSteps: duration / 16.66, // 60 fps\n\t\t\t\teasing: config.easing || animationOptions.easing,\n\n\t\t\t\trender: function(chart, animationObject) {\n\t\t\t\t\tvar easingFunction = helpers$1.easing.effects[animationObject.easing];\n\t\t\t\t\tvar currentStep = animationObject.currentStep;\n\t\t\t\t\tvar stepDecimal = currentStep / animationObject.numSteps;\n\n\t\t\t\t\tchart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);\n\t\t\t\t},\n\n\t\t\t\tonAnimationProgress: animationOptions.onProgress,\n\t\t\t\tonAnimationComplete: onComplete\n\t\t\t});\n\n\t\t\tcore_animations.addAnimation(me, animation, duration, lazy);\n\t\t} else {\n\t\t\tme.draw();\n\n\t\t\t// See https://github.com/chartjs/Chart.js/issues/3781\n\t\t\tonComplete(new core_animation({numSteps: 0, chart: me}));\n\t\t}\n\n\t\treturn me;\n\t},\n\n\tdraw: function(easingValue) {\n\t\tvar me = this;\n\n\t\tme.clear();\n\n\t\tif (helpers$1.isNullOrUndef(easingValue)) {\n\t\t\teasingValue = 1;\n\t\t}\n\n\t\tme.transition(easingValue);\n\n\t\tif (me.width <= 0 || me.height <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (core_plugins.notify(me, 'beforeDraw', [easingValue]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Draw all the scales\n\t\thelpers$1.each(me.boxes, function(box) {\n\t\t\tbox.draw(me.chartArea);\n\t\t}, me);\n\n\t\tme.drawDatasets(easingValue);\n\t\tme._drawTooltip(easingValue);\n\n\t\tcore_plugins.notify(me, 'afterDraw', [easingValue]);\n\t},\n\n\t/**\n\t * @private\n\t */\n\ttransition: function(easingValue) {\n\t\tvar me = this;\n\n\t\tfor (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {\n\t\t\tif (me.isDatasetVisible(i)) {\n\t\t\t\tme.getDatasetMeta(i).controller.transition(easingValue);\n\t\t\t}\n\t\t}\n\n\t\tme.tooltip.transition(easingValue);\n\t},\n\n\t/**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n\tdrawDatasets: function(easingValue) {\n\t\tvar me = this;\n\n\t\tif (core_plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Draw datasets reversed to support proper line stacking\n\t\tfor (var i = (me.data.datasets || []).length - 1; i >= 0; --i) {\n\t\t\tif (me.isDatasetVisible(i)) {\n\t\t\t\tme.drawDataset(i, easingValue);\n\t\t\t}\n\t\t}\n\n\t\tcore_plugins.notify(me, 'afterDatasetsDraw', [easingValue]);\n\t},\n\n\t/**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n\tdrawDataset: function(index, easingValue) {\n\t\tvar me = this;\n\t\tvar meta = me.getDatasetMeta(index);\n\t\tvar args = {\n\t\t\tmeta: meta,\n\t\t\tindex: index,\n\t\t\teasingValue: easingValue\n\t\t};\n\n\t\tif (core_plugins.notify(me, 'beforeDatasetDraw', [args]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tmeta.controller.draw(easingValue);\n\n\t\tcore_plugins.notify(me, 'afterDatasetDraw', [args]);\n\t},\n\n\t/**\n\t * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`\n\t * hook, in which case, plugins will not be called on `afterTooltipDraw`.\n\t * @private\n\t */\n\t_drawTooltip: function(easingValue) {\n\t\tvar me = this;\n\t\tvar tooltip = me.tooltip;\n\t\tvar args = {\n\t\t\ttooltip: tooltip,\n\t\t\teasingValue: easingValue\n\t\t};\n\n\t\tif (core_plugins.notify(me, 'beforeTooltipDraw', [args]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\ttooltip.draw();\n\n\t\tcore_plugins.notify(me, 'afterTooltipDraw', [args]);\n\t},\n\n\t/**\n\t * Get the single element that was clicked on\n\t * @return An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw\n\t */\n\tgetElementAtEvent: function(e) {\n\t\treturn core_interaction.modes.single(this, e);\n\t},\n\n\tgetElementsAtEvent: function(e) {\n\t\treturn core_interaction.modes.label(this, e, {intersect: true});\n\t},\n\n\tgetElementsAtXAxis: function(e) {\n\t\treturn core_interaction.modes['x-axis'](this, e, {intersect: true});\n\t},\n\n\tgetElementsAtEventForMode: function(e, mode, options) {\n\t\tvar method = core_interaction.modes[mode];\n\t\tif (typeof method === 'function') {\n\t\t\treturn method(this, e, options);\n\t\t}\n\n\t\treturn [];\n\t},\n\n\tgetDatasetAtEvent: function(e) {\n\t\treturn core_interaction.modes.dataset(this, e, {intersect: true});\n\t},\n\n\tgetDatasetMeta: function(datasetIndex) {\n\t\tvar me = this;\n\t\tvar dataset = me.data.datasets[datasetIndex];\n\t\tif (!dataset._meta) {\n\t\t\tdataset._meta = {};\n\t\t}\n\n\t\tvar meta = dataset._meta[me.id];\n\t\tif (!meta) {\n\t\t\tmeta = dataset._meta[me.id] = {\n\t\t\t\ttype: null,\n\t\t\t\tdata: [],\n\t\t\t\tdataset: null,\n\t\t\t\tcontroller: null,\n\t\t\t\thidden: null,\t\t\t// See isDatasetVisible() comment\n\t\t\t\txAxisID: null,\n\t\t\t\tyAxisID: null\n\t\t\t};\n\t\t}\n\n\t\treturn meta;\n\t},\n\n\tgetVisibleDatasetCount: function() {\n\t\tvar count = 0;\n\t\tfor (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n\t\t\tif (this.isDatasetVisible(i)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t},\n\n\tisDatasetVisible: function(datasetIndex) {\n\t\tvar meta = this.getDatasetMeta(datasetIndex);\n\n\t\t// meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n\t\t// the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n\t\treturn typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;\n\t},\n\n\tgenerateLegend: function() {\n\t\treturn this.options.legendCallback(this);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tdestroyDatasetMeta: function(datasetIndex) {\n\t\tvar id = this.id;\n\t\tvar dataset = this.data.datasets[datasetIndex];\n\t\tvar meta = dataset._meta && dataset._meta[id];\n\n\t\tif (meta) {\n\t\t\tmeta.controller.destroy();\n\t\t\tdelete dataset._meta[id];\n\t\t}\n\t},\n\n\tdestroy: function() {\n\t\tvar me = this;\n\t\tvar canvas = me.canvas;\n\t\tvar i, ilen;\n\n\t\tme.stop();\n\n\t\t// dataset controllers need to cleanup associated data\n\t\tfor (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n\t\t\tme.destroyDatasetMeta(i);\n\t\t}\n\n\t\tif (canvas) {\n\t\t\tme.unbindEvents();\n\t\t\thelpers$1.canvas.clear(me);\n\t\t\tplatform.releaseContext(me.ctx);\n\t\t\tme.canvas = null;\n\t\t\tme.ctx = null;\n\t\t}\n\n\t\tcore_plugins.notify(me, 'destroy');\n\n\t\tdelete Chart.instances[me.id];\n\t},\n\n\ttoBase64Image: function() {\n\t\treturn this.canvas.toDataURL.apply(this.canvas, arguments);\n\t},\n\n\tinitToolTip: function() {\n\t\tvar me = this;\n\t\tme.tooltip = new core_tooltip({\n\t\t\t_chart: me,\n\t\t\t_chartInstance: me, // deprecated, backward compatibility\n\t\t\t_data: me.data,\n\t\t\t_options: me.options.tooltips\n\t\t}, me);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tbindEvents: function() {\n\t\tvar me = this;\n\t\tvar listeners = me._listeners = {};\n\t\tvar listener = function() {\n\t\t\tme.eventHandler.apply(me, arguments);\n\t\t};\n\n\t\thelpers$1.each(me.options.events, function(type) {\n\t\t\tplatform.addEventListener(me, type, listener);\n\t\t\tlisteners[type] = listener;\n\t\t});\n\n\t\t// Elements used to detect size change should not be injected for non responsive charts.\n\t\t// See https://github.com/chartjs/Chart.js/issues/2210\n\t\tif (me.options.responsive) {\n\t\t\tlistener = function() {\n\t\t\t\tme.resize();\n\t\t\t};\n\n\t\t\tplatform.addEventListener(me, 'resize', listener);\n\t\t\tlisteners.resize = listener;\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\tunbindEvents: function() {\n\t\tvar me = this;\n\t\tvar listeners = me._listeners;\n\t\tif (!listeners) {\n\t\t\treturn;\n\t\t}\n\n\t\tdelete me._listeners;\n\t\thelpers$1.each(listeners, function(listener, type) {\n\t\t\tplatform.removeEventListener(me, type, listener);\n\t\t});\n\t},\n\n\tupdateHoverStyle: function(elements, mode, enabled) {\n\t\tvar method = enabled ? 'setHoverStyle' : 'removeHoverStyle';\n\t\tvar element, i, ilen;\n\n\t\tfor (i = 0, ilen = elements.length; i < ilen; ++i) {\n\t\t\telement = elements[i];\n\t\t\tif (element) {\n\t\t\t\tthis.getDatasetMeta(element._datasetIndex).controller[method](element);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\teventHandler: function(e) {\n\t\tvar me = this;\n\t\tvar tooltip = me.tooltip;\n\n\t\tif (core_plugins.notify(me, 'beforeEvent', [e]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Buffer any update calls so that renders do not occur\n\t\tme._bufferedRender = true;\n\t\tme._bufferedRequest = null;\n\n\t\tvar changed = me.handleEvent(e);\n\t\t// for smooth tooltip animations issue #4989\n\t\t// the tooltip should be the source of change\n\t\t// Animation check workaround:\n\t\t// tooltip._start will be null when tooltip isn't animating\n\t\tif (tooltip) {\n\t\t\tchanged = tooltip._start\n\t\t\t\t? tooltip.handleEvent(e)\n\t\t\t\t: changed | tooltip.handleEvent(e);\n\t\t}\n\n\t\tcore_plugins.notify(me, 'afterEvent', [e]);\n\n\t\tvar bufferedRequest = me._bufferedRequest;\n\t\tif (bufferedRequest) {\n\t\t\t// If we have an update that was triggered, we need to do a normal render\n\t\t\tme.render(bufferedRequest);\n\t\t} else if (changed && !me.animating) {\n\t\t\t// If entering, leaving, or changing elements, animate the change via pivot\n\t\t\tme.stop();\n\n\t\t\t// We only need to render at this point. Updating will cause scales to be\n\t\t\t// recomputed generating flicker & using more memory than necessary.\n\t\t\tme.render({\n\t\t\t\tduration: me.options.hover.animationDuration,\n\t\t\t\tlazy: true\n\t\t\t});\n\t\t}\n\n\t\tme._bufferedRender = false;\n\t\tme._bufferedRequest = null;\n\n\t\treturn me;\n\t},\n\n\t/**\n\t * Handle an event\n\t * @private\n\t * @param {IEvent} event the event to handle\n\t * @return {boolean} true if the chart needs to re-render\n\t */\n\thandleEvent: function(e) {\n\t\tvar me = this;\n\t\tvar options = me.options || {};\n\t\tvar hoverOptions = options.hover;\n\t\tvar changed = false;\n\n\t\tme.lastActive = me.lastActive || [];\n\n\t\t// Find Active Elements for hover and tooltips\n\t\tif (e.type === 'mouseout') {\n\t\t\tme.active = [];\n\t\t} else {\n\t\t\tme.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);\n\t\t}\n\n\t\t// Invoke onHover hook\n\t\t// Need to call with native event here to not break backwards compatibility\n\t\thelpers$1.callback(options.onHover || options.hover.onHover, [e.native, me.active], me);\n\n\t\tif (e.type === 'mouseup' || e.type === 'click') {\n\t\t\tif (options.onClick) {\n\t\t\t\t// Use e.native here for backwards compatibility\n\t\t\t\toptions.onClick.call(me, e.native, me.active);\n\t\t\t}\n\t\t}\n\n\t\t// Remove styling for last active (even if it may still be active)\n\t\tif (me.lastActive.length) {\n\t\t\tme.updateHoverStyle(me.lastActive, hoverOptions.mode, false);\n\t\t}\n\n\t\t// Built in hover styling\n\t\tif (me.active.length && hoverOptions.mode) {\n\t\t\tme.updateHoverStyle(me.active, hoverOptions.mode, true);\n\t\t}\n\n\t\tchanged = !helpers$1.arrayEquals(me.active, me.lastActive);\n\n\t\t// Remember Last Actives\n\t\tme.lastActive = me.active;\n\n\t\treturn changed;\n\t}\n});\n\n/**\n * NOTE(SB) We actually don't use this container anymore but we need to keep it\n * for backward compatibility. Though, it can still be useful for plugins that\n * would need to work on multiple charts?!\n */\nChart.instances = {};\n\nvar core_controller = Chart;\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart instead.\n * @class Chart.Controller\n * @deprecated since version 2.6\n * @todo remove at version 3\n * @private\n */\nChart.Controller = Chart;\n\n/**\n * Provided for backward compatibility, not available anymore.\n * @namespace Chart\n * @deprecated since version 2.8\n * @todo remove at version 3\n * @private\n */\nChart.types = {};\n\n/**\n * Provided for backward compatibility, not available anymore.\n * @namespace Chart.helpers.configMerge\n * @deprecated since version 2.8.0\n * @todo remove at version 3\n * @private\n */\nhelpers$1.configMerge = mergeConfig;\n\n/**\n * Provided for backward compatibility, not available anymore.\n * @namespace Chart.helpers.scaleMerge\n * @deprecated since version 2.8.0\n * @todo remove at version 3\n * @private\n */\nhelpers$1.scaleMerge = mergeScaleConfig;\n\nvar core_helpers = function() {\n\n\t// -- Basic js utility methods\n\n\thelpers$1.where = function(collection, filterCallback) {\n\t\tif (helpers$1.isArray(collection) && Array.prototype.filter) {\n\t\t\treturn collection.filter(filterCallback);\n\t\t}\n\t\tvar filtered = [];\n\n\t\thelpers$1.each(collection, function(item) {\n\t\t\tif (filterCallback(item)) {\n\t\t\t\tfiltered.push(item);\n\t\t\t}\n\t\t});\n\n\t\treturn filtered;\n\t};\n\thelpers$1.findIndex = Array.prototype.findIndex ?\n\t\tfunction(array, callback, scope) {\n\t\t\treturn array.findIndex(callback, scope);\n\t\t} :\n\t\tfunction(array, callback, scope) {\n\t\t\tscope = scope === undefined ? array : scope;\n\t\t\tfor (var i = 0, ilen = array.length; i < ilen; ++i) {\n\t\t\t\tif (callback.call(scope, array[i], i, array)) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t};\n\thelpers$1.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {\n\t\t// Default to start of the array\n\t\tif (helpers$1.isNullOrUndef(startIndex)) {\n\t\t\tstartIndex = -1;\n\t\t}\n\t\tfor (var i = startIndex + 1; i < arrayToSearch.length; i++) {\n\t\t\tvar currentItem = arrayToSearch[i];\n\t\t\tif (filterCallback(currentItem)) {\n\t\t\t\treturn currentItem;\n\t\t\t}\n\t\t}\n\t};\n\thelpers$1.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {\n\t\t// Default to end of the array\n\t\tif (helpers$1.isNullOrUndef(startIndex)) {\n\t\t\tstartIndex = arrayToSearch.length;\n\t\t}\n\t\tfor (var i = startIndex - 1; i >= 0; i--) {\n\t\t\tvar currentItem = arrayToSearch[i];\n\t\t\tif (filterCallback(currentItem)) {\n\t\t\t\treturn currentItem;\n\t\t\t}\n\t\t}\n\t};\n\n\t// -- Math methods\n\thelpers$1.isNumber = function(n) {\n\t\treturn !isNaN(parseFloat(n)) && isFinite(n);\n\t};\n\thelpers$1.almostEquals = function(x, y, epsilon) {\n\t\treturn Math.abs(x - y) < epsilon;\n\t};\n\thelpers$1.almostWhole = function(x, epsilon) {\n\t\tvar rounded = Math.round(x);\n\t\treturn (((rounded - epsilon) < x) && ((rounded + epsilon) > x));\n\t};\n\thelpers$1.max = function(array) {\n\t\treturn array.reduce(function(max, value) {\n\t\t\tif (!isNaN(value)) {\n\t\t\t\treturn Math.max(max, value);\n\t\t\t}\n\t\t\treturn max;\n\t\t}, Number.NEGATIVE_INFINITY);\n\t};\n\thelpers$1.min = function(array) {\n\t\treturn array.reduce(function(min, value) {\n\t\t\tif (!isNaN(value)) {\n\t\t\t\treturn Math.min(min, value);\n\t\t\t}\n\t\t\treturn min;\n\t\t}, Number.POSITIVE_INFINITY);\n\t};\n\thelpers$1.sign = Math.sign ?\n\t\tfunction(x) {\n\t\t\treturn Math.sign(x);\n\t\t} :\n\t\tfunction(x) {\n\t\t\tx = +x; // convert to a number\n\t\t\tif (x === 0 || isNaN(x)) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\treturn x > 0 ? 1 : -1;\n\t\t};\n\thelpers$1.log10 = Math.log10 ?\n\t\tfunction(x) {\n\t\t\treturn Math.log10(x);\n\t\t} :\n\t\tfunction(x) {\n\t\t\tvar exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.\n\t\t\t// Check for whole powers of 10,\n\t\t\t// which due to floating point rounding error should be corrected.\n\t\t\tvar powerOf10 = Math.round(exponent);\n\t\t\tvar isPowerOf10 = x === Math.pow(10, powerOf10);\n\n\t\t\treturn isPowerOf10 ? powerOf10 : exponent;\n\t\t};\n\thelpers$1.toRadians = function(degrees) {\n\t\treturn degrees * (Math.PI / 180);\n\t};\n\thelpers$1.toDegrees = function(radians) {\n\t\treturn radians * (180 / Math.PI);\n\t};\n\n\t/**\n\t * Returns the number of decimal places\n\t * i.e. the number of digits after the decimal point, of the value of this Number.\n\t * @param {number} x - A number.\n\t * @returns {number} The number of decimal places.\n\t * @private\n\t */\n\thelpers$1._decimalPlaces = function(x) {\n\t\tif (!helpers$1.isFinite(x)) {\n\t\t\treturn;\n\t\t}\n\t\tvar e = 1;\n\t\tvar p = 0;\n\t\twhile (Math.round(x * e) / e !== x) {\n\t\t\te *= 10;\n\t\t\tp++;\n\t\t}\n\t\treturn p;\n\t};\n\n\t// Gets the angle from vertical upright to the point about a centre.\n\thelpers$1.getAngleFromPoint = function(centrePoint, anglePoint) {\n\t\tvar distanceFromXCenter = anglePoint.x - centrePoint.x;\n\t\tvar distanceFromYCenter = anglePoint.y - centrePoint.y;\n\t\tvar radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n\n\t\tvar angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n\n\t\tif (angle < (-0.5 * Math.PI)) {\n\t\t\tangle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n\t\t}\n\n\t\treturn {\n\t\t\tangle: angle,\n\t\t\tdistance: radialDistanceFromCenter\n\t\t};\n\t};\n\thelpers$1.distanceBetweenPoints = function(pt1, pt2) {\n\t\treturn Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n\t};\n\n\t/**\n\t * Provided for backward compatibility, not available anymore\n\t * @function Chart.helpers.aliasPixel\n\t * @deprecated since version 2.8.0\n\t * @todo remove at version 3\n\t */\n\thelpers$1.aliasPixel = function(pixelWidth) {\n\t\treturn (pixelWidth % 2 === 0) ? 0 : 0.5;\n\t};\n\n\t/**\n\t * Returns the aligned pixel value to avoid anti-aliasing blur\n\t * @param {Chart} chart - The chart instance.\n\t * @param {number} pixel - A pixel value.\n\t * @param {number} width - The width of the element.\n\t * @returns {number} The aligned pixel value.\n\t * @private\n\t */\n\thelpers$1._alignPixel = function(chart, pixel, width) {\n\t\tvar devicePixelRatio = chart.currentDevicePixelRatio;\n\t\tvar halfWidth = width / 2;\n\t\treturn Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n\t};\n\n\thelpers$1.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {\n\t\t// Props to Rob Spencer at scaled innovation for his post on splining between points\n\t\t// http://scaledinnovation.com/analytics/splines/aboutSplines.html\n\n\t\t// This function must also respect \"skipped\" points\n\n\t\tvar previous = firstPoint.skip ? middlePoint : firstPoint;\n\t\tvar current = middlePoint;\n\t\tvar next = afterPoint.skip ? middlePoint : afterPoint;\n\n\t\tvar d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));\n\t\tvar d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));\n\n\t\tvar s01 = d01 / (d01 + d12);\n\t\tvar s12 = d12 / (d01 + d12);\n\n\t\t// If all points are the same, s01 & s02 will be inf\n\t\ts01 = isNaN(s01) ? 0 : s01;\n\t\ts12 = isNaN(s12) ? 0 : s12;\n\n\t\tvar fa = t * s01; // scaling factor for triangle Ta\n\t\tvar fb = t * s12;\n\n\t\treturn {\n\t\t\tprevious: {\n\t\t\t\tx: current.x - fa * (next.x - previous.x),\n\t\t\t\ty: current.y - fa * (next.y - previous.y)\n\t\t\t},\n\t\t\tnext: {\n\t\t\t\tx: current.x + fb * (next.x - previous.x),\n\t\t\t\ty: current.y + fb * (next.y - previous.y)\n\t\t\t}\n\t\t};\n\t};\n\thelpers$1.EPSILON = Number.EPSILON || 1e-14;\n\thelpers$1.splineCurveMonotone = function(points) {\n\t\t// This function calculates Bézier control points in a similar way than |splineCurve|,\n\t\t// but preserves monotonicity of the provided data and ensures no local extremums are added\n\t\t// between the dataset discrete points due to the interpolation.\n\t\t// See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n\n\t\tvar pointsWithTangents = (points || []).map(function(point) {\n\t\t\treturn {\n\t\t\t\tmodel: point._model,\n\t\t\t\tdeltaK: 0,\n\t\t\t\tmK: 0\n\t\t\t};\n\t\t});\n\n\t\t// Calculate slopes (deltaK) and initialize tangents (mK)\n\t\tvar pointsLen = pointsWithTangents.length;\n\t\tvar i, pointBefore, pointCurrent, pointAfter;\n\t\tfor (i = 0; i < pointsLen; ++i) {\n\t\t\tpointCurrent = pointsWithTangents[i];\n\t\t\tif (pointCurrent.model.skip) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tpointBefore = i > 0 ? pointsWithTangents[i - 1] : null;\n\t\t\tpointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;\n\t\t\tif (pointAfter && !pointAfter.model.skip) {\n\t\t\t\tvar slopeDeltaX = (pointAfter.model.x - pointCurrent.model.x);\n\n\t\t\t\t// In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n\t\t\t\tpointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;\n\t\t\t}\n\n\t\t\tif (!pointBefore || pointBefore.model.skip) {\n\t\t\t\tpointCurrent.mK = pointCurrent.deltaK;\n\t\t\t} else if (!pointAfter || pointAfter.model.skip) {\n\t\t\t\tpointCurrent.mK = pointBefore.deltaK;\n\t\t\t} else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {\n\t\t\t\tpointCurrent.mK = 0;\n\t\t\t} else {\n\t\t\t\tpointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;\n\t\t\t}\n\t\t}\n\n\t\t// Adjust tangents to ensure monotonic properties\n\t\tvar alphaK, betaK, tauK, squaredMagnitude;\n\t\tfor (i = 0; i < pointsLen - 1; ++i) {\n\t\t\tpointCurrent = pointsWithTangents[i];\n\t\t\tpointAfter = pointsWithTangents[i + 1];\n\t\t\tif (pointCurrent.model.skip || pointAfter.model.skip) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (helpers$1.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {\n\t\t\t\tpointCurrent.mK = pointAfter.mK = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\talphaK = pointCurrent.mK / pointCurrent.deltaK;\n\t\t\tbetaK = pointAfter.mK / pointCurrent.deltaK;\n\t\t\tsquaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n\t\t\tif (squaredMagnitude <= 9) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttauK = 3 / Math.sqrt(squaredMagnitude);\n\t\t\tpointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;\n\t\t\tpointAfter.mK = betaK * tauK * pointCurrent.deltaK;\n\t\t}\n\n\t\t// Compute control points\n\t\tvar deltaX;\n\t\tfor (i = 0; i < pointsLen; ++i) {\n\t\t\tpointCurrent = pointsWithTangents[i];\n\t\t\tif (pointCurrent.model.skip) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tpointBefore = i > 0 ? pointsWithTangents[i - 1] : null;\n\t\t\tpointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;\n\t\t\tif (pointBefore && !pointBefore.model.skip) {\n\t\t\t\tdeltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;\n\t\t\t\tpointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;\n\t\t\t\tpointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;\n\t\t\t}\n\t\t\tif (pointAfter && !pointAfter.model.skip) {\n\t\t\t\tdeltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;\n\t\t\t\tpointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;\n\t\t\t\tpointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;\n\t\t\t}\n\t\t}\n\t};\n\thelpers$1.nextItem = function(collection, index, loop) {\n\t\tif (loop) {\n\t\t\treturn index >= collection.length - 1 ? collection[0] : collection[index + 1];\n\t\t}\n\t\treturn index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];\n\t};\n\thelpers$1.previousItem = function(collection, index, loop) {\n\t\tif (loop) {\n\t\t\treturn index <= 0 ? collection[collection.length - 1] : collection[index - 1];\n\t\t}\n\t\treturn index <= 0 ? collection[0] : collection[index - 1];\n\t};\n\t// Implementation of the nice number algorithm used in determining where axis labels will go\n\thelpers$1.niceNum = function(range, round) {\n\t\tvar exponent = Math.floor(helpers$1.log10(range));\n\t\tvar fraction = range / Math.pow(10, exponent);\n\t\tvar niceFraction;\n\n\t\tif (round) {\n\t\t\tif (fraction < 1.5) {\n\t\t\t\tniceFraction = 1;\n\t\t\t} else if (fraction < 3) {\n\t\t\t\tniceFraction = 2;\n\t\t\t} else if (fraction < 7) {\n\t\t\t\tniceFraction = 5;\n\t\t\t} else {\n\t\t\t\tniceFraction = 10;\n\t\t\t}\n\t\t} else if (fraction <= 1.0) {\n\t\t\tniceFraction = 1;\n\t\t} else if (fraction <= 2) {\n\t\t\tniceFraction = 2;\n\t\t} else if (fraction <= 5) {\n\t\t\tniceFraction = 5;\n\t\t} else {\n\t\t\tniceFraction = 10;\n\t\t}\n\n\t\treturn niceFraction * Math.pow(10, exponent);\n\t};\n\t// Request animation polyfill - https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/\n\thelpers$1.requestAnimFrame = (function() {\n\t\tif (typeof window === 'undefined') {\n\t\t\treturn function(callback) {\n\t\t\t\tcallback();\n\t\t\t};\n\t\t}\n\t\treturn window.requestAnimationFrame ||\n\t\t\twindow.webkitRequestAnimationFrame ||\n\t\t\twindow.mozRequestAnimationFrame ||\n\t\t\twindow.oRequestAnimationFrame ||\n\t\t\twindow.msRequestAnimationFrame ||\n\t\t\tfunction(callback) {\n\t\t\t\treturn window.setTimeout(callback, 1000 / 60);\n\t\t\t};\n\t}());\n\t// -- DOM methods\n\thelpers$1.getRelativePosition = function(evt, chart) {\n\t\tvar mouseX, mouseY;\n\t\tvar e = evt.originalEvent || evt;\n\t\tvar canvas = evt.target || evt.srcElement;\n\t\tvar boundingRect = canvas.getBoundingClientRect();\n\n\t\tvar touches = e.touches;\n\t\tif (touches && touches.length > 0) {\n\t\t\tmouseX = touches[0].clientX;\n\t\t\tmouseY = touches[0].clientY;\n\n\t\t} else {\n\t\t\tmouseX = e.clientX;\n\t\t\tmouseY = e.clientY;\n\t\t}\n\n\t\t// Scale mouse coordinates into canvas coordinates\n\t\t// by following the pattern laid out by 'jerryj' in the comments of\n\t\t// https://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/\n\t\tvar paddingLeft = parseFloat(helpers$1.getStyle(canvas, 'padding-left'));\n\t\tvar paddingTop = parseFloat(helpers$1.getStyle(canvas, 'padding-top'));\n\t\tvar paddingRight = parseFloat(helpers$1.getStyle(canvas, 'padding-right'));\n\t\tvar paddingBottom = parseFloat(helpers$1.getStyle(canvas, 'padding-bottom'));\n\t\tvar width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;\n\t\tvar height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;\n\n\t\t// We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However\n\t\t// the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here\n\t\tmouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);\n\t\tmouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);\n\n\t\treturn {\n\t\t\tx: mouseX,\n\t\t\ty: mouseY\n\t\t};\n\n\t};\n\n\t// Private helper function to convert max-width/max-height values that may be percentages into a number\n\tfunction parseMaxStyle(styleValue, node, parentProperty) {\n\t\tvar valueInPixels;\n\t\tif (typeof styleValue === 'string') {\n\t\t\tvalueInPixels = parseInt(styleValue, 10);\n\n\t\t\tif (styleValue.indexOf('%') !== -1) {\n\t\t\t\t// percentage * size in dimension\n\t\t\t\tvalueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n\t\t\t}\n\t\t} else {\n\t\t\tvalueInPixels = styleValue;\n\t\t}\n\n\t\treturn valueInPixels;\n\t}\n\n\t/**\n\t * Returns if the given value contains an effective constraint.\n\t * @private\n\t */\n\tfunction isConstrainedValue(value) {\n\t\treturn value !== undefined && value !== null && value !== 'none';\n\t}\n\n\t/**\n\t * Returns the max width or height of the given DOM node in a cross-browser compatible fashion\n\t * @param {HTMLElement} domNode - the node to check the constraint on\n\t * @param {string} maxStyle - the style that defines the maximum for the direction we are using ('max-width' / 'max-height')\n\t * @param {string} percentageProperty - property of parent to use when calculating width as a percentage\n\t * @see {@link https://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser}\n\t */\n\tfunction getConstraintDimension(domNode, maxStyle, percentageProperty) {\n\t\tvar view = document.defaultView;\n\t\tvar parentNode = helpers$1._getParentNode(domNode);\n\t\tvar constrainedNode = view.getComputedStyle(domNode)[maxStyle];\n\t\tvar constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];\n\t\tvar hasCNode = isConstrainedValue(constrainedNode);\n\t\tvar hasCContainer = isConstrainedValue(constrainedContainer);\n\t\tvar infinity = Number.POSITIVE_INFINITY;\n\n\t\tif (hasCNode || hasCContainer) {\n\t\t\treturn Math.min(\n\t\t\t\thasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,\n\t\t\t\thasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);\n\t\t}\n\n\t\treturn 'none';\n\t}\n\t// returns Number or undefined if no constraint\n\thelpers$1.getConstraintWidth = function(domNode) {\n\t\treturn getConstraintDimension(domNode, 'max-width', 'clientWidth');\n\t};\n\t// returns Number or undefined if no constraint\n\thelpers$1.getConstraintHeight = function(domNode) {\n\t\treturn getConstraintDimension(domNode, 'max-height', 'clientHeight');\n\t};\n\t/**\n\t * @private\n \t */\n\thelpers$1._calculatePadding = function(container, padding, parentDimension) {\n\t\tpadding = helpers$1.getStyle(container, padding);\n\n\t\treturn padding.indexOf('%') > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);\n\t};\n\t/**\n\t * @private\n\t */\n\thelpers$1._getParentNode = function(domNode) {\n\t\tvar parent = domNode.parentNode;\n\t\tif (parent && parent.toString() === '[object ShadowRoot]') {\n\t\t\tparent = parent.host;\n\t\t}\n\t\treturn parent;\n\t};\n\thelpers$1.getMaximumWidth = function(domNode) {\n\t\tvar container = helpers$1._getParentNode(domNode);\n\t\tif (!container) {\n\t\t\treturn domNode.clientWidth;\n\t\t}\n\n\t\tvar clientWidth = container.clientWidth;\n\t\tvar paddingLeft = helpers$1._calculatePadding(container, 'padding-left', clientWidth);\n\t\tvar paddingRight = helpers$1._calculatePadding(container, 'padding-right', clientWidth);\n\n\t\tvar w = clientWidth - paddingLeft - paddingRight;\n\t\tvar cw = helpers$1.getConstraintWidth(domNode);\n\t\treturn isNaN(cw) ? w : Math.min(w, cw);\n\t};\n\thelpers$1.getMaximumHeight = function(domNode) {\n\t\tvar container = helpers$1._getParentNode(domNode);\n\t\tif (!container) {\n\t\t\treturn domNode.clientHeight;\n\t\t}\n\n\t\tvar clientHeight = container.clientHeight;\n\t\tvar paddingTop = helpers$1._calculatePadding(container, 'padding-top', clientHeight);\n\t\tvar paddingBottom = helpers$1._calculatePadding(container, 'padding-bottom', clientHeight);\n\n\t\tvar h = clientHeight - paddingTop - paddingBottom;\n\t\tvar ch = helpers$1.getConstraintHeight(domNode);\n\t\treturn isNaN(ch) ? h : Math.min(h, ch);\n\t};\n\thelpers$1.getStyle = function(el, property) {\n\t\treturn el.currentStyle ?\n\t\t\tel.currentStyle[property] :\n\t\t\tdocument.defaultView.getComputedStyle(el, null).getPropertyValue(property);\n\t};\n\thelpers$1.retinaScale = function(chart, forceRatio) {\n\t\tvar pixelRatio = chart.currentDevicePixelRatio = forceRatio || (typeof window !== 'undefined' && window.devicePixelRatio) || 1;\n\t\tif (pixelRatio === 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar canvas = chart.canvas;\n\t\tvar height = chart.height;\n\t\tvar width = chart.width;\n\n\t\tcanvas.height = height * pixelRatio;\n\t\tcanvas.width = width * pixelRatio;\n\t\tchart.ctx.scale(pixelRatio, pixelRatio);\n\n\t\t// If no style has been set on the canvas, the render size is used as display size,\n\t\t// making the chart visually bigger, so let's enforce it to the \"correct\" values.\n\t\t// See https://github.com/chartjs/Chart.js/issues/3575\n\t\tif (!canvas.style.height && !canvas.style.width) {\n\t\t\tcanvas.style.height = height + 'px';\n\t\t\tcanvas.style.width = width + 'px';\n\t\t}\n\t};\n\t// -- Canvas methods\n\thelpers$1.fontString = function(pixelSize, fontStyle, fontFamily) {\n\t\treturn fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n\t};\n\thelpers$1.longestText = function(ctx, font, arrayOfThings, cache) {\n\t\tcache = cache || {};\n\t\tvar data = cache.data = cache.data || {};\n\t\tvar gc = cache.garbageCollect = cache.garbageCollect || [];\n\n\t\tif (cache.font !== font) {\n\t\t\tdata = cache.data = {};\n\t\t\tgc = cache.garbageCollect = [];\n\t\t\tcache.font = font;\n\t\t}\n\n\t\tctx.font = font;\n\t\tvar longest = 0;\n\t\thelpers$1.each(arrayOfThings, function(thing) {\n\t\t\t// Undefined strings and arrays should not be measured\n\t\t\tif (thing !== undefined && thing !== null && helpers$1.isArray(thing) !== true) {\n\t\t\t\tlongest = helpers$1.measureText(ctx, data, gc, longest, thing);\n\t\t\t} else if (helpers$1.isArray(thing)) {\n\t\t\t\t// if it is an array lets measure each element\n\t\t\t\t// to do maybe simplify this function a bit so we can do this more recursively?\n\t\t\t\thelpers$1.each(thing, function(nestedThing) {\n\t\t\t\t\t// Undefined strings and arrays should not be measured\n\t\t\t\t\tif (nestedThing !== undefined && nestedThing !== null && !helpers$1.isArray(nestedThing)) {\n\t\t\t\t\t\tlongest = helpers$1.measureText(ctx, data, gc, longest, nestedThing);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tvar gcLen = gc.length / 2;\n\t\tif (gcLen > arrayOfThings.length) {\n\t\t\tfor (var i = 0; i < gcLen; i++) {\n\t\t\t\tdelete data[gc[i]];\n\t\t\t}\n\t\t\tgc.splice(0, gcLen);\n\t\t}\n\t\treturn longest;\n\t};\n\thelpers$1.measureText = function(ctx, data, gc, longest, string) {\n\t\tvar textWidth = data[string];\n\t\tif (!textWidth) {\n\t\t\ttextWidth = data[string] = ctx.measureText(string).width;\n\t\t\tgc.push(string);\n\t\t}\n\t\tif (textWidth > longest) {\n\t\t\tlongest = textWidth;\n\t\t}\n\t\treturn longest;\n\t};\n\thelpers$1.numberOfLabelLines = function(arrayOfThings) {\n\t\tvar numberOfLines = 1;\n\t\thelpers$1.each(arrayOfThings, function(thing) {\n\t\t\tif (helpers$1.isArray(thing)) {\n\t\t\t\tif (thing.length > numberOfLines) {\n\t\t\t\t\tnumberOfLines = thing.length;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn numberOfLines;\n\t};\n\n\thelpers$1.color = !chartjsColor ?\n\t\tfunction(value) {\n\t\t\tconsole.error('Color.js not found!');\n\t\t\treturn value;\n\t\t} :\n\t\tfunction(value) {\n\t\t\t/* global CanvasGradient */\n\t\t\tif (value instanceof CanvasGradient) {\n\t\t\t\tvalue = core_defaults.global.defaultColor;\n\t\t\t}\n\n\t\t\treturn chartjsColor(value);\n\t\t};\n\n\thelpers$1.getHoverColor = function(colorValue) {\n\t\t/* global CanvasPattern */\n\t\treturn (colorValue instanceof CanvasPattern || colorValue instanceof CanvasGradient) ?\n\t\t\tcolorValue :\n\t\t\thelpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();\n\t};\n};\n\nfunction abstract() {\n\tthrow new Error(\n\t\t'This method is not implemented: either no adapter can ' +\n\t\t'be found or an incomplete integration was provided.'\n\t);\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\n\n/**\n * Currently supported unit string values.\n * @typedef {('millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year')}\n * @memberof Chart._adapters._date\n * @name Unit\n */\n\n/**\n * @class\n */\nfunction DateAdapter(options) {\n\tthis.options = options || {};\n}\n\nhelpers$1.extend(DateAdapter.prototype, /** @lends DateAdapter */ {\n\t/**\n\t * Returns a map of time formats for the supported formatting units defined\n\t * in Unit as well as 'datetime' representing a detailed date/time string.\n\t * @returns {{string: string}}\n\t */\n\tformats: abstract,\n\n\t/**\n\t * Parses the given `value` and return the associated timestamp.\n\t * @param {any} value - the value to parse (usually comes from the data)\n\t * @param {string} [format] - the expected data format\n\t * @returns {(number|null)}\n\t * @function\n\t */\n\tparse: abstract,\n\n\t/**\n\t * Returns the formatted date in the specified `format` for a given `timestamp`.\n\t * @param {number} timestamp - the timestamp to format\n\t * @param {string} format - the date/time token\n\t * @return {string}\n\t * @function\n\t */\n\tformat: abstract,\n\n\t/**\n\t * Adds the specified `amount` of `unit` to the given `timestamp`.\n\t * @param {number} timestamp - the input timestamp\n\t * @param {number} amount - the amount to add\n\t * @param {Unit} unit - the unit as string\n\t * @return {number}\n\t * @function\n\t */\n\tadd: abstract,\n\n\t/**\n\t * Returns the number of `unit` between the given timestamps.\n\t * @param {number} max - the input timestamp (reference)\n\t * @param {number} min - the timestamp to substract\n\t * @param {Unit} unit - the unit as string\n\t * @return {number}\n\t * @function\n\t */\n\tdiff: abstract,\n\n\t/**\n\t * Returns start of `unit` for the given `timestamp`.\n\t * @param {number} timestamp - the input timestamp\n\t * @param {Unit} unit - the unit as string\n\t * @param {number} [weekday] - the ISO day of the week with 1 being Monday\n\t * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n\t * @function\n\t */\n\tstartOf: abstract,\n\n\t/**\n\t * Returns end of `unit` for the given `timestamp`.\n\t * @param {number} timestamp - the input timestamp\n\t * @param {Unit} unit - the unit as string\n\t * @function\n\t */\n\tendOf: abstract,\n\n\t// DEPRECATIONS\n\n\t/**\n\t * Provided for backward compatibility for scale.getValueForPixel(),\n\t * this method should be overridden only by the moment adapter.\n\t * @deprecated since version 2.8.0\n\t * @todo remove at version 3\n\t * @private\n\t */\n\t_create: function(value) {\n\t\treturn value;\n\t}\n});\n\nDateAdapter.override = function(members) {\n\thelpers$1.extend(DateAdapter.prototype, members);\n};\n\nvar _date = DateAdapter;\n\nvar core_adapters = {\n\t_date: _date\n};\n\n/**\n * Namespace to hold static tick generation functions\n * @namespace Chart.Ticks\n */\nvar core_ticks = {\n\t/**\n\t * Namespace to hold formatters for different types of ticks\n\t * @namespace Chart.Ticks.formatters\n\t */\n\tformatters: {\n\t\t/**\n\t\t * Formatter for value labels\n\t\t * @method Chart.Ticks.formatters.values\n\t\t * @param value the value to display\n\t\t * @return {string|string[]} the label to display\n\t\t */\n\t\tvalues: function(value) {\n\t\t\treturn helpers$1.isArray(value) ? value : '' + value;\n\t\t},\n\n\t\t/**\n\t\t * Formatter for linear numeric ticks\n\t\t * @method Chart.Ticks.formatters.linear\n\t\t * @param tickValue {number} the value to be formatted\n\t\t * @param index {number} the position of the tickValue parameter in the ticks array\n\t\t * @param ticks {number[]} the list of ticks being converted\n\t\t * @return {string} string representation of the tickValue parameter\n\t\t */\n\t\tlinear: function(tickValue, index, ticks) {\n\t\t\t// If we have lots of ticks, don't use the ones\n\t\t\tvar delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];\n\n\t\t\t// If we have a number like 2.5 as the delta, figure out how many decimal places we need\n\t\t\tif (Math.abs(delta) > 1) {\n\t\t\t\tif (tickValue !== Math.floor(tickValue)) {\n\t\t\t\t\t// not an integer\n\t\t\t\t\tdelta = tickValue - Math.floor(tickValue);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar logDelta = helpers$1.log10(Math.abs(delta));\n\t\t\tvar tickString = '';\n\n\t\t\tif (tickValue !== 0) {\n\t\t\t\tvar maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));\n\t\t\t\tif (maxTick < 1e-4) { // all ticks are small numbers; use scientific notation\n\t\t\t\t\tvar logTick = helpers$1.log10(Math.abs(tickValue));\n\t\t\t\t\ttickString = tickValue.toExponential(Math.floor(logTick) - Math.floor(logDelta));\n\t\t\t\t} else {\n\t\t\t\t\tvar numDecimal = -1 * Math.floor(logDelta);\n\t\t\t\t\tnumDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places\n\t\t\t\t\ttickString = tickValue.toFixed(numDecimal);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttickString = '0'; // never show decimal places for 0\n\t\t\t}\n\n\t\t\treturn tickString;\n\t\t},\n\n\t\tlogarithmic: function(tickValue, index, ticks) {\n\t\t\tvar remain = tickValue / (Math.pow(10, Math.floor(helpers$1.log10(tickValue))));\n\n\t\t\tif (tickValue === 0) {\n\t\t\t\treturn '0';\n\t\t\t} else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {\n\t\t\t\treturn tickValue.toExponential();\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\t}\n};\n\nvar valueOrDefault$9 = helpers$1.valueOrDefault;\nvar valueAtIndexOrDefault = helpers$1.valueAtIndexOrDefault;\n\ncore_defaults._set('scale', {\n\tdisplay: true,\n\tposition: 'left',\n\toffset: false,\n\n\t// grid line settings\n\tgridLines: {\n\t\tdisplay: true,\n\t\tcolor: 'rgba(0, 0, 0, 0.1)',\n\t\tlineWidth: 1,\n\t\tdrawBorder: true,\n\t\tdrawOnChartArea: true,\n\t\tdrawTicks: true,\n\t\ttickMarkLength: 10,\n\t\tzeroLineWidth: 1,\n\t\tzeroLineColor: 'rgba(0,0,0,0.25)',\n\t\tzeroLineBorderDash: [],\n\t\tzeroLineBorderDashOffset: 0.0,\n\t\toffsetGridLines: false,\n\t\tborderDash: [],\n\t\tborderDashOffset: 0.0\n\t},\n\n\t// scale label\n\tscaleLabel: {\n\t\t// display property\n\t\tdisplay: false,\n\n\t\t// actual label\n\t\tlabelString: '',\n\n\t\t// top/bottom padding\n\t\tpadding: {\n\t\t\ttop: 4,\n\t\t\tbottom: 4\n\t\t}\n\t},\n\n\t// label settings\n\tticks: {\n\t\tbeginAtZero: false,\n\t\tminRotation: 0,\n\t\tmaxRotation: 50,\n\t\tmirror: false,\n\t\tpadding: 0,\n\t\treverse: false,\n\t\tdisplay: true,\n\t\tautoSkip: true,\n\t\tautoSkipPadding: 0,\n\t\tlabelOffset: 0,\n\t\t// We pass through arrays to be rendered as multiline labels, we convert Others to strings here.\n\t\tcallback: core_ticks.formatters.values,\n\t\tminor: {},\n\t\tmajor: {}\n\t}\n});\n\nfunction labelsFromTicks(ticks) {\n\tvar labels = [];\n\tvar i, ilen;\n\n\tfor (i = 0, ilen = ticks.length; i < ilen; ++i) {\n\t\tlabels.push(ticks[i].label);\n\t}\n\n\treturn labels;\n}\n\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n\tvar lineValue = scale.getPixelForTick(index);\n\n\tif (offsetGridLines) {\n\t\tif (scale.getTicks().length === 1) {\n\t\t\tlineValue -= scale.isHorizontal() ?\n\t\t\t\tMath.max(lineValue - scale.left, scale.right - lineValue) :\n\t\t\t\tMath.max(lineValue - scale.top, scale.bottom - lineValue);\n\t\t} else if (index === 0) {\n\t\t\tlineValue -= (scale.getPixelForTick(1) - lineValue) / 2;\n\t\t} else {\n\t\t\tlineValue -= (lineValue - scale.getPixelForTick(index - 1)) / 2;\n\t\t}\n\t}\n\treturn lineValue;\n}\n\nfunction computeTextSize(context, tick, font) {\n\treturn helpers$1.isArray(tick) ?\n\t\thelpers$1.longestText(context, font, tick) :\n\t\tcontext.measureText(tick).width;\n}\n\nvar core_scale = core_element.extend({\n\t/**\n\t * Get the padding needed for the scale\n\t * @method getPadding\n\t * @private\n\t * @returns {Padding} the necessary padding\n\t */\n\tgetPadding: function() {\n\t\tvar me = this;\n\t\treturn {\n\t\t\tleft: me.paddingLeft || 0,\n\t\t\ttop: me.paddingTop || 0,\n\t\t\tright: me.paddingRight || 0,\n\t\t\tbottom: me.paddingBottom || 0\n\t\t};\n\t},\n\n\t/**\n\t * Returns the scale tick objects ({label, major})\n\t * @since 2.7\n\t */\n\tgetTicks: function() {\n\t\treturn this._ticks;\n\t},\n\n\t// These methods are ordered by lifecyle. Utilities then follow.\n\t// Any function defined here is inherited by all scale types.\n\t// Any function can be extended by the scale type\n\n\tmergeTicksOptions: function() {\n\t\tvar ticks = this.options.ticks;\n\t\tif (ticks.minor === false) {\n\t\t\tticks.minor = {\n\t\t\t\tdisplay: false\n\t\t\t};\n\t\t}\n\t\tif (ticks.major === false) {\n\t\t\tticks.major = {\n\t\t\t\tdisplay: false\n\t\t\t};\n\t\t}\n\t\tfor (var key in ticks) {\n\t\t\tif (key !== 'major' && key !== 'minor') {\n\t\t\t\tif (typeof ticks.minor[key] === 'undefined') {\n\t\t\t\t\tticks.minor[key] = ticks[key];\n\t\t\t\t}\n\t\t\t\tif (typeof ticks.major[key] === 'undefined') {\n\t\t\t\t\tticks.major[key] = ticks[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tbeforeUpdate: function() {\n\t\thelpers$1.callback(this.options.beforeUpdate, [this]);\n\t},\n\n\tupdate: function(maxWidth, maxHeight, margins) {\n\t\tvar me = this;\n\t\tvar i, ilen, labels, label, ticks, tick;\n\n\t\t// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\t\tme.beforeUpdate();\n\n\t\t// Absorb the master measurements\n\t\tme.maxWidth = maxWidth;\n\t\tme.maxHeight = maxHeight;\n\t\tme.margins = helpers$1.extend({\n\t\t\tleft: 0,\n\t\t\tright: 0,\n\t\t\ttop: 0,\n\t\t\tbottom: 0\n\t\t}, margins);\n\n\t\tme._maxLabelLines = 0;\n\t\tme.longestLabelWidth = 0;\n\t\tme.longestTextCache = me.longestTextCache || {};\n\n\t\t// Dimensions\n\t\tme.beforeSetDimensions();\n\t\tme.setDimensions();\n\t\tme.afterSetDimensions();\n\n\t\t// Data min/max\n\t\tme.beforeDataLimits();\n\t\tme.determineDataLimits();\n\t\tme.afterDataLimits();\n\n\t\t// Ticks - `this.ticks` is now DEPRECATED!\n\t\t// Internal ticks are now stored as objects in the PRIVATE `this._ticks` member\n\t\t// and must not be accessed directly from outside this class. `this.ticks` being\n\t\t// around for long time and not marked as private, we can't change its structure\n\t\t// without unexpected breaking changes. If you need to access the scale ticks,\n\t\t// use scale.getTicks() instead.\n\n\t\tme.beforeBuildTicks();\n\n\t\t// New implementations should return an array of objects but for BACKWARD COMPAT,\n\t\t// we still support no return (`this.ticks` internally set by calling this method).\n\t\tticks = me.buildTicks() || [];\n\n\t\t// Allow modification of ticks in callback.\n\t\tticks = me.afterBuildTicks(ticks) || ticks;\n\n\t\tme.beforeTickToLabelConversion();\n\n\t\t// New implementations should return the formatted tick labels but for BACKWARD\n\t\t// COMPAT, we still support no return (`this.ticks` internally changed by calling\n\t\t// this method and supposed to contain only string values).\n\t\tlabels = me.convertTicksToLabels(ticks) || me.ticks;\n\n\t\tme.afterTickToLabelConversion();\n\n\t\tme.ticks = labels;   // BACKWARD COMPATIBILITY\n\n\t\t// IMPORTANT: from this point, we consider that `this.ticks` will NEVER change!\n\n\t\t// BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)\n\t\tfor (i = 0, ilen = labels.length; i < ilen; ++i) {\n\t\t\tlabel = labels[i];\n\t\t\ttick = ticks[i];\n\t\t\tif (!tick) {\n\t\t\t\tticks.push(tick = {\n\t\t\t\t\tlabel: label,\n\t\t\t\t\tmajor: false\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\ttick.label = label;\n\t\t\t}\n\t\t}\n\n\t\tme._ticks = ticks;\n\n\t\t// Tick Rotation\n\t\tme.beforeCalculateTickRotation();\n\t\tme.calculateTickRotation();\n\t\tme.afterCalculateTickRotation();\n\t\t// Fit\n\t\tme.beforeFit();\n\t\tme.fit();\n\t\tme.afterFit();\n\t\t//\n\t\tme.afterUpdate();\n\n\t\treturn me.minSize;\n\n\t},\n\tafterUpdate: function() {\n\t\thelpers$1.callback(this.options.afterUpdate, [this]);\n\t},\n\n\t//\n\n\tbeforeSetDimensions: function() {\n\t\thelpers$1.callback(this.options.beforeSetDimensions, [this]);\n\t},\n\tsetDimensions: function() {\n\t\tvar me = this;\n\t\t// Set the unconstrained dimension before label rotation\n\t\tif (me.isHorizontal()) {\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.width = me.maxWidth;\n\t\t\tme.left = 0;\n\t\t\tme.right = me.width;\n\t\t} else {\n\t\t\tme.height = me.maxHeight;\n\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.top = 0;\n\t\t\tme.bottom = me.height;\n\t\t}\n\n\t\t// Reset padding\n\t\tme.paddingLeft = 0;\n\t\tme.paddingTop = 0;\n\t\tme.paddingRight = 0;\n\t\tme.paddingBottom = 0;\n\t},\n\tafterSetDimensions: function() {\n\t\thelpers$1.callback(this.options.afterSetDimensions, [this]);\n\t},\n\n\t// Data limits\n\tbeforeDataLimits: function() {\n\t\thelpers$1.callback(this.options.beforeDataLimits, [this]);\n\t},\n\tdetermineDataLimits: helpers$1.noop,\n\tafterDataLimits: function() {\n\t\thelpers$1.callback(this.options.afterDataLimits, [this]);\n\t},\n\n\t//\n\tbeforeBuildTicks: function() {\n\t\thelpers$1.callback(this.options.beforeBuildTicks, [this]);\n\t},\n\tbuildTicks: helpers$1.noop,\n\tafterBuildTicks: function(ticks) {\n\t\tvar me = this;\n\t\t// ticks is empty for old axis implementations here\n\t\tif (helpers$1.isArray(ticks) && ticks.length) {\n\t\t\treturn helpers$1.callback(me.options.afterBuildTicks, [me, ticks]);\n\t\t}\n\t\t// Support old implementations (that modified `this.ticks` directly in buildTicks)\n\t\tme.ticks = helpers$1.callback(me.options.afterBuildTicks, [me, me.ticks]) || me.ticks;\n\t\treturn ticks;\n\t},\n\n\tbeforeTickToLabelConversion: function() {\n\t\thelpers$1.callback(this.options.beforeTickToLabelConversion, [this]);\n\t},\n\tconvertTicksToLabels: function() {\n\t\tvar me = this;\n\t\t// Convert ticks to strings\n\t\tvar tickOpts = me.options.ticks;\n\t\tme.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);\n\t},\n\tafterTickToLabelConversion: function() {\n\t\thelpers$1.callback(this.options.afterTickToLabelConversion, [this]);\n\t},\n\n\t//\n\n\tbeforeCalculateTickRotation: function() {\n\t\thelpers$1.callback(this.options.beforeCalculateTickRotation, [this]);\n\t},\n\tcalculateTickRotation: function() {\n\t\tvar me = this;\n\t\tvar context = me.ctx;\n\t\tvar tickOpts = me.options.ticks;\n\t\tvar labels = labelsFromTicks(me._ticks);\n\n\t\t// Get the width of each grid by calculating the difference\n\t\t// between x offsets between 0 and 1.\n\t\tvar tickFont = helpers$1.options._parseFont(tickOpts);\n\t\tcontext.font = tickFont.string;\n\n\t\tvar labelRotation = tickOpts.minRotation || 0;\n\n\t\tif (labels.length && me.options.display && me.isHorizontal()) {\n\t\t\tvar originalLabelWidth = helpers$1.longestText(context, tickFont.string, labels, me.longestTextCache);\n\t\t\tvar labelWidth = originalLabelWidth;\n\t\t\tvar cosRotation, sinRotation;\n\n\t\t\t// Allow 3 pixels x2 padding either side for label readability\n\t\t\tvar tickWidth = me.getPixelForTick(1) - me.getPixelForTick(0) - 6;\n\n\t\t\t// Max label rotation can be set or default to 90 - also act as a loop counter\n\t\t\twhile (labelWidth > tickWidth && labelRotation < tickOpts.maxRotation) {\n\t\t\t\tvar angleRadians = helpers$1.toRadians(labelRotation);\n\t\t\t\tcosRotation = Math.cos(angleRadians);\n\t\t\t\tsinRotation = Math.sin(angleRadians);\n\n\t\t\t\tif (sinRotation * originalLabelWidth > me.maxHeight) {\n\t\t\t\t\t// go back one step\n\t\t\t\t\tlabelRotation--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlabelRotation++;\n\t\t\t\tlabelWidth = cosRotation * originalLabelWidth;\n\t\t\t}\n\t\t}\n\n\t\tme.labelRotation = labelRotation;\n\t},\n\tafterCalculateTickRotation: function() {\n\t\thelpers$1.callback(this.options.afterCalculateTickRotation, [this]);\n\t},\n\n\t//\n\n\tbeforeFit: function() {\n\t\thelpers$1.callback(this.options.beforeFit, [this]);\n\t},\n\tfit: function() {\n\t\tvar me = this;\n\t\t// Reset\n\t\tvar minSize = me.minSize = {\n\t\t\twidth: 0,\n\t\t\theight: 0\n\t\t};\n\n\t\tvar labels = labelsFromTicks(me._ticks);\n\n\t\tvar opts = me.options;\n\t\tvar tickOpts = opts.ticks;\n\t\tvar scaleLabelOpts = opts.scaleLabel;\n\t\tvar gridLineOpts = opts.gridLines;\n\t\tvar display = me._isVisible();\n\t\tvar position = opts.position;\n\t\tvar isHorizontal = me.isHorizontal();\n\n\t\tvar parseFont = helpers$1.options._parseFont;\n\t\tvar tickFont = parseFont(tickOpts);\n\t\tvar tickMarkLength = opts.gridLines.tickMarkLength;\n\n\t\t// Width\n\t\tif (isHorizontal) {\n\t\t\t// subtract the margins to line up with the chartArea if we are a full width scale\n\t\t\tminSize.width = me.isFullWidth() ? me.maxWidth - me.margins.left - me.margins.right : me.maxWidth;\n\t\t} else {\n\t\t\tminSize.width = display && gridLineOpts.drawTicks ? tickMarkLength : 0;\n\t\t}\n\n\t\t// height\n\t\tif (isHorizontal) {\n\t\t\tminSize.height = display && gridLineOpts.drawTicks ? tickMarkLength : 0;\n\t\t} else {\n\t\t\tminSize.height = me.maxHeight; // fill all the height\n\t\t}\n\n\t\t// Are we showing a title for the scale?\n\t\tif (scaleLabelOpts.display && display) {\n\t\t\tvar scaleLabelFont = parseFont(scaleLabelOpts);\n\t\t\tvar scaleLabelPadding = helpers$1.options.toPadding(scaleLabelOpts.padding);\n\t\t\tvar deltaHeight = scaleLabelFont.lineHeight + scaleLabelPadding.height;\n\n\t\t\tif (isHorizontal) {\n\t\t\t\tminSize.height += deltaHeight;\n\t\t\t} else {\n\t\t\t\tminSize.width += deltaHeight;\n\t\t\t}\n\t\t}\n\n\t\t// Don't bother fitting the ticks if we are not showing the labels\n\t\tif (tickOpts.display && display) {\n\t\t\tvar largestTextWidth = helpers$1.longestText(me.ctx, tickFont.string, labels, me.longestTextCache);\n\t\t\tvar tallestLabelHeightInLines = helpers$1.numberOfLabelLines(labels);\n\t\t\tvar lineSpace = tickFont.size * 0.5;\n\t\t\tvar tickPadding = me.options.ticks.padding;\n\n\t\t\t// Store max number of lines and widest label for _autoSkip\n\t\t\tme._maxLabelLines = tallestLabelHeightInLines;\n\t\t\tme.longestLabelWidth = largestTextWidth;\n\n\t\t\tif (isHorizontal) {\n\t\t\t\tvar angleRadians = helpers$1.toRadians(me.labelRotation);\n\t\t\t\tvar cosRotation = Math.cos(angleRadians);\n\t\t\t\tvar sinRotation = Math.sin(angleRadians);\n\n\t\t\t\t// TODO - improve this calculation\n\t\t\t\tvar labelHeight = (sinRotation * largestTextWidth)\n\t\t\t\t\t+ (tickFont.lineHeight * tallestLabelHeightInLines)\n\t\t\t\t\t+ lineSpace; // padding\n\n\t\t\t\tminSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);\n\n\t\t\t\tme.ctx.font = tickFont.string;\n\t\t\t\tvar firstLabelWidth = computeTextSize(me.ctx, labels[0], tickFont.string);\n\t\t\t\tvar lastLabelWidth = computeTextSize(me.ctx, labels[labels.length - 1], tickFont.string);\n\t\t\t\tvar offsetLeft = me.getPixelForTick(0) - me.left;\n\t\t\t\tvar offsetRight = me.right - me.getPixelForTick(labels.length - 1);\n\t\t\t\tvar paddingLeft, paddingRight;\n\n\t\t\t\t// Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n\t\t\t\t// which means that the right padding is dominated by the font height\n\t\t\t\tif (me.labelRotation !== 0) {\n\t\t\t\t\tpaddingLeft = position === 'bottom' ? (cosRotation * firstLabelWidth) : (cosRotation * lineSpace);\n\t\t\t\t\tpaddingRight = position === 'bottom' ? (cosRotation * lineSpace) : (cosRotation * lastLabelWidth);\n\t\t\t\t} else {\n\t\t\t\t\tpaddingLeft = firstLabelWidth / 2;\n\t\t\t\t\tpaddingRight = lastLabelWidth / 2;\n\t\t\t\t}\n\t\t\t\tme.paddingLeft = Math.max(paddingLeft - offsetLeft, 0) + 3; // add 3 px to move away from canvas edges\n\t\t\t\tme.paddingRight = Math.max(paddingRight - offsetRight, 0) + 3;\n\t\t\t} else {\n\t\t\t\t// A vertical axis is more constrained by the width. Labels are the\n\t\t\t\t// dominant factor here, so get that length first and account for padding\n\t\t\t\tif (tickOpts.mirror) {\n\t\t\t\t\tlargestTextWidth = 0;\n\t\t\t\t} else {\n\t\t\t\t\t// use lineSpace for consistency with horizontal axis\n\t\t\t\t\t// tickPadding is not implemented for horizontal\n\t\t\t\t\tlargestTextWidth += tickPadding + lineSpace;\n\t\t\t\t}\n\n\t\t\t\tminSize.width = Math.min(me.maxWidth, minSize.width + largestTextWidth);\n\n\t\t\t\tme.paddingTop = tickFont.size / 2;\n\t\t\t\tme.paddingBottom = tickFont.size / 2;\n\t\t\t}\n\t\t}\n\n\t\tme.handleMargins();\n\n\t\tme.width = minSize.width;\n\t\tme.height = minSize.height;\n\t},\n\n\t/**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n\thandleMargins: function() {\n\t\tvar me = this;\n\t\tif (me.margins) {\n\t\t\tme.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);\n\t\t\tme.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);\n\t\t\tme.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);\n\t\t\tme.paddingBottom = Math.max(me.paddingBottom - me.margins.bottom, 0);\n\t\t}\n\t},\n\n\tafterFit: function() {\n\t\thelpers$1.callback(this.options.afterFit, [this]);\n\t},\n\n\t// Shared Methods\n\tisHorizontal: function() {\n\t\treturn this.options.position === 'top' || this.options.position === 'bottom';\n\t},\n\tisFullWidth: function() {\n\t\treturn (this.options.fullWidth);\n\t},\n\n\t// Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not\n\tgetRightValue: function(rawValue) {\n\t\t// Null and undefined values first\n\t\tif (helpers$1.isNullOrUndef(rawValue)) {\n\t\t\treturn NaN;\n\t\t}\n\t\t// isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values\n\t\tif ((typeof rawValue === 'number' || rawValue instanceof Number) && !isFinite(rawValue)) {\n\t\t\treturn NaN;\n\t\t}\n\t\t// If it is in fact an object, dive in one more level\n\t\tif (rawValue) {\n\t\t\tif (this.isHorizontal()) {\n\t\t\t\tif (rawValue.x !== undefined) {\n\t\t\t\t\treturn this.getRightValue(rawValue.x);\n\t\t\t\t}\n\t\t\t} else if (rawValue.y !== undefined) {\n\t\t\t\treturn this.getRightValue(rawValue.y);\n\t\t\t}\n\t\t}\n\n\t\t// Value is good, return it\n\t\treturn rawValue;\n\t},\n\n\t/**\n\t * Used to get the value to display in the tooltip for the data at the given index\n\t * @param index\n\t * @param datasetIndex\n\t */\n\tgetLabelForIndex: helpers$1.noop,\n\n\t/**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param value\n\t * @param index\n\t * @param datasetIndex\n\t */\n\tgetPixelForValue: helpers$1.noop,\n\n\t/**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param pixel\n\t */\n\tgetValueForPixel: helpers$1.noop,\n\n\t/**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t */\n\tgetPixelForTick: function(index) {\n\t\tvar me = this;\n\t\tvar offset = me.options.offset;\n\t\tif (me.isHorizontal()) {\n\t\t\tvar innerWidth = me.width - (me.paddingLeft + me.paddingRight);\n\t\t\tvar tickWidth = innerWidth / Math.max((me._ticks.length - (offset ? 0 : 1)), 1);\n\t\t\tvar pixel = (tickWidth * index) + me.paddingLeft;\n\n\t\t\tif (offset) {\n\t\t\t\tpixel += tickWidth / 2;\n\t\t\t}\n\n\t\t\tvar finalVal = me.left + pixel;\n\t\t\tfinalVal += me.isFullWidth() ? me.margins.left : 0;\n\t\t\treturn finalVal;\n\t\t}\n\t\tvar innerHeight = me.height - (me.paddingTop + me.paddingBottom);\n\t\treturn me.top + (index * (innerHeight / (me._ticks.length - 1)));\n\t},\n\n\t/**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t */\n\tgetPixelForDecimal: function(decimal) {\n\t\tvar me = this;\n\t\tif (me.isHorizontal()) {\n\t\t\tvar innerWidth = me.width - (me.paddingLeft + me.paddingRight);\n\t\t\tvar valueOffset = (innerWidth * decimal) + me.paddingLeft;\n\n\t\t\tvar finalVal = me.left + valueOffset;\n\t\t\tfinalVal += me.isFullWidth() ? me.margins.left : 0;\n\t\t\treturn finalVal;\n\t\t}\n\t\treturn me.top + (decimal * me.height);\n\t},\n\n\t/**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t */\n\tgetBasePixel: function() {\n\t\treturn this.getPixelForValue(this.getBaseValue());\n\t},\n\n\tgetBaseValue: function() {\n\t\tvar me = this;\n\t\tvar min = me.min;\n\t\tvar max = me.max;\n\n\t\treturn me.beginAtZero ? 0 :\n\t\t\tmin < 0 && max < 0 ? max :\n\t\t\tmin > 0 && max > 0 ? min :\n\t\t\t0;\n\t},\n\n\t/**\n\t * Returns a subset of ticks to be plotted to avoid overlapping labels.\n\t * @private\n\t */\n\t_autoSkip: function(ticks) {\n\t\tvar me = this;\n\t\tvar isHorizontal = me.isHorizontal();\n\t\tvar optionTicks = me.options.ticks.minor;\n\t\tvar tickCount = ticks.length;\n\t\tvar skipRatio = false;\n\t\tvar maxTicks = optionTicks.maxTicksLimit;\n\n\t\t// Total space needed to display all ticks. First and last ticks are\n\t\t// drawn as their center at end of axis, so tickCount-1\n\t\tvar ticksLength = me._tickSize() * (tickCount - 1);\n\n\t\t// Axis length\n\t\tvar axisLength = isHorizontal\n\t\t\t? me.width - (me.paddingLeft + me.paddingRight)\n\t\t\t: me.height - (me.paddingTop + me.PaddingBottom);\n\n\t\tvar result = [];\n\t\tvar i, tick;\n\n\t\tif (ticksLength > axisLength) {\n\t\t\tskipRatio = 1 + Math.floor(ticksLength / axisLength);\n\t\t}\n\n\t\t// if they defined a max number of optionTicks,\n\t\t// increase skipRatio until that number is met\n\t\tif (tickCount > maxTicks) {\n\t\t\tskipRatio = Math.max(skipRatio, 1 + Math.floor(tickCount / maxTicks));\n\t\t}\n\n\t\tfor (i = 0; i < tickCount; i++) {\n\t\t\ttick = ticks[i];\n\n\t\t\tif (skipRatio > 1 && i % skipRatio > 0) {\n\t\t\t\t// leave tick in place but make sure it's not displayed (#4635)\n\t\t\t\tdelete tick.label;\n\t\t\t}\n\t\t\tresult.push(tick);\n\t\t}\n\t\treturn result;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_tickSize: function() {\n\t\tvar me = this;\n\t\tvar isHorizontal = me.isHorizontal();\n\t\tvar optionTicks = me.options.ticks.minor;\n\n\t\t// Calculate space needed by label in axis direction.\n\t\tvar rot = helpers$1.toRadians(me.labelRotation);\n\t\tvar cos = Math.abs(Math.cos(rot));\n\t\tvar sin = Math.abs(Math.sin(rot));\n\n\t\tvar padding = optionTicks.autoSkipPadding || 0;\n\t\tvar w = (me.longestLabelWidth + padding) || 0;\n\n\t\tvar tickFont = helpers$1.options._parseFont(optionTicks);\n\t\tvar h = (me._maxLabelLines * tickFont.lineHeight + padding) || 0;\n\n\t\t// Calculate space needed for 1 tick in axis direction.\n\t\treturn isHorizontal\n\t\t\t? h * cos > w * sin ? w / cos : h / sin\n\t\t\t: h * sin < w * cos ? h / cos : w / sin;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_isVisible: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar display = me.options.display;\n\t\tvar i, ilen, meta;\n\n\t\tif (display !== 'auto') {\n\t\t\treturn !!display;\n\t\t}\n\n\t\t// When 'auto', the scale is visible if at least one associated dataset is visible.\n\t\tfor (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n\t\t\tif (chart.isDatasetVisible(i)) {\n\t\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\t\tif (meta.xAxisID === me.id || meta.yAxisID === me.id) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t},\n\n\t/**\n\t * Actually draw the scale on the canvas\n\t * @param {object} chartArea - the area of the chart to draw full grid lines on\n\t */\n\tdraw: function(chartArea) {\n\t\tvar me = this;\n\t\tvar options = me.options;\n\n\t\tif (!me._isVisible()) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar chart = me.chart;\n\t\tvar context = me.ctx;\n\t\tvar globalDefaults = core_defaults.global;\n\t\tvar defaultFontColor = globalDefaults.defaultFontColor;\n\t\tvar optionTicks = options.ticks.minor;\n\t\tvar optionMajorTicks = options.ticks.major || optionTicks;\n\t\tvar gridLines = options.gridLines;\n\t\tvar scaleLabel = options.scaleLabel;\n\t\tvar position = options.position;\n\n\t\tvar isRotated = me.labelRotation !== 0;\n\t\tvar isMirrored = optionTicks.mirror;\n\t\tvar isHorizontal = me.isHorizontal();\n\n\t\tvar parseFont = helpers$1.options._parseFont;\n\t\tvar ticks = optionTicks.display && optionTicks.autoSkip ? me._autoSkip(me.getTicks()) : me.getTicks();\n\t\tvar tickFontColor = valueOrDefault$9(optionTicks.fontColor, defaultFontColor);\n\t\tvar tickFont = parseFont(optionTicks);\n\t\tvar lineHeight = tickFont.lineHeight;\n\t\tvar majorTickFontColor = valueOrDefault$9(optionMajorTicks.fontColor, defaultFontColor);\n\t\tvar majorTickFont = parseFont(optionMajorTicks);\n\t\tvar tickPadding = optionTicks.padding;\n\t\tvar labelOffset = optionTicks.labelOffset;\n\n\t\tvar tl = gridLines.drawTicks ? gridLines.tickMarkLength : 0;\n\n\t\tvar scaleLabelFontColor = valueOrDefault$9(scaleLabel.fontColor, defaultFontColor);\n\t\tvar scaleLabelFont = parseFont(scaleLabel);\n\t\tvar scaleLabelPadding = helpers$1.options.toPadding(scaleLabel.padding);\n\t\tvar labelRotationRadians = helpers$1.toRadians(me.labelRotation);\n\n\t\tvar itemsToDraw = [];\n\n\t\tvar axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;\n\t\tvar alignPixel = helpers$1._alignPixel;\n\t\tvar borderValue, tickStart, tickEnd;\n\n\t\tif (position === 'top') {\n\t\t\tborderValue = alignPixel(chart, me.bottom, axisWidth);\n\t\t\ttickStart = me.bottom - tl;\n\t\t\ttickEnd = borderValue - axisWidth / 2;\n\t\t} else if (position === 'bottom') {\n\t\t\tborderValue = alignPixel(chart, me.top, axisWidth);\n\t\t\ttickStart = borderValue + axisWidth / 2;\n\t\t\ttickEnd = me.top + tl;\n\t\t} else if (position === 'left') {\n\t\t\tborderValue = alignPixel(chart, me.right, axisWidth);\n\t\t\ttickStart = me.right - tl;\n\t\t\ttickEnd = borderValue - axisWidth / 2;\n\t\t} else {\n\t\t\tborderValue = alignPixel(chart, me.left, axisWidth);\n\t\t\ttickStart = borderValue + axisWidth / 2;\n\t\t\ttickEnd = me.left + tl;\n\t\t}\n\n\t\tvar epsilon = 0.0000001; // 0.0000001 is margin in pixels for Accumulated error.\n\n\t\thelpers$1.each(ticks, function(tick, index) {\n\t\t\t// autoskipper skipped this tick (#4635)\n\t\t\tif (helpers$1.isNullOrUndef(tick.label)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar label = tick.label;\n\t\t\tvar lineWidth, lineColor, borderDash, borderDashOffset;\n\t\t\tif (index === me.zeroLineIndex && options.offset === gridLines.offsetGridLines) {\n\t\t\t\t// Draw the first index specially\n\t\t\t\tlineWidth = gridLines.zeroLineWidth;\n\t\t\t\tlineColor = gridLines.zeroLineColor;\n\t\t\t\tborderDash = gridLines.zeroLineBorderDash || [];\n\t\t\t\tborderDashOffset = gridLines.zeroLineBorderDashOffset || 0.0;\n\t\t\t} else {\n\t\t\t\tlineWidth = valueAtIndexOrDefault(gridLines.lineWidth, index);\n\t\t\t\tlineColor = valueAtIndexOrDefault(gridLines.color, index);\n\t\t\t\tborderDash = gridLines.borderDash || [];\n\t\t\t\tborderDashOffset = gridLines.borderDashOffset || 0.0;\n\t\t\t}\n\n\t\t\t// Common properties\n\t\t\tvar tx1, ty1, tx2, ty2, x1, y1, x2, y2, labelX, labelY, textOffset, textAlign;\n\t\t\tvar labelCount = helpers$1.isArray(label) ? label.length : 1;\n\t\t\tvar lineValue = getPixelForGridLine(me, index, gridLines.offsetGridLines);\n\n\t\t\tif (isHorizontal) {\n\t\t\t\tvar labelYOffset = tl + tickPadding;\n\n\t\t\t\tif (lineValue < me.left - epsilon) {\n\t\t\t\t\tlineColor = 'rgba(0,0,0,0)';\n\t\t\t\t}\n\n\t\t\t\ttx1 = tx2 = x1 = x2 = alignPixel(chart, lineValue, lineWidth);\n\t\t\t\tty1 = tickStart;\n\t\t\t\tty2 = tickEnd;\n\t\t\t\tlabelX = me.getPixelForTick(index) + labelOffset; // x values for optionTicks (need to consider offsetLabel option)\n\n\t\t\t\tif (position === 'top') {\n\t\t\t\t\ty1 = alignPixel(chart, chartArea.top, axisWidth) + axisWidth / 2;\n\t\t\t\t\ty2 = chartArea.bottom;\n\t\t\t\t\ttextOffset = ((!isRotated ? 0.5 : 1) - labelCount) * lineHeight;\n\t\t\t\t\ttextAlign = !isRotated ? 'center' : 'left';\n\t\t\t\t\tlabelY = me.bottom - labelYOffset;\n\t\t\t\t} else {\n\t\t\t\t\ty1 = chartArea.top;\n\t\t\t\t\ty2 = alignPixel(chart, chartArea.bottom, axisWidth) - axisWidth / 2;\n\t\t\t\t\ttextOffset = (!isRotated ? 0.5 : 0) * lineHeight;\n\t\t\t\t\ttextAlign = !isRotated ? 'center' : 'right';\n\t\t\t\t\tlabelY = me.top + labelYOffset;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar labelXOffset = (isMirrored ? 0 : tl) + tickPadding;\n\n\t\t\t\tif (lineValue < me.top - epsilon) {\n\t\t\t\t\tlineColor = 'rgba(0,0,0,0)';\n\t\t\t\t}\n\n\t\t\t\ttx1 = tickStart;\n\t\t\t\ttx2 = tickEnd;\n\t\t\t\tty1 = ty2 = y1 = y2 = alignPixel(chart, lineValue, lineWidth);\n\t\t\t\tlabelY = me.getPixelForTick(index) + labelOffset;\n\t\t\t\ttextOffset = (1 - labelCount) * lineHeight / 2;\n\n\t\t\t\tif (position === 'left') {\n\t\t\t\t\tx1 = alignPixel(chart, chartArea.left, axisWidth) + axisWidth / 2;\n\t\t\t\t\tx2 = chartArea.right;\n\t\t\t\t\ttextAlign = isMirrored ? 'left' : 'right';\n\t\t\t\t\tlabelX = me.right - labelXOffset;\n\t\t\t\t} else {\n\t\t\t\t\tx1 = chartArea.left;\n\t\t\t\t\tx2 = alignPixel(chart, chartArea.right, axisWidth) - axisWidth / 2;\n\t\t\t\t\ttextAlign = isMirrored ? 'right' : 'left';\n\t\t\t\t\tlabelX = me.left + labelXOffset;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\titemsToDraw.push({\n\t\t\t\ttx1: tx1,\n\t\t\t\tty1: ty1,\n\t\t\t\ttx2: tx2,\n\t\t\t\tty2: ty2,\n\t\t\t\tx1: x1,\n\t\t\t\ty1: y1,\n\t\t\t\tx2: x2,\n\t\t\t\ty2: y2,\n\t\t\t\tlabelX: labelX,\n\t\t\t\tlabelY: labelY,\n\t\t\t\tglWidth: lineWidth,\n\t\t\t\tglColor: lineColor,\n\t\t\t\tglBorderDash: borderDash,\n\t\t\t\tglBorderDashOffset: borderDashOffset,\n\t\t\t\trotation: -1 * labelRotationRadians,\n\t\t\t\tlabel: label,\n\t\t\t\tmajor: tick.major,\n\t\t\t\ttextOffset: textOffset,\n\t\t\t\ttextAlign: textAlign\n\t\t\t});\n\t\t});\n\n\t\t// Draw all of the tick labels, tick marks, and grid lines at the correct places\n\t\thelpers$1.each(itemsToDraw, function(itemToDraw) {\n\t\t\tvar glWidth = itemToDraw.glWidth;\n\t\t\tvar glColor = itemToDraw.glColor;\n\n\t\t\tif (gridLines.display && glWidth && glColor) {\n\t\t\t\tcontext.save();\n\t\t\t\tcontext.lineWidth = glWidth;\n\t\t\t\tcontext.strokeStyle = glColor;\n\t\t\t\tif (context.setLineDash) {\n\t\t\t\t\tcontext.setLineDash(itemToDraw.glBorderDash);\n\t\t\t\t\tcontext.lineDashOffset = itemToDraw.glBorderDashOffset;\n\t\t\t\t}\n\n\t\t\t\tcontext.beginPath();\n\n\t\t\t\tif (gridLines.drawTicks) {\n\t\t\t\t\tcontext.moveTo(itemToDraw.tx1, itemToDraw.ty1);\n\t\t\t\t\tcontext.lineTo(itemToDraw.tx2, itemToDraw.ty2);\n\t\t\t\t}\n\n\t\t\t\tif (gridLines.drawOnChartArea) {\n\t\t\t\t\tcontext.moveTo(itemToDraw.x1, itemToDraw.y1);\n\t\t\t\t\tcontext.lineTo(itemToDraw.x2, itemToDraw.y2);\n\t\t\t\t}\n\n\t\t\t\tcontext.stroke();\n\t\t\t\tcontext.restore();\n\t\t\t}\n\n\t\t\tif (optionTicks.display) {\n\t\t\t\t// Make sure we draw text in the correct color and font\n\t\t\t\tcontext.save();\n\t\t\t\tcontext.translate(itemToDraw.labelX, itemToDraw.labelY);\n\t\t\t\tcontext.rotate(itemToDraw.rotation);\n\t\t\t\tcontext.font = itemToDraw.major ? majorTickFont.string : tickFont.string;\n\t\t\t\tcontext.fillStyle = itemToDraw.major ? majorTickFontColor : tickFontColor;\n\t\t\t\tcontext.textBaseline = 'middle';\n\t\t\t\tcontext.textAlign = itemToDraw.textAlign;\n\n\t\t\t\tvar label = itemToDraw.label;\n\t\t\t\tvar y = itemToDraw.textOffset;\n\t\t\t\tif (helpers$1.isArray(label)) {\n\t\t\t\t\tfor (var i = 0; i < label.length; ++i) {\n\t\t\t\t\t\t// We just make sure the multiline element is a string here..\n\t\t\t\t\t\tcontext.fillText('' + label[i], 0, y);\n\t\t\t\t\t\ty += lineHeight;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcontext.fillText(label, 0, y);\n\t\t\t\t}\n\t\t\t\tcontext.restore();\n\t\t\t}\n\t\t});\n\n\t\tif (scaleLabel.display) {\n\t\t\t// Draw the scale label\n\t\t\tvar scaleLabelX;\n\t\t\tvar scaleLabelY;\n\t\t\tvar rotation = 0;\n\t\t\tvar halfLineHeight = scaleLabelFont.lineHeight / 2;\n\n\t\t\tif (isHorizontal) {\n\t\t\t\tscaleLabelX = me.left + ((me.right - me.left) / 2); // midpoint of the width\n\t\t\t\tscaleLabelY = position === 'bottom'\n\t\t\t\t\t? me.bottom - halfLineHeight - scaleLabelPadding.bottom\n\t\t\t\t\t: me.top + halfLineHeight + scaleLabelPadding.top;\n\t\t\t} else {\n\t\t\t\tvar isLeft = position === 'left';\n\t\t\t\tscaleLabelX = isLeft\n\t\t\t\t\t? me.left + halfLineHeight + scaleLabelPadding.top\n\t\t\t\t\t: me.right - halfLineHeight - scaleLabelPadding.top;\n\t\t\t\tscaleLabelY = me.top + ((me.bottom - me.top) / 2);\n\t\t\t\trotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;\n\t\t\t}\n\n\t\t\tcontext.save();\n\t\t\tcontext.translate(scaleLabelX, scaleLabelY);\n\t\t\tcontext.rotate(rotation);\n\t\t\tcontext.textAlign = 'center';\n\t\t\tcontext.textBaseline = 'middle';\n\t\t\tcontext.fillStyle = scaleLabelFontColor; // render in correct colour\n\t\t\tcontext.font = scaleLabelFont.string;\n\t\t\tcontext.fillText(scaleLabel.labelString, 0, 0);\n\t\t\tcontext.restore();\n\t\t}\n\n\t\tif (axisWidth) {\n\t\t\t// Draw the line at the edge of the axis\n\t\t\tvar firstLineWidth = axisWidth;\n\t\t\tvar lastLineWidth = valueAtIndexOrDefault(gridLines.lineWidth, ticks.length - 1, 0);\n\t\t\tvar x1, x2, y1, y2;\n\n\t\t\tif (isHorizontal) {\n\t\t\t\tx1 = alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;\n\t\t\t\tx2 = alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;\n\t\t\t\ty1 = y2 = borderValue;\n\t\t\t} else {\n\t\t\t\ty1 = alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;\n\t\t\t\ty2 = alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;\n\t\t\t\tx1 = x2 = borderValue;\n\t\t\t}\n\n\t\t\tcontext.lineWidth = axisWidth;\n\t\t\tcontext.strokeStyle = valueAtIndexOrDefault(gridLines.color, 0);\n\t\t\tcontext.beginPath();\n\t\t\tcontext.moveTo(x1, y1);\n\t\t\tcontext.lineTo(x2, y2);\n\t\t\tcontext.stroke();\n\t\t}\n\t}\n});\n\nvar defaultConfig = {\n\tposition: 'bottom'\n};\n\nvar scale_category = core_scale.extend({\n\t/**\n\t* Internal function to get the correct labels. If data.xLabels or data.yLabels are defined, use those\n\t* else fall back to data.labels\n\t* @private\n\t*/\n\tgetLabels: function() {\n\t\tvar data = this.chart.data;\n\t\treturn this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels;\n\t},\n\n\tdetermineDataLimits: function() {\n\t\tvar me = this;\n\t\tvar labels = me.getLabels();\n\t\tme.minIndex = 0;\n\t\tme.maxIndex = labels.length - 1;\n\t\tvar findIndex;\n\n\t\tif (me.options.ticks.min !== undefined) {\n\t\t\t// user specified min value\n\t\t\tfindIndex = labels.indexOf(me.options.ticks.min);\n\t\t\tme.minIndex = findIndex !== -1 ? findIndex : me.minIndex;\n\t\t}\n\n\t\tif (me.options.ticks.max !== undefined) {\n\t\t\t// user specified max value\n\t\t\tfindIndex = labels.indexOf(me.options.ticks.max);\n\t\t\tme.maxIndex = findIndex !== -1 ? findIndex : me.maxIndex;\n\t\t}\n\n\t\tme.min = labels[me.minIndex];\n\t\tme.max = labels[me.maxIndex];\n\t},\n\n\tbuildTicks: function() {\n\t\tvar me = this;\n\t\tvar labels = me.getLabels();\n\t\t// If we are viewing some subset of labels, slice the original array\n\t\tme.ticks = (me.minIndex === 0 && me.maxIndex === labels.length - 1) ? labels : labels.slice(me.minIndex, me.maxIndex + 1);\n\t},\n\n\tgetLabelForIndex: function(index, datasetIndex) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\n\t\tif (chart.getDatasetMeta(datasetIndex).controller._getValueScaleId() === me.id) {\n\t\t\treturn me.getRightValue(chart.data.datasets[datasetIndex].data[index]);\n\t\t}\n\n\t\treturn me.ticks[index - me.minIndex];\n\t},\n\n\t// Used to get data value locations.  Value can either be an index or a numerical value\n\tgetPixelForValue: function(value, index) {\n\t\tvar me = this;\n\t\tvar offset = me.options.offset;\n\t\t// 1 is added because we need the length but we have the indexes\n\t\tvar offsetAmt = Math.max((me.maxIndex + 1 - me.minIndex - (offset ? 0 : 1)), 1);\n\n\t\t// If value is a data object, then index is the index in the data array,\n\t\t// not the index of the scale. We need to change that.\n\t\tvar valueCategory;\n\t\tif (value !== undefined && value !== null) {\n\t\t\tvalueCategory = me.isHorizontal() ? value.x : value.y;\n\t\t}\n\t\tif (valueCategory !== undefined || (value !== undefined && isNaN(index))) {\n\t\t\tvar labels = me.getLabels();\n\t\t\tvalue = valueCategory || value;\n\t\t\tvar idx = labels.indexOf(value);\n\t\t\tindex = idx !== -1 ? idx : index;\n\t\t}\n\n\t\tif (me.isHorizontal()) {\n\t\t\tvar valueWidth = me.width / offsetAmt;\n\t\t\tvar widthOffset = (valueWidth * (index - me.minIndex));\n\n\t\t\tif (offset) {\n\t\t\t\twidthOffset += (valueWidth / 2);\n\t\t\t}\n\n\t\t\treturn me.left + widthOffset;\n\t\t}\n\t\tvar valueHeight = me.height / offsetAmt;\n\t\tvar heightOffset = (valueHeight * (index - me.minIndex));\n\n\t\tif (offset) {\n\t\t\theightOffset += (valueHeight / 2);\n\t\t}\n\n\t\treturn me.top + heightOffset;\n\t},\n\n\tgetPixelForTick: function(index) {\n\t\treturn this.getPixelForValue(this.ticks[index], index + this.minIndex, null);\n\t},\n\n\tgetValueForPixel: function(pixel) {\n\t\tvar me = this;\n\t\tvar offset = me.options.offset;\n\t\tvar value;\n\t\tvar offsetAmt = Math.max((me._ticks.length - (offset ? 0 : 1)), 1);\n\t\tvar horz = me.isHorizontal();\n\t\tvar valueDimension = (horz ? me.width : me.height) / offsetAmt;\n\n\t\tpixel -= horz ? me.left : me.top;\n\n\t\tif (offset) {\n\t\t\tpixel -= (valueDimension / 2);\n\t\t}\n\n\t\tif (pixel <= 0) {\n\t\t\tvalue = 0;\n\t\t} else {\n\t\t\tvalue = Math.round(pixel / valueDimension);\n\t\t}\n\n\t\treturn value + me.minIndex;\n\t},\n\n\tgetBasePixel: function() {\n\t\treturn this.bottom;\n\t}\n});\n\n// INTERNAL: static default options, registered in src/index.js\nvar _defaults = defaultConfig;\nscale_category._defaults = _defaults;\n\nvar noop = helpers$1.noop;\nvar isNullOrUndef = helpers$1.isNullOrUndef;\n\n/**\n * Generate a set of linear ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {number[]} array of tick values\n */\nfunction generateTicks(generationOptions, dataRange) {\n\tvar ticks = [];\n\t// To get a \"nice\" value for the tick spacing, we will use the appropriately named\n\t// \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n\t// for details.\n\n\tvar MIN_SPACING = 1e-14;\n\tvar stepSize = generationOptions.stepSize;\n\tvar unit = stepSize || 1;\n\tvar maxNumSpaces = generationOptions.maxTicks - 1;\n\tvar min = generationOptions.min;\n\tvar max = generationOptions.max;\n\tvar precision = generationOptions.precision;\n\tvar rmin = dataRange.min;\n\tvar rmax = dataRange.max;\n\tvar spacing = helpers$1.niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;\n\tvar factor, niceMin, niceMax, numSpaces;\n\n\t// Beyond MIN_SPACING floating point numbers being to lose precision\n\t// such that we can't do the math necessary to generate ticks\n\tif (spacing < MIN_SPACING && isNullOrUndef(min) && isNullOrUndef(max)) {\n\t\treturn [rmin, rmax];\n\t}\n\n\tnumSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n\tif (numSpaces > maxNumSpaces) {\n\t\t// If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n\t\tspacing = helpers$1.niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;\n\t}\n\n\tif (stepSize || isNullOrUndef(precision)) {\n\t\t// If a precision is not specified, calculate factor based on spacing\n\t\tfactor = Math.pow(10, helpers$1._decimalPlaces(spacing));\n\t} else {\n\t\t// If the user specified a precision, round to that number of decimal places\n\t\tfactor = Math.pow(10, precision);\n\t\tspacing = Math.ceil(spacing * factor) / factor;\n\t}\n\n\tniceMin = Math.floor(rmin / spacing) * spacing;\n\tniceMax = Math.ceil(rmax / spacing) * spacing;\n\n\t// If min, max and stepSize is set and they make an evenly spaced scale use it.\n\tif (stepSize) {\n\t\t// If very close to our whole number, use it.\n\t\tif (!isNullOrUndef(min) && helpers$1.almostWhole(min / spacing, spacing / 1000)) {\n\t\t\tniceMin = min;\n\t\t}\n\t\tif (!isNullOrUndef(max) && helpers$1.almostWhole(max / spacing, spacing / 1000)) {\n\t\t\tniceMax = max;\n\t\t}\n\t}\n\n\tnumSpaces = (niceMax - niceMin) / spacing;\n\t// If very close to our rounded value, use it.\n\tif (helpers$1.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n\t\tnumSpaces = Math.round(numSpaces);\n\t} else {\n\t\tnumSpaces = Math.ceil(numSpaces);\n\t}\n\n\tniceMin = Math.round(niceMin * factor) / factor;\n\tniceMax = Math.round(niceMax * factor) / factor;\n\tticks.push(isNullOrUndef(min) ? niceMin : min);\n\tfor (var j = 1; j < numSpaces; ++j) {\n\t\tticks.push(Math.round((niceMin + j * spacing) * factor) / factor);\n\t}\n\tticks.push(isNullOrUndef(max) ? niceMax : max);\n\n\treturn ticks;\n}\n\nvar scale_linearbase = core_scale.extend({\n\tgetRightValue: function(value) {\n\t\tif (typeof value === 'string') {\n\t\t\treturn +value;\n\t\t}\n\t\treturn core_scale.prototype.getRightValue.call(this, value);\n\t},\n\n\thandleTickRangeOptions: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar tickOpts = opts.ticks;\n\n\t\t// If we are forcing it to begin at 0, but 0 will already be rendered on the chart,\n\t\t// do nothing since that would make the chart weird. If the user really wants a weird chart\n\t\t// axis, they can manually override it\n\t\tif (tickOpts.beginAtZero) {\n\t\t\tvar minSign = helpers$1.sign(me.min);\n\t\t\tvar maxSign = helpers$1.sign(me.max);\n\n\t\t\tif (minSign < 0 && maxSign < 0) {\n\t\t\t\t// move the top up to 0\n\t\t\t\tme.max = 0;\n\t\t\t} else if (minSign > 0 && maxSign > 0) {\n\t\t\t\t// move the bottom down to 0\n\t\t\t\tme.min = 0;\n\t\t\t}\n\t\t}\n\n\t\tvar setMin = tickOpts.min !== undefined || tickOpts.suggestedMin !== undefined;\n\t\tvar setMax = tickOpts.max !== undefined || tickOpts.suggestedMax !== undefined;\n\n\t\tif (tickOpts.min !== undefined) {\n\t\t\tme.min = tickOpts.min;\n\t\t} else if (tickOpts.suggestedMin !== undefined) {\n\t\t\tif (me.min === null) {\n\t\t\t\tme.min = tickOpts.suggestedMin;\n\t\t\t} else {\n\t\t\t\tme.min = Math.min(me.min, tickOpts.suggestedMin);\n\t\t\t}\n\t\t}\n\n\t\tif (tickOpts.max !== undefined) {\n\t\t\tme.max = tickOpts.max;\n\t\t} else if (tickOpts.suggestedMax !== undefined) {\n\t\t\tif (me.max === null) {\n\t\t\t\tme.max = tickOpts.suggestedMax;\n\t\t\t} else {\n\t\t\t\tme.max = Math.max(me.max, tickOpts.suggestedMax);\n\t\t\t}\n\t\t}\n\n\t\tif (setMin !== setMax) {\n\t\t\t// We set the min or the max but not both.\n\t\t\t// So ensure that our range is good\n\t\t\t// Inverted or 0 length range can happen when\n\t\t\t// ticks.min is set, and no datasets are visible\n\t\t\tif (me.min >= me.max) {\n\t\t\t\tif (setMin) {\n\t\t\t\t\tme.max = me.min + 1;\n\t\t\t\t} else {\n\t\t\t\t\tme.min = me.max - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (me.min === me.max) {\n\t\t\tme.max++;\n\n\t\t\tif (!tickOpts.beginAtZero) {\n\t\t\t\tme.min--;\n\t\t\t}\n\t\t}\n\t},\n\n\tgetTickLimit: function() {\n\t\tvar me = this;\n\t\tvar tickOpts = me.options.ticks;\n\t\tvar stepSize = tickOpts.stepSize;\n\t\tvar maxTicksLimit = tickOpts.maxTicksLimit;\n\t\tvar maxTicks;\n\n\t\tif (stepSize) {\n\t\t\tmaxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;\n\t\t} else {\n\t\t\tmaxTicks = me._computeTickLimit();\n\t\t\tmaxTicksLimit = maxTicksLimit || 11;\n\t\t}\n\n\t\tif (maxTicksLimit) {\n\t\t\tmaxTicks = Math.min(maxTicksLimit, maxTicks);\n\t\t}\n\n\t\treturn maxTicks;\n\t},\n\n\t_computeTickLimit: function() {\n\t\treturn Number.POSITIVE_INFINITY;\n\t},\n\n\thandleDirectionalChanges: noop,\n\n\tbuildTicks: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar tickOpts = opts.ticks;\n\n\t\t// Figure out what the max number of ticks we can support it is based on the size of\n\t\t// the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n\t\t// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n\t\t// the graph. Make sure we always have at least 2 ticks\n\t\tvar maxTicks = me.getTickLimit();\n\t\tmaxTicks = Math.max(2, maxTicks);\n\n\t\tvar numericGeneratorOptions = {\n\t\t\tmaxTicks: maxTicks,\n\t\t\tmin: tickOpts.min,\n\t\t\tmax: tickOpts.max,\n\t\t\tprecision: tickOpts.precision,\n\t\t\tstepSize: helpers$1.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)\n\t\t};\n\t\tvar ticks = me.ticks = generateTicks(numericGeneratorOptions, me);\n\n\t\tme.handleDirectionalChanges();\n\n\t\t// At this point, we need to update our max and min given the tick values since we have expanded the\n\t\t// range of the scale\n\t\tme.max = helpers$1.max(ticks);\n\t\tme.min = helpers$1.min(ticks);\n\n\t\tif (tickOpts.reverse) {\n\t\t\tticks.reverse();\n\n\t\t\tme.start = me.max;\n\t\t\tme.end = me.min;\n\t\t} else {\n\t\t\tme.start = me.min;\n\t\t\tme.end = me.max;\n\t\t}\n\t},\n\n\tconvertTicksToLabels: function() {\n\t\tvar me = this;\n\t\tme.ticksAsNumbers = me.ticks.slice();\n\t\tme.zeroLineIndex = me.ticks.indexOf(0);\n\n\t\tcore_scale.prototype.convertTicksToLabels.call(me);\n\t}\n});\n\nvar defaultConfig$1 = {\n\tposition: 'left',\n\tticks: {\n\t\tcallback: core_ticks.formatters.linear\n\t}\n};\n\nvar scale_linear = scale_linearbase.extend({\n\tdetermineDataLimits: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar chart = me.chart;\n\t\tvar data = chart.data;\n\t\tvar datasets = data.datasets;\n\t\tvar isHorizontal = me.isHorizontal();\n\t\tvar DEFAULT_MIN = 0;\n\t\tvar DEFAULT_MAX = 1;\n\n\t\tfunction IDMatches(meta) {\n\t\t\treturn isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;\n\t\t}\n\n\t\t// First Calculate the range\n\t\tme.min = null;\n\t\tme.max = null;\n\n\t\tvar hasStacks = opts.stacked;\n\t\tif (hasStacks === undefined) {\n\t\t\thelpers$1.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\tif (hasStacks) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&\n\t\t\t\t\tmeta.stack !== undefined) {\n\t\t\t\t\thasStacks = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (opts.stacked || hasStacks) {\n\t\t\tvar valuesPerStack = {};\n\n\t\t\thelpers$1.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\tvar key = [\n\t\t\t\t\tmeta.type,\n\t\t\t\t\t// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\n\t\t\t\t\t((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),\n\t\t\t\t\tmeta.stack\n\t\t\t\t].join('.');\n\n\t\t\t\tif (valuesPerStack[key] === undefined) {\n\t\t\t\t\tvaluesPerStack[key] = {\n\t\t\t\t\t\tpositiveValues: [],\n\t\t\t\t\t\tnegativeValues: []\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Store these per type\n\t\t\t\tvar positiveValues = valuesPerStack[key].positiveValues;\n\t\t\t\tvar negativeValues = valuesPerStack[key].negativeValues;\n\n\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n\t\t\t\t\thelpers$1.each(dataset.data, function(rawValue, index) {\n\t\t\t\t\t\tvar value = +me.getRightValue(rawValue);\n\t\t\t\t\t\tif (isNaN(value) || meta.data[index].hidden) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpositiveValues[index] = positiveValues[index] || 0;\n\t\t\t\t\t\tnegativeValues[index] = negativeValues[index] || 0;\n\n\t\t\t\t\t\tif (opts.relativePoints) {\n\t\t\t\t\t\t\tpositiveValues[index] = 100;\n\t\t\t\t\t\t} else if (value < 0) {\n\t\t\t\t\t\t\tnegativeValues[index] += value;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpositiveValues[index] += value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\thelpers$1.each(valuesPerStack, function(valuesForType) {\n\t\t\t\tvar values = valuesForType.positiveValues.concat(valuesForType.negativeValues);\n\t\t\t\tvar minVal = helpers$1.min(values);\n\t\t\t\tvar maxVal = helpers$1.max(values);\n\t\t\t\tme.min = me.min === null ? minVal : Math.min(me.min, minVal);\n\t\t\t\tme.max = me.max === null ? maxVal : Math.max(me.max, maxVal);\n\t\t\t});\n\n\t\t} else {\n\t\t\thelpers$1.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n\t\t\t\t\thelpers$1.each(dataset.data, function(rawValue, index) {\n\t\t\t\t\t\tvar value = +me.getRightValue(rawValue);\n\t\t\t\t\t\tif (isNaN(value) || meta.data[index].hidden) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (me.min === null) {\n\t\t\t\t\t\t\tme.min = value;\n\t\t\t\t\t\t} else if (value < me.min) {\n\t\t\t\t\t\t\tme.min = value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (me.max === null) {\n\t\t\t\t\t\t\tme.max = value;\n\t\t\t\t\t\t} else if (value > me.max) {\n\t\t\t\t\t\t\tme.max = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tme.min = isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;\n\t\tme.max = isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX;\n\n\t\t// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\n\t\tthis.handleTickRangeOptions();\n\t},\n\n\t// Returns the maximum number of ticks based on the scale dimension\n\t_computeTickLimit: function() {\n\t\tvar me = this;\n\t\tvar tickFont;\n\n\t\tif (me.isHorizontal()) {\n\t\t\treturn Math.ceil(me.width / 40);\n\t\t}\n\t\ttickFont = helpers$1.options._parseFont(me.options.ticks);\n\t\treturn Math.ceil(me.height / tickFont.lineHeight);\n\t},\n\n\t// Called after the ticks are built. We need\n\thandleDirectionalChanges: function() {\n\t\tif (!this.isHorizontal()) {\n\t\t\t// We are in a vertical orientation. The top value is the highest. So reverse the array\n\t\t\tthis.ticks.reverse();\n\t\t}\n\t},\n\n\tgetLabelForIndex: function(index, datasetIndex) {\n\t\treturn +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n\t},\n\n\t// Utils\n\tgetPixelForValue: function(value) {\n\t\t// This must be called after fit has been run so that\n\t\t// this.left, this.top, this.right, and this.bottom have been defined\n\t\tvar me = this;\n\t\tvar start = me.start;\n\n\t\tvar rightValue = +me.getRightValue(value);\n\t\tvar pixel;\n\t\tvar range = me.end - start;\n\n\t\tif (me.isHorizontal()) {\n\t\t\tpixel = me.left + (me.width / range * (rightValue - start));\n\t\t} else {\n\t\t\tpixel = me.bottom - (me.height / range * (rightValue - start));\n\t\t}\n\t\treturn pixel;\n\t},\n\n\tgetValueForPixel: function(pixel) {\n\t\tvar me = this;\n\t\tvar isHorizontal = me.isHorizontal();\n\t\tvar innerDimension = isHorizontal ? me.width : me.height;\n\t\tvar offset = (isHorizontal ? pixel - me.left : me.bottom - pixel) / innerDimension;\n\t\treturn me.start + ((me.end - me.start) * offset);\n\t},\n\n\tgetPixelForTick: function(index) {\n\t\treturn this.getPixelForValue(this.ticksAsNumbers[index]);\n\t}\n});\n\n// INTERNAL: static default options, registered in src/index.js\nvar _defaults$1 = defaultConfig$1;\nscale_linear._defaults = _defaults$1;\n\nvar valueOrDefault$a = helpers$1.valueOrDefault;\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {number[]} array of tick values\n */\nfunction generateTicks$1(generationOptions, dataRange) {\n\tvar ticks = [];\n\n\tvar tickVal = valueOrDefault$a(generationOptions.min, Math.pow(10, Math.floor(helpers$1.log10(dataRange.min))));\n\n\tvar endExp = Math.floor(helpers$1.log10(dataRange.max));\n\tvar endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));\n\tvar exp, significand;\n\n\tif (tickVal === 0) {\n\t\texp = Math.floor(helpers$1.log10(dataRange.minNotZero));\n\t\tsignificand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));\n\n\t\tticks.push(tickVal);\n\t\ttickVal = significand * Math.pow(10, exp);\n\t} else {\n\t\texp = Math.floor(helpers$1.log10(tickVal));\n\t\tsignificand = Math.floor(tickVal / Math.pow(10, exp));\n\t}\n\tvar precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n\n\tdo {\n\t\tticks.push(tickVal);\n\n\t\t++significand;\n\t\tif (significand === 10) {\n\t\t\tsignificand = 1;\n\t\t\t++exp;\n\t\t\tprecision = exp >= 0 ? 1 : precision;\n\t\t}\n\n\t\ttickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;\n\t} while (exp < endExp || (exp === endExp && significand < endSignificand));\n\n\tvar lastTick = valueOrDefault$a(generationOptions.max, tickVal);\n\tticks.push(lastTick);\n\n\treturn ticks;\n}\n\nvar defaultConfig$2 = {\n\tposition: 'left',\n\n\t// label settings\n\tticks: {\n\t\tcallback: core_ticks.formatters.logarithmic\n\t}\n};\n\n// TODO(v3): change this to positiveOrDefault\nfunction nonNegativeOrDefault(value, defaultValue) {\n\treturn helpers$1.isFinite(value) && value >= 0 ? value : defaultValue;\n}\n\nvar scale_logarithmic = core_scale.extend({\n\tdetermineDataLimits: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar chart = me.chart;\n\t\tvar data = chart.data;\n\t\tvar datasets = data.datasets;\n\t\tvar isHorizontal = me.isHorizontal();\n\t\tfunction IDMatches(meta) {\n\t\t\treturn isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;\n\t\t}\n\n\t\t// Calculate Range\n\t\tme.min = null;\n\t\tme.max = null;\n\t\tme.minNotZero = null;\n\n\t\tvar hasStacks = opts.stacked;\n\t\tif (hasStacks === undefined) {\n\t\t\thelpers$1.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\tif (hasStacks) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&\n\t\t\t\t\tmeta.stack !== undefined) {\n\t\t\t\t\thasStacks = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (opts.stacked || hasStacks) {\n\t\t\tvar valuesPerStack = {};\n\n\t\t\thelpers$1.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\tvar key = [\n\t\t\t\t\tmeta.type,\n\t\t\t\t\t// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\n\t\t\t\t\t((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),\n\t\t\t\t\tmeta.stack\n\t\t\t\t].join('.');\n\n\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n\t\t\t\t\tif (valuesPerStack[key] === undefined) {\n\t\t\t\t\t\tvaluesPerStack[key] = [];\n\t\t\t\t\t}\n\n\t\t\t\t\thelpers$1.each(dataset.data, function(rawValue, index) {\n\t\t\t\t\t\tvar values = valuesPerStack[key];\n\t\t\t\t\t\tvar value = +me.getRightValue(rawValue);\n\t\t\t\t\t\t// invalid, hidden and negative values are ignored\n\t\t\t\t\t\tif (isNaN(value) || meta.data[index].hidden || value < 0) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvalues[index] = values[index] || 0;\n\t\t\t\t\t\tvalues[index] += value;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\thelpers$1.each(valuesPerStack, function(valuesForType) {\n\t\t\t\tif (valuesForType.length > 0) {\n\t\t\t\t\tvar minVal = helpers$1.min(valuesForType);\n\t\t\t\t\tvar maxVal = helpers$1.max(valuesForType);\n\t\t\t\t\tme.min = me.min === null ? minVal : Math.min(me.min, minVal);\n\t\t\t\t\tme.max = me.max === null ? maxVal : Math.max(me.max, maxVal);\n\t\t\t\t}\n\t\t\t});\n\n\t\t} else {\n\t\t\thelpers$1.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n\t\t\t\t\thelpers$1.each(dataset.data, function(rawValue, index) {\n\t\t\t\t\t\tvar value = +me.getRightValue(rawValue);\n\t\t\t\t\t\t// invalid, hidden and negative values are ignored\n\t\t\t\t\t\tif (isNaN(value) || meta.data[index].hidden || value < 0) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (me.min === null) {\n\t\t\t\t\t\t\tme.min = value;\n\t\t\t\t\t\t} else if (value < me.min) {\n\t\t\t\t\t\t\tme.min = value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (me.max === null) {\n\t\t\t\t\t\t\tme.max = value;\n\t\t\t\t\t\t} else if (value > me.max) {\n\t\t\t\t\t\t\tme.max = value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (value !== 0 && (me.minNotZero === null || value < me.minNotZero)) {\n\t\t\t\t\t\t\tme.minNotZero = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Common base implementation to handle ticks.min, ticks.max\n\t\tthis.handleTickRangeOptions();\n\t},\n\n\thandleTickRangeOptions: function() {\n\t\tvar me = this;\n\t\tvar tickOpts = me.options.ticks;\n\t\tvar DEFAULT_MIN = 1;\n\t\tvar DEFAULT_MAX = 10;\n\n\t\tme.min = nonNegativeOrDefault(tickOpts.min, me.min);\n\t\tme.max = nonNegativeOrDefault(tickOpts.max, me.max);\n\n\t\tif (me.min === me.max) {\n\t\t\tif (me.min !== 0 && me.min !== null) {\n\t\t\t\tme.min = Math.pow(10, Math.floor(helpers$1.log10(me.min)) - 1);\n\t\t\t\tme.max = Math.pow(10, Math.floor(helpers$1.log10(me.max)) + 1);\n\t\t\t} else {\n\t\t\t\tme.min = DEFAULT_MIN;\n\t\t\t\tme.max = DEFAULT_MAX;\n\t\t\t}\n\t\t}\n\t\tif (me.min === null) {\n\t\t\tme.min = Math.pow(10, Math.floor(helpers$1.log10(me.max)) - 1);\n\t\t}\n\t\tif (me.max === null) {\n\t\t\tme.max = me.min !== 0\n\t\t\t\t? Math.pow(10, Math.floor(helpers$1.log10(me.min)) + 1)\n\t\t\t\t: DEFAULT_MAX;\n\t\t}\n\t\tif (me.minNotZero === null) {\n\t\t\tif (me.min > 0) {\n\t\t\t\tme.minNotZero = me.min;\n\t\t\t} else if (me.max < 1) {\n\t\t\t\tme.minNotZero = Math.pow(10, Math.floor(helpers$1.log10(me.max)));\n\t\t\t} else {\n\t\t\t\tme.minNotZero = DEFAULT_MIN;\n\t\t\t}\n\t\t}\n\t},\n\n\tbuildTicks: function() {\n\t\tvar me = this;\n\t\tvar tickOpts = me.options.ticks;\n\t\tvar reverse = !me.isHorizontal();\n\n\t\tvar generationOptions = {\n\t\t\tmin: nonNegativeOrDefault(tickOpts.min),\n\t\t\tmax: nonNegativeOrDefault(tickOpts.max)\n\t\t};\n\t\tvar ticks = me.ticks = generateTicks$1(generationOptions, me);\n\n\t\t// At this point, we need to update our max and min given the tick values since we have expanded the\n\t\t// range of the scale\n\t\tme.max = helpers$1.max(ticks);\n\t\tme.min = helpers$1.min(ticks);\n\n\t\tif (tickOpts.reverse) {\n\t\t\treverse = !reverse;\n\t\t\tme.start = me.max;\n\t\t\tme.end = me.min;\n\t\t} else {\n\t\t\tme.start = me.min;\n\t\t\tme.end = me.max;\n\t\t}\n\t\tif (reverse) {\n\t\t\tticks.reverse();\n\t\t}\n\t},\n\n\tconvertTicksToLabels: function() {\n\t\tthis.tickValues = this.ticks.slice();\n\n\t\tcore_scale.prototype.convertTicksToLabels.call(this);\n\t},\n\n\t// Get the correct tooltip label\n\tgetLabelForIndex: function(index, datasetIndex) {\n\t\treturn +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n\t},\n\n\tgetPixelForTick: function(index) {\n\t\treturn this.getPixelForValue(this.tickValues[index]);\n\t},\n\n\t/**\n\t * Returns the value of the first tick.\n\t * @param {number} value - The minimum not zero value.\n\t * @return {number} The first tick value.\n\t * @private\n\t */\n\t_getFirstTickValue: function(value) {\n\t\tvar exp = Math.floor(helpers$1.log10(value));\n\t\tvar significand = Math.floor(value / Math.pow(10, exp));\n\n\t\treturn significand * Math.pow(10, exp);\n\t},\n\n\tgetPixelForValue: function(value) {\n\t\tvar me = this;\n\t\tvar tickOpts = me.options.ticks;\n\t\tvar reverse = tickOpts.reverse;\n\t\tvar log10 = helpers$1.log10;\n\t\tvar firstTickValue = me._getFirstTickValue(me.minNotZero);\n\t\tvar offset = 0;\n\t\tvar innerDimension, pixel, start, end, sign;\n\n\t\tvalue = +me.getRightValue(value);\n\t\tif (reverse) {\n\t\t\tstart = me.end;\n\t\t\tend = me.start;\n\t\t\tsign = -1;\n\t\t} else {\n\t\t\tstart = me.start;\n\t\t\tend = me.end;\n\t\t\tsign = 1;\n\t\t}\n\t\tif (me.isHorizontal()) {\n\t\t\tinnerDimension = me.width;\n\t\t\tpixel = reverse ? me.right : me.left;\n\t\t} else {\n\t\t\tinnerDimension = me.height;\n\t\t\tsign *= -1; // invert, since the upper-left corner of the canvas is at pixel (0, 0)\n\t\t\tpixel = reverse ? me.top : me.bottom;\n\t\t}\n\t\tif (value !== start) {\n\t\t\tif (start === 0) { // include zero tick\n\t\t\t\toffset = valueOrDefault$a(tickOpts.fontSize, core_defaults.global.defaultFontSize);\n\t\t\t\tinnerDimension -= offset;\n\t\t\t\tstart = firstTickValue;\n\t\t\t}\n\t\t\tif (value !== 0) {\n\t\t\t\toffset += innerDimension / (log10(end) - log10(start)) * (log10(value) - log10(start));\n\t\t\t}\n\t\t\tpixel += sign * offset;\n\t\t}\n\t\treturn pixel;\n\t},\n\n\tgetValueForPixel: function(pixel) {\n\t\tvar me = this;\n\t\tvar tickOpts = me.options.ticks;\n\t\tvar reverse = tickOpts.reverse;\n\t\tvar log10 = helpers$1.log10;\n\t\tvar firstTickValue = me._getFirstTickValue(me.minNotZero);\n\t\tvar innerDimension, start, end, value;\n\n\t\tif (reverse) {\n\t\t\tstart = me.end;\n\t\t\tend = me.start;\n\t\t} else {\n\t\t\tstart = me.start;\n\t\t\tend = me.end;\n\t\t}\n\t\tif (me.isHorizontal()) {\n\t\t\tinnerDimension = me.width;\n\t\t\tvalue = reverse ? me.right - pixel : pixel - me.left;\n\t\t} else {\n\t\t\tinnerDimension = me.height;\n\t\t\tvalue = reverse ? pixel - me.top : me.bottom - pixel;\n\t\t}\n\t\tif (value !== start) {\n\t\t\tif (start === 0) { // include zero tick\n\t\t\t\tvar offset = valueOrDefault$a(tickOpts.fontSize, core_defaults.global.defaultFontSize);\n\t\t\t\tvalue -= offset;\n\t\t\t\tinnerDimension -= offset;\n\t\t\t\tstart = firstTickValue;\n\t\t\t}\n\t\t\tvalue *= log10(end) - log10(start);\n\t\t\tvalue /= innerDimension;\n\t\t\tvalue = Math.pow(10, log10(start) + value);\n\t\t}\n\t\treturn value;\n\t}\n});\n\n// INTERNAL: static default options, registered in src/index.js\nvar _defaults$2 = defaultConfig$2;\nscale_logarithmic._defaults = _defaults$2;\n\nvar valueOrDefault$b = helpers$1.valueOrDefault;\nvar valueAtIndexOrDefault$1 = helpers$1.valueAtIndexOrDefault;\nvar resolve$7 = helpers$1.options.resolve;\n\nvar defaultConfig$3 = {\n\tdisplay: true,\n\n\t// Boolean - Whether to animate scaling the chart from the centre\n\tanimate: true,\n\tposition: 'chartArea',\n\n\tangleLines: {\n\t\tdisplay: true,\n\t\tcolor: 'rgba(0, 0, 0, 0.1)',\n\t\tlineWidth: 1,\n\t\tborderDash: [],\n\t\tborderDashOffset: 0.0\n\t},\n\n\tgridLines: {\n\t\tcircular: false\n\t},\n\n\t// label settings\n\tticks: {\n\t\t// Boolean - Show a backdrop to the scale label\n\t\tshowLabelBackdrop: true,\n\n\t\t// String - The colour of the label backdrop\n\t\tbackdropColor: 'rgba(255,255,255,0.75)',\n\n\t\t// Number - The backdrop padding above & below the label in pixels\n\t\tbackdropPaddingY: 2,\n\n\t\t// Number - The backdrop padding to the side of the label in pixels\n\t\tbackdropPaddingX: 2,\n\n\t\tcallback: core_ticks.formatters.linear\n\t},\n\n\tpointLabels: {\n\t\t// Boolean - if true, show point labels\n\t\tdisplay: true,\n\n\t\t// Number - Point label font size in pixels\n\t\tfontSize: 10,\n\n\t\t// Function - Used to convert point labels\n\t\tcallback: function(label) {\n\t\t\treturn label;\n\t\t}\n\t}\n};\n\nfunction getValueCount(scale) {\n\tvar opts = scale.options;\n\treturn opts.angleLines.display || opts.pointLabels.display ? scale.chart.data.labels.length : 0;\n}\n\nfunction getTickBackdropHeight(opts) {\n\tvar tickOpts = opts.ticks;\n\n\tif (tickOpts.display && opts.display) {\n\t\treturn valueOrDefault$b(tickOpts.fontSize, core_defaults.global.defaultFontSize) + tickOpts.backdropPaddingY * 2;\n\t}\n\treturn 0;\n}\n\nfunction measureLabelSize(ctx, lineHeight, label) {\n\tif (helpers$1.isArray(label)) {\n\t\treturn {\n\t\t\tw: helpers$1.longestText(ctx, ctx.font, label),\n\t\t\th: label.length * lineHeight\n\t\t};\n\t}\n\n\treturn {\n\t\tw: ctx.measureText(label).width,\n\t\th: lineHeight\n\t};\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n\tif (angle === min || angle === max) {\n\t\treturn {\n\t\t\tstart: pos - (size / 2),\n\t\t\tend: pos + (size / 2)\n\t\t};\n\t} else if (angle < min || angle > max) {\n\t\treturn {\n\t\t\tstart: pos - size,\n\t\t\tend: pos\n\t\t};\n\t}\n\n\treturn {\n\t\tstart: pos,\n\t\tend: pos + size\n\t};\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n\t// Right, this is really confusing and there is a lot of maths going on here\n\t// The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n\t//\n\t// Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n\t//\n\t// Solution:\n\t//\n\t// We assume the radius of the polygon is half the size of the canvas at first\n\t// at each index we check if the text overlaps.\n\t//\n\t// Where it does, we store that angle and that index.\n\t//\n\t// After finding the largest index and angle we calculate how much we need to remove\n\t// from the shape radius to move the point inwards by that x.\n\t//\n\t// We average the left and right distances to get the maximum shape radius that can fit in the box\n\t// along with labels.\n\t//\n\t// Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n\t// on each side, removing that from the size, halving it and adding the left x protrusion width.\n\t//\n\t// This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n\t// and position it in the most space efficient manner\n\t//\n\t// https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n\tvar plFont = helpers$1.options._parseFont(scale.options.pointLabels);\n\n\t// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n\t// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n\tvar furthestLimits = {\n\t\tl: 0,\n\t\tr: scale.width,\n\t\tt: 0,\n\t\tb: scale.height - scale.paddingTop\n\t};\n\tvar furthestAngles = {};\n\tvar i, textSize, pointPosition;\n\n\tscale.ctx.font = plFont.string;\n\tscale._pointLabelSizes = [];\n\n\tvar valueCount = getValueCount(scale);\n\tfor (i = 0; i < valueCount; i++) {\n\t\tpointPosition = scale.getPointPosition(i, scale.drawingArea + 5);\n\t\ttextSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale.pointLabels[i] || '');\n\t\tscale._pointLabelSizes[i] = textSize;\n\n\t\t// Add quarter circle to make degree 0 mean top of circle\n\t\tvar angleRadians = scale.getIndexAngle(i);\n\t\tvar angle = helpers$1.toDegrees(angleRadians) % 360;\n\t\tvar hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n\t\tvar vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n\n\t\tif (hLimits.start < furthestLimits.l) {\n\t\t\tfurthestLimits.l = hLimits.start;\n\t\t\tfurthestAngles.l = angleRadians;\n\t\t}\n\n\t\tif (hLimits.end > furthestLimits.r) {\n\t\t\tfurthestLimits.r = hLimits.end;\n\t\t\tfurthestAngles.r = angleRadians;\n\t\t}\n\n\t\tif (vLimits.start < furthestLimits.t) {\n\t\t\tfurthestLimits.t = vLimits.start;\n\t\t\tfurthestAngles.t = angleRadians;\n\t\t}\n\n\t\tif (vLimits.end > furthestLimits.b) {\n\t\t\tfurthestLimits.b = vLimits.end;\n\t\t\tfurthestAngles.b = angleRadians;\n\t\t}\n\t}\n\n\tscale.setReductions(scale.drawingArea, furthestLimits, furthestAngles);\n}\n\nfunction getTextAlignForAngle(angle) {\n\tif (angle === 0 || angle === 180) {\n\t\treturn 'center';\n\t} else if (angle < 180) {\n\t\treturn 'left';\n\t}\n\n\treturn 'right';\n}\n\nfunction fillText(ctx, text, position, lineHeight) {\n\tvar y = position.y + lineHeight / 2;\n\tvar i, ilen;\n\n\tif (helpers$1.isArray(text)) {\n\t\tfor (i = 0, ilen = text.length; i < ilen; ++i) {\n\t\t\tctx.fillText(text[i], position.x, y);\n\t\t\ty += lineHeight;\n\t\t}\n\t} else {\n\t\tctx.fillText(text, position.x, y);\n\t}\n}\n\nfunction adjustPointPositionForLabelHeight(angle, textSize, position) {\n\tif (angle === 90 || angle === 270) {\n\t\tposition.y -= (textSize.h / 2);\n\t} else if (angle > 270 || angle < 90) {\n\t\tposition.y -= textSize.h;\n\t}\n}\n\nfunction drawPointLabels(scale) {\n\tvar ctx = scale.ctx;\n\tvar opts = scale.options;\n\tvar angleLineOpts = opts.angleLines;\n\tvar gridLineOpts = opts.gridLines;\n\tvar pointLabelOpts = opts.pointLabels;\n\tvar lineWidth = valueOrDefault$b(angleLineOpts.lineWidth, gridLineOpts.lineWidth);\n\tvar lineColor = valueOrDefault$b(angleLineOpts.color, gridLineOpts.color);\n\tvar tickBackdropHeight = getTickBackdropHeight(opts);\n\n\tctx.save();\n\tctx.lineWidth = lineWidth;\n\tctx.strokeStyle = lineColor;\n\tif (ctx.setLineDash) {\n\t\tctx.setLineDash(resolve$7([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));\n\t\tctx.lineDashOffset = resolve$7([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0.0]);\n\t}\n\n\tvar outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);\n\n\t// Point Label Font\n\tvar plFont = helpers$1.options._parseFont(pointLabelOpts);\n\n\tctx.font = plFont.string;\n\tctx.textBaseline = 'middle';\n\n\tfor (var i = getValueCount(scale) - 1; i >= 0; i--) {\n\t\tif (angleLineOpts.display && lineWidth && lineColor) {\n\t\t\tvar outerPosition = scale.getPointPosition(i, outerDistance);\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(scale.xCenter, scale.yCenter);\n\t\t\tctx.lineTo(outerPosition.x, outerPosition.y);\n\t\t\tctx.stroke();\n\t\t}\n\n\t\tif (pointLabelOpts.display) {\n\t\t\t// Extra pixels out for some label spacing\n\t\t\tvar extra = (i === 0 ? tickBackdropHeight / 2 : 0);\n\t\t\tvar pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + 5);\n\n\t\t\t// Keep this in loop since we may support array properties here\n\t\t\tvar pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i, core_defaults.global.defaultFontColor);\n\t\t\tctx.fillStyle = pointLabelFontColor;\n\n\t\t\tvar angleRadians = scale.getIndexAngle(i);\n\t\t\tvar angle = helpers$1.toDegrees(angleRadians);\n\t\t\tctx.textAlign = getTextAlignForAngle(angle);\n\t\t\tadjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);\n\t\t\tfillText(ctx, scale.pointLabels[i] || '', pointLabelPosition, plFont.lineHeight);\n\t\t}\n\t}\n\tctx.restore();\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, index) {\n\tvar ctx = scale.ctx;\n\tvar circular = gridLineOpts.circular;\n\tvar valueCount = getValueCount(scale);\n\tvar lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1);\n\tvar lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1);\n\tvar pointPosition;\n\n\tif ((!circular && !valueCount) || !lineColor || !lineWidth) {\n\t\treturn;\n\t}\n\n\tctx.save();\n\tctx.strokeStyle = lineColor;\n\tctx.lineWidth = lineWidth;\n\tif (ctx.setLineDash) {\n\t\tctx.setLineDash(gridLineOpts.borderDash || []);\n\t\tctx.lineDashOffset = gridLineOpts.borderDashOffset || 0.0;\n\t}\n\n\tctx.beginPath();\n\tif (circular) {\n\t\t// Draw circular arcs between the points\n\t\tctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);\n\t} else {\n\t\t// Draw straight lines connecting each index\n\t\tpointPosition = scale.getPointPosition(0, radius);\n\t\tctx.moveTo(pointPosition.x, pointPosition.y);\n\n\t\tfor (var i = 1; i < valueCount; i++) {\n\t\t\tpointPosition = scale.getPointPosition(i, radius);\n\t\t\tctx.lineTo(pointPosition.x, pointPosition.y);\n\t\t}\n\t}\n\tctx.closePath();\n\tctx.stroke();\n\tctx.restore();\n}\n\nfunction numberOrZero(param) {\n\treturn helpers$1.isNumber(param) ? param : 0;\n}\n\nvar scale_radialLinear = scale_linearbase.extend({\n\tsetDimensions: function() {\n\t\tvar me = this;\n\n\t\t// Set the unconstrained dimension before label rotation\n\t\tme.width = me.maxWidth;\n\t\tme.height = me.maxHeight;\n\t\tme.paddingTop = getTickBackdropHeight(me.options) / 2;\n\t\tme.xCenter = Math.floor(me.width / 2);\n\t\tme.yCenter = Math.floor((me.height - me.paddingTop) / 2);\n\t\tme.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;\n\t},\n\n\tdetermineDataLimits: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar min = Number.POSITIVE_INFINITY;\n\t\tvar max = Number.NEGATIVE_INFINITY;\n\n\t\thelpers$1.each(chart.data.datasets, function(dataset, datasetIndex) {\n\t\t\tif (chart.isDatasetVisible(datasetIndex)) {\n\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\n\t\t\t\thelpers$1.each(dataset.data, function(rawValue, index) {\n\t\t\t\t\tvar value = +me.getRightValue(rawValue);\n\t\t\t\t\tif (isNaN(value) || meta.data[index].hidden) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tmin = Math.min(value, min);\n\t\t\t\t\tmax = Math.max(value, max);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tme.min = (min === Number.POSITIVE_INFINITY ? 0 : min);\n\t\tme.max = (max === Number.NEGATIVE_INFINITY ? 0 : max);\n\n\t\t// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\n\t\tme.handleTickRangeOptions();\n\t},\n\n\t// Returns the maximum number of ticks based on the scale dimension\n\t_computeTickLimit: function() {\n\t\treturn Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n\t},\n\n\tconvertTicksToLabels: function() {\n\t\tvar me = this;\n\n\t\tscale_linearbase.prototype.convertTicksToLabels.call(me);\n\n\t\t// Point labels\n\t\tme.pointLabels = me.chart.data.labels.map(me.options.pointLabels.callback, me);\n\t},\n\n\tgetLabelForIndex: function(index, datasetIndex) {\n\t\treturn +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n\t},\n\n\tfit: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\n\t\tif (opts.display && opts.pointLabels.display) {\n\t\t\tfitWithPointLabels(me);\n\t\t} else {\n\t\t\tme.setCenterPoint(0, 0, 0, 0);\n\t\t}\n\t},\n\n\t/**\n\t * Set radius reductions and determine new radius and center point\n\t * @private\n\t */\n\tsetReductions: function(largestPossibleRadius, furthestLimits, furthestAngles) {\n\t\tvar me = this;\n\t\tvar radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);\n\t\tvar radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);\n\t\tvar radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);\n\t\tvar radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);\n\n\t\tradiusReductionLeft = numberOrZero(radiusReductionLeft);\n\t\tradiusReductionRight = numberOrZero(radiusReductionRight);\n\t\tradiusReductionTop = numberOrZero(radiusReductionTop);\n\t\tradiusReductionBottom = numberOrZero(radiusReductionBottom);\n\n\t\tme.drawingArea = Math.min(\n\t\t\tMath.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),\n\t\t\tMath.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));\n\t\tme.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);\n\t},\n\n\tsetCenterPoint: function(leftMovement, rightMovement, topMovement, bottomMovement) {\n\t\tvar me = this;\n\t\tvar maxRight = me.width - rightMovement - me.drawingArea;\n\t\tvar maxLeft = leftMovement + me.drawingArea;\n\t\tvar maxTop = topMovement + me.drawingArea;\n\t\tvar maxBottom = (me.height - me.paddingTop) - bottomMovement - me.drawingArea;\n\n\t\tme.xCenter = Math.floor(((maxLeft + maxRight) / 2) + me.left);\n\t\tme.yCenter = Math.floor(((maxTop + maxBottom) / 2) + me.top + me.paddingTop);\n\t},\n\n\tgetIndexAngle: function(index) {\n\t\tvar angleMultiplier = (Math.PI * 2) / getValueCount(this);\n\t\tvar startAngle = this.chart.options && this.chart.options.startAngle ?\n\t\t\tthis.chart.options.startAngle :\n\t\t\t0;\n\n\t\tvar startAngleRadians = startAngle * Math.PI * 2 / 360;\n\n\t\t// Start from the top instead of right, so remove a quarter of the circle\n\t\treturn index * angleMultiplier + startAngleRadians;\n\t},\n\n\tgetDistanceFromCenterForValue: function(value) {\n\t\tvar me = this;\n\n\t\tif (value === null) {\n\t\t\treturn 0; // null always in center\n\t\t}\n\n\t\t// Take into account half font size + the yPadding of the top value\n\t\tvar scalingFactor = me.drawingArea / (me.max - me.min);\n\t\tif (me.options.ticks.reverse) {\n\t\t\treturn (me.max - value) * scalingFactor;\n\t\t}\n\t\treturn (value - me.min) * scalingFactor;\n\t},\n\n\tgetPointPosition: function(index, distanceFromCenter) {\n\t\tvar me = this;\n\t\tvar thisAngle = me.getIndexAngle(index) - (Math.PI / 2);\n\t\treturn {\n\t\t\tx: Math.cos(thisAngle) * distanceFromCenter + me.xCenter,\n\t\t\ty: Math.sin(thisAngle) * distanceFromCenter + me.yCenter\n\t\t};\n\t},\n\n\tgetPointPositionForValue: function(index, value) {\n\t\treturn this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n\t},\n\n\tgetBasePosition: function() {\n\t\tvar me = this;\n\t\tvar min = me.min;\n\t\tvar max = me.max;\n\n\t\treturn me.getPointPositionForValue(0,\n\t\t\tme.beginAtZero ? 0 :\n\t\t\tmin < 0 && max < 0 ? max :\n\t\t\tmin > 0 && max > 0 ? min :\n\t\t\t0);\n\t},\n\n\tdraw: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar gridLineOpts = opts.gridLines;\n\t\tvar tickOpts = opts.ticks;\n\n\t\tif (opts.display) {\n\t\t\tvar ctx = me.ctx;\n\t\t\tvar startAngle = this.getIndexAngle(0);\n\t\t\tvar tickFont = helpers$1.options._parseFont(tickOpts);\n\n\t\t\tif (opts.angleLines.display || opts.pointLabels.display) {\n\t\t\t\tdrawPointLabels(me);\n\t\t\t}\n\n\t\t\thelpers$1.each(me.ticks, function(label, index) {\n\t\t\t\t// Don't draw a centre value (if it is minimum)\n\t\t\t\tif (index > 0 || tickOpts.reverse) {\n\t\t\t\t\tvar yCenterOffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);\n\n\t\t\t\t\t// Draw circular lines around the scale\n\t\t\t\t\tif (gridLineOpts.display && index !== 0) {\n\t\t\t\t\t\tdrawRadiusLine(me, gridLineOpts, yCenterOffset, index);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tickOpts.display) {\n\t\t\t\t\t\tvar tickFontColor = valueOrDefault$b(tickOpts.fontColor, core_defaults.global.defaultFontColor);\n\t\t\t\t\t\tctx.font = tickFont.string;\n\n\t\t\t\t\t\tctx.save();\n\t\t\t\t\t\tctx.translate(me.xCenter, me.yCenter);\n\t\t\t\t\t\tctx.rotate(startAngle);\n\n\t\t\t\t\t\tif (tickOpts.showLabelBackdrop) {\n\t\t\t\t\t\t\tvar labelWidth = ctx.measureText(label).width;\n\t\t\t\t\t\t\tctx.fillStyle = tickOpts.backdropColor;\n\t\t\t\t\t\t\tctx.fillRect(\n\t\t\t\t\t\t\t\t-labelWidth / 2 - tickOpts.backdropPaddingX,\n\t\t\t\t\t\t\t\t-yCenterOffset - tickFont.size / 2 - tickOpts.backdropPaddingY,\n\t\t\t\t\t\t\t\tlabelWidth + tickOpts.backdropPaddingX * 2,\n\t\t\t\t\t\t\t\ttickFont.size + tickOpts.backdropPaddingY * 2\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\t\tctx.textBaseline = 'middle';\n\t\t\t\t\t\tctx.fillStyle = tickFontColor;\n\t\t\t\t\t\tctx.fillText(label, 0, -yCenterOffset);\n\t\t\t\t\t\tctx.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n});\n\n// INTERNAL: static default options, registered in src/index.js\nvar _defaults$3 = defaultConfig$3;\nscale_radialLinear._defaults = _defaults$3;\n\nvar valueOrDefault$c = helpers$1.valueOrDefault;\n\n// Integer constants are from the ES6 spec.\nvar MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;\nvar MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\n\nvar INTERVALS = {\n\tmillisecond: {\n\t\tcommon: true,\n\t\tsize: 1,\n\t\tsteps: [1, 2, 5, 10, 20, 50, 100, 250, 500]\n\t},\n\tsecond: {\n\t\tcommon: true,\n\t\tsize: 1000,\n\t\tsteps: [1, 2, 5, 10, 15, 30]\n\t},\n\tminute: {\n\t\tcommon: true,\n\t\tsize: 60000,\n\t\tsteps: [1, 2, 5, 10, 15, 30]\n\t},\n\thour: {\n\t\tcommon: true,\n\t\tsize: 3600000,\n\t\tsteps: [1, 2, 3, 6, 12]\n\t},\n\tday: {\n\t\tcommon: true,\n\t\tsize: 86400000,\n\t\tsteps: [1, 2, 5]\n\t},\n\tweek: {\n\t\tcommon: false,\n\t\tsize: 604800000,\n\t\tsteps: [1, 2, 3, 4]\n\t},\n\tmonth: {\n\t\tcommon: true,\n\t\tsize: 2.628e9,\n\t\tsteps: [1, 2, 3]\n\t},\n\tquarter: {\n\t\tcommon: false,\n\t\tsize: 7.884e9,\n\t\tsteps: [1, 2, 3, 4]\n\t},\n\tyear: {\n\t\tcommon: true,\n\t\tsize: 3.154e10\n\t}\n};\n\nvar UNITS = Object.keys(INTERVALS);\n\nfunction sorter(a, b) {\n\treturn a - b;\n}\n\nfunction arrayUnique(items) {\n\tvar hash = {};\n\tvar out = [];\n\tvar i, ilen, item;\n\n\tfor (i = 0, ilen = items.length; i < ilen; ++i) {\n\t\titem = items[i];\n\t\tif (!hash[item]) {\n\t\t\thash[item] = true;\n\t\t\tout.push(item);\n\t\t}\n\t}\n\n\treturn out;\n}\n\n/**\n * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n * extremity (left + width or top + height). Note that it would be more optimized to directly\n * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n *\n * @param {number[]} timestamps - timestamps sorted from lowest to highest.\n * @param {string} distribution - If 'linear', timestamps will be spread linearly along the min\n * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.\n * If 'series', timestamps will be positioned at the same distance from each other. In this\n * case, only timestamps that break the time linearity are registered, meaning that in the\n * best case, all timestamps are linear, the table contains only min and max.\n */\nfunction buildLookupTable(timestamps, min, max, distribution) {\n\tif (distribution === 'linear' || !timestamps.length) {\n\t\treturn [\n\t\t\t{time: min, pos: 0},\n\t\t\t{time: max, pos: 1}\n\t\t];\n\t}\n\n\tvar table = [];\n\tvar items = [min];\n\tvar i, ilen, prev, curr, next;\n\n\tfor (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n\t\tcurr = timestamps[i];\n\t\tif (curr > min && curr < max) {\n\t\t\titems.push(curr);\n\t\t}\n\t}\n\n\titems.push(max);\n\n\tfor (i = 0, ilen = items.length; i < ilen; ++i) {\n\t\tnext = items[i + 1];\n\t\tprev = items[i - 1];\n\t\tcurr = items[i];\n\n\t\t// only add points that breaks the scale linearity\n\t\tif (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {\n\t\t\ttable.push({time: curr, pos: i / (ilen - 1)});\n\t\t}\n\t}\n\n\treturn table;\n}\n\n// @see adapted from https://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/\nfunction lookup(table, key, value) {\n\tvar lo = 0;\n\tvar hi = table.length - 1;\n\tvar mid, i0, i1;\n\n\twhile (lo >= 0 && lo <= hi) {\n\t\tmid = (lo + hi) >> 1;\n\t\ti0 = table[mid - 1] || null;\n\t\ti1 = table[mid];\n\n\t\tif (!i0) {\n\t\t\t// given value is outside table (before first item)\n\t\t\treturn {lo: null, hi: i1};\n\t\t} else if (i1[key] < value) {\n\t\t\tlo = mid + 1;\n\t\t} else if (i0[key] > value) {\n\t\t\thi = mid - 1;\n\t\t} else {\n\t\t\treturn {lo: i0, hi: i1};\n\t\t}\n\t}\n\n\t// given value is outside table (after last item)\n\treturn {lo: i1, hi: null};\n}\n\n/**\n * Linearly interpolates the given source `value` using the table items `skey` values and\n * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')\n * returns the position for a timestamp equal to 42. If value is out of bounds, values at\n * index [0, 1] or [n - 1, n] are used for the interpolation.\n */\nfunction interpolate$1(table, skey, sval, tkey) {\n\tvar range = lookup(table, skey, sval);\n\n\t// Note: the lookup table ALWAYS contains at least 2 items (min and max)\n\tvar prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;\n\tvar next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;\n\n\tvar span = next[skey] - prev[skey];\n\tvar ratio = span ? (sval - prev[skey]) / span : 0;\n\tvar offset = (next[tkey] - prev[tkey]) * ratio;\n\n\treturn prev[tkey] + offset;\n}\n\nfunction toTimestamp(scale, input) {\n\tvar adapter = scale._adapter;\n\tvar options = scale.options.time;\n\tvar parser = options.parser;\n\tvar format = parser || options.format;\n\tvar value = input;\n\n\tif (typeof parser === 'function') {\n\t\tvalue = parser(value);\n\t}\n\n\t// Only parse if its not a timestamp already\n\tif (!helpers$1.isFinite(value)) {\n\t\tvalue = typeof format === 'string'\n\t\t\t? adapter.parse(value, format)\n\t\t\t: adapter.parse(value);\n\t}\n\n\tif (value !== null) {\n\t\treturn +value;\n\t}\n\n\t// Labels are in an incompatible format and no `parser` has been provided.\n\t// The user might still use the deprecated `format` option for parsing.\n\tif (!parser && typeof format === 'function') {\n\t\tvalue = format(input);\n\n\t\t// `format` could return something else than a timestamp, if so, parse it\n\t\tif (!helpers$1.isFinite(value)) {\n\t\t\tvalue = adapter.parse(value);\n\t\t}\n\t}\n\n\treturn value;\n}\n\nfunction parse(scale, input) {\n\tif (helpers$1.isNullOrUndef(input)) {\n\t\treturn null;\n\t}\n\n\tvar options = scale.options.time;\n\tvar value = toTimestamp(scale, scale.getRightValue(input));\n\tif (value === null) {\n\t\treturn value;\n\t}\n\n\tif (options.round) {\n\t\tvalue = +scale._adapter.startOf(value, options.round);\n\t}\n\n\treturn value;\n}\n\n/**\n * Returns the number of unit to skip to be able to display up to `capacity` number of ticks\n * in `unit` for the given `min` / `max` range and respecting the interval steps constraints.\n */\nfunction determineStepSize(min, max, unit, capacity) {\n\tvar range = max - min;\n\tvar interval = INTERVALS[unit];\n\tvar milliseconds = interval.size;\n\tvar steps = interval.steps;\n\tvar i, ilen, factor;\n\n\tif (!steps) {\n\t\treturn Math.ceil(range / (capacity * milliseconds));\n\t}\n\n\tfor (i = 0, ilen = steps.length; i < ilen; ++i) {\n\t\tfactor = steps[i];\n\t\tif (Math.ceil(range / (milliseconds * factor)) <= capacity) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn factor;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n\tvar ilen = UNITS.length;\n\tvar i, interval, factor;\n\n\tfor (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n\t\tinterval = INTERVALS[UNITS[i]];\n\t\tfactor = interval.steps ? interval.steps[interval.steps.length - 1] : MAX_INTEGER;\n\n\t\tif (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n\t\t\treturn UNITS[i];\n\t\t}\n\t}\n\n\treturn UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n */\nfunction determineUnitForFormatting(scale, ticks, minUnit, min, max) {\n\tvar ilen = UNITS.length;\n\tvar i, unit;\n\n\tfor (i = ilen - 1; i >= UNITS.indexOf(minUnit); i--) {\n\t\tunit = UNITS[i];\n\t\tif (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= ticks.length) {\n\t\t\treturn unit;\n\t\t}\n\t}\n\n\treturn UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\nfunction determineMajorUnit(unit) {\n\tfor (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n\t\tif (INTERVALS[UNITS[i]].common) {\n\t\t\treturn UNITS[i];\n\t\t}\n\t}\n}\n\n/**\n * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n * `minor` unit, aligned on the `major` unit and using the given scale time `options`.\n * Important: this method can return ticks outside the min and max range, it's the\n * responsibility of the calling code to clamp values if needed.\n */\nfunction generate(scale, min, max, capacity) {\n\tvar adapter = scale._adapter;\n\tvar options = scale.options;\n\tvar timeOpts = options.time;\n\tvar minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);\n\tvar major = determineMajorUnit(minor);\n\tvar stepSize = valueOrDefault$c(timeOpts.stepSize, timeOpts.unitStepSize);\n\tvar weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n\tvar majorTicksEnabled = options.ticks.major.enabled;\n\tvar interval = INTERVALS[minor];\n\tvar first = min;\n\tvar last = max;\n\tvar ticks = [];\n\tvar time;\n\n\tif (!stepSize) {\n\t\tstepSize = determineStepSize(min, max, minor, capacity);\n\t}\n\n\t// For 'week' unit, handle the first day of week option\n\tif (weekday) {\n\t\tfirst = +adapter.startOf(first, 'isoWeek', weekday);\n\t\tlast = +adapter.startOf(last, 'isoWeek', weekday);\n\t}\n\n\t// Align first/last ticks on unit\n\tfirst = +adapter.startOf(first, weekday ? 'day' : minor);\n\tlast = +adapter.startOf(last, weekday ? 'day' : minor);\n\n\t// Make sure that the last tick include max\n\tif (last < max) {\n\t\tlast = +adapter.add(last, 1, minor);\n\t}\n\n\ttime = first;\n\n\tif (majorTicksEnabled && major && !weekday && !timeOpts.round) {\n\t\t// Align the first tick on the previous `minor` unit aligned on the `major` unit:\n\t\t// we first aligned time on the previous `major` unit then add the number of full\n\t\t// stepSize there is between first and the previous major time.\n\t\ttime = +adapter.startOf(time, major);\n\t\ttime = +adapter.add(time, ~~((first - time) / (interval.size * stepSize)) * stepSize, minor);\n\t}\n\n\tfor (; time < last; time = +adapter.add(time, stepSize, minor)) {\n\t\tticks.push(+time);\n\t}\n\n\tticks.push(+time);\n\n\treturn ticks;\n}\n\n/**\n * Returns the start and end offsets from edges in the form of {start, end}\n * where each value is a relative width to the scale and ranges between 0 and 1.\n * They add extra margins on the both sides by scaling down the original scale.\n * Offsets are added when the `offset` option is true.\n */\nfunction computeOffsets(table, ticks, min, max, options) {\n\tvar start = 0;\n\tvar end = 0;\n\tvar first, last;\n\n\tif (options.offset && ticks.length) {\n\t\tif (!options.time.min) {\n\t\t\tfirst = interpolate$1(table, 'time', ticks[0], 'pos');\n\t\t\tif (ticks.length === 1) {\n\t\t\t\tstart = 1 - first;\n\t\t\t} else {\n\t\t\t\tstart = (interpolate$1(table, 'time', ticks[1], 'pos') - first) / 2;\n\t\t\t}\n\t\t}\n\t\tif (!options.time.max) {\n\t\t\tlast = interpolate$1(table, 'time', ticks[ticks.length - 1], 'pos');\n\t\t\tif (ticks.length === 1) {\n\t\t\t\tend = last;\n\t\t\t} else {\n\t\t\t\tend = (last - interpolate$1(table, 'time', ticks[ticks.length - 2], 'pos')) / 2;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {start: start, end: end};\n}\n\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n\tvar ticks = [];\n\tvar i, ilen, value, major;\n\n\tfor (i = 0, ilen = values.length; i < ilen; ++i) {\n\t\tvalue = values[i];\n\t\tmajor = majorUnit ? value === +scale._adapter.startOf(value, majorUnit) : false;\n\n\t\tticks.push({\n\t\t\tvalue: value,\n\t\t\tmajor: major\n\t\t});\n\t}\n\n\treturn ticks;\n}\n\nvar defaultConfig$4 = {\n\tposition: 'bottom',\n\n\t/**\n\t * Data distribution along the scale:\n\t * - 'linear': data are spread according to their time (distances can vary),\n\t * - 'series': data are spread at the same distance from each other.\n\t * @see https://github.com/chartjs/Chart.js/pull/4507\n\t * @since 2.7.0\n\t */\n\tdistribution: 'linear',\n\n\t/**\n\t * Scale boundary strategy (bypassed by min/max time options)\n\t * - `data`: make sure data are fully visible, ticks outside are removed\n\t * - `ticks`: make sure ticks are fully visible, data outside are truncated\n\t * @see https://github.com/chartjs/Chart.js/pull/4556\n\t * @since 2.7.0\n\t */\n\tbounds: 'data',\n\n\tadapters: {},\n\ttime: {\n\t\tparser: false, // false == a pattern string from https://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment\n\t\tformat: false, // DEPRECATED false == date objects, moment object, callback or a pattern string from https://momentjs.com/docs/#/parsing/string-format/\n\t\tunit: false, // false == automatic or override with week, month, year, etc.\n\t\tround: false, // none, or override with week, month, year, etc.\n\t\tdisplayFormat: false, // DEPRECATED\n\t\tisoWeekday: false, // override week start day - see https://momentjs.com/docs/#/get-set/iso-weekday/\n\t\tminUnit: 'millisecond',\n\t\tdisplayFormats: {}\n\t},\n\tticks: {\n\t\tautoSkip: false,\n\n\t\t/**\n\t\t * Ticks generation input values:\n\t\t * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n\t\t * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n\t\t * - 'labels': generates ticks from user given `data.labels` values ONLY.\n\t\t * @see https://github.com/chartjs/Chart.js/pull/4507\n\t\t * @since 2.7.0\n\t\t */\n\t\tsource: 'auto',\n\n\t\tmajor: {\n\t\t\tenabled: false\n\t\t}\n\t}\n};\n\nvar scale_time = core_scale.extend({\n\tinitialize: function() {\n\t\tthis.mergeTicksOptions();\n\t\tcore_scale.prototype.initialize.call(this);\n\t},\n\n\tupdate: function() {\n\t\tvar me = this;\n\t\tvar options = me.options;\n\t\tvar time = options.time || (options.time = {});\n\t\tvar adapter = me._adapter = new core_adapters._date(options.adapters.date);\n\n\t\t// DEPRECATIONS: output a message only one time per update\n\t\tif (time.format) {\n\t\t\tconsole.warn('options.time.format is deprecated and replaced by options.time.parser.');\n\t\t}\n\n\t\t// Backward compatibility: before introducing adapter, `displayFormats` was\n\t\t// supposed to contain *all* unit/string pairs but this can't be resolved\n\t\t// when loading the scale (adapters are loaded afterward), so let's populate\n\t\t// missing formats on update\n\t\thelpers$1.mergeIf(time.displayFormats, adapter.formats());\n\n\t\treturn core_scale.prototype.update.apply(me, arguments);\n\t},\n\n\t/**\n\t * Allows data to be referenced via 't' attribute\n\t */\n\tgetRightValue: function(rawValue) {\n\t\tif (rawValue && rawValue.t !== undefined) {\n\t\t\trawValue = rawValue.t;\n\t\t}\n\t\treturn core_scale.prototype.getRightValue.call(this, rawValue);\n\t},\n\n\tdetermineDataLimits: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar adapter = me._adapter;\n\t\tvar timeOpts = me.options.time;\n\t\tvar unit = timeOpts.unit || 'day';\n\t\tvar min = MAX_INTEGER;\n\t\tvar max = MIN_INTEGER;\n\t\tvar timestamps = [];\n\t\tvar datasets = [];\n\t\tvar labels = [];\n\t\tvar i, j, ilen, jlen, data, timestamp;\n\t\tvar dataLabels = chart.data.labels || [];\n\n\t\t// Convert labels to timestamps\n\t\tfor (i = 0, ilen = dataLabels.length; i < ilen; ++i) {\n\t\t\tlabels.push(parse(me, dataLabels[i]));\n\t\t}\n\n\t\t// Convert data to timestamps\n\t\tfor (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n\t\t\tif (chart.isDatasetVisible(i)) {\n\t\t\t\tdata = chart.data.datasets[i].data;\n\n\t\t\t\t// Let's consider that all data have the same format.\n\t\t\t\tif (helpers$1.isObject(data[0])) {\n\t\t\t\t\tdatasets[i] = [];\n\n\t\t\t\t\tfor (j = 0, jlen = data.length; j < jlen; ++j) {\n\t\t\t\t\t\ttimestamp = parse(me, data[j]);\n\t\t\t\t\t\ttimestamps.push(timestamp);\n\t\t\t\t\t\tdatasets[i][j] = timestamp;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (j = 0, jlen = labels.length; j < jlen; ++j) {\n\t\t\t\t\t\ttimestamps.push(labels[j]);\n\t\t\t\t\t}\n\t\t\t\t\tdatasets[i] = labels.slice(0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdatasets[i] = [];\n\t\t\t}\n\t\t}\n\n\t\tif (labels.length) {\n\t\t\t// Sort labels **after** data have been converted\n\t\t\tlabels = arrayUnique(labels).sort(sorter);\n\t\t\tmin = Math.min(min, labels[0]);\n\t\t\tmax = Math.max(max, labels[labels.length - 1]);\n\t\t}\n\n\t\tif (timestamps.length) {\n\t\t\ttimestamps = arrayUnique(timestamps).sort(sorter);\n\t\t\tmin = Math.min(min, timestamps[0]);\n\t\t\tmax = Math.max(max, timestamps[timestamps.length - 1]);\n\t\t}\n\n\t\tmin = parse(me, timeOpts.min) || min;\n\t\tmax = parse(me, timeOpts.max) || max;\n\n\t\t// In case there is no valid min/max, set limits based on unit time option\n\t\tmin = min === MAX_INTEGER ? +adapter.startOf(Date.now(), unit) : min;\n\t\tmax = max === MIN_INTEGER ? +adapter.endOf(Date.now(), unit) + 1 : max;\n\n\t\t// Make sure that max is strictly higher than min (required by the lookup table)\n\t\tme.min = Math.min(min, max);\n\t\tme.max = Math.max(min + 1, max);\n\n\t\t// PRIVATE\n\t\tme._horizontal = me.isHorizontal();\n\t\tme._table = [];\n\t\tme._timestamps = {\n\t\t\tdata: timestamps,\n\t\t\tdatasets: datasets,\n\t\t\tlabels: labels\n\t\t};\n\t},\n\n\tbuildTicks: function() {\n\t\tvar me = this;\n\t\tvar min = me.min;\n\t\tvar max = me.max;\n\t\tvar options = me.options;\n\t\tvar timeOpts = options.time;\n\t\tvar timestamps = [];\n\t\tvar ticks = [];\n\t\tvar i, ilen, timestamp;\n\n\t\tswitch (options.ticks.source) {\n\t\tcase 'data':\n\t\t\ttimestamps = me._timestamps.data;\n\t\t\tbreak;\n\t\tcase 'labels':\n\t\t\ttimestamps = me._timestamps.labels;\n\t\t\tbreak;\n\t\tcase 'auto':\n\t\tdefault:\n\t\t\ttimestamps = generate(me, min, max, me.getLabelCapacity(min), options);\n\t\t}\n\n\t\tif (options.bounds === 'ticks' && timestamps.length) {\n\t\t\tmin = timestamps[0];\n\t\t\tmax = timestamps[timestamps.length - 1];\n\t\t}\n\n\t\t// Enforce limits with user min/max options\n\t\tmin = parse(me, timeOpts.min) || min;\n\t\tmax = parse(me, timeOpts.max) || max;\n\n\t\t// Remove ticks outside the min/max range\n\t\tfor (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n\t\t\ttimestamp = timestamps[i];\n\t\t\tif (timestamp >= min && timestamp <= max) {\n\t\t\t\tticks.push(timestamp);\n\t\t\t}\n\t\t}\n\n\t\tme.min = min;\n\t\tme.max = max;\n\n\t\t// PRIVATE\n\t\tme._unit = timeOpts.unit || determineUnitForFormatting(me, ticks, timeOpts.minUnit, me.min, me.max);\n\t\tme._majorUnit = determineMajorUnit(me._unit);\n\t\tme._table = buildLookupTable(me._timestamps.data, min, max, options.distribution);\n\t\tme._offsets = computeOffsets(me._table, ticks, min, max, options);\n\n\t\tif (options.ticks.reverse) {\n\t\t\tticks.reverse();\n\t\t}\n\n\t\treturn ticksFromTimestamps(me, ticks, me._majorUnit);\n\t},\n\n\tgetLabelForIndex: function(index, datasetIndex) {\n\t\tvar me = this;\n\t\tvar adapter = me._adapter;\n\t\tvar data = me.chart.data;\n\t\tvar timeOpts = me.options.time;\n\t\tvar label = data.labels && index < data.labels.length ? data.labels[index] : '';\n\t\tvar value = data.datasets[datasetIndex].data[index];\n\n\t\tif (helpers$1.isObject(value)) {\n\t\t\tlabel = me.getRightValue(value);\n\t\t}\n\t\tif (timeOpts.tooltipFormat) {\n\t\t\treturn adapter.format(toTimestamp(me, label), timeOpts.tooltipFormat);\n\t\t}\n\t\tif (typeof label === 'string') {\n\t\t\treturn label;\n\t\t}\n\t\treturn adapter.format(toTimestamp(me, label), timeOpts.displayFormats.datetime);\n\t},\n\n\t/**\n\t * Function to format an individual tick mark\n\t * @private\n\t */\n\ttickFormatFunction: function(time, index, ticks, format) {\n\t\tvar me = this;\n\t\tvar adapter = me._adapter;\n\t\tvar options = me.options;\n\t\tvar formats = options.time.displayFormats;\n\t\tvar minorFormat = formats[me._unit];\n\t\tvar majorUnit = me._majorUnit;\n\t\tvar majorFormat = formats[majorUnit];\n\t\tvar majorTime = +adapter.startOf(time, majorUnit);\n\t\tvar majorTickOpts = options.ticks.major;\n\t\tvar major = majorTickOpts.enabled && majorUnit && majorFormat && time === majorTime;\n\t\tvar label = adapter.format(time, format ? format : major ? majorFormat : minorFormat);\n\t\tvar tickOpts = major ? majorTickOpts : options.ticks.minor;\n\t\tvar formatter = valueOrDefault$c(tickOpts.callback, tickOpts.userCallback);\n\n\t\treturn formatter ? formatter(label, index, ticks) : label;\n\t},\n\n\tconvertTicksToLabels: function(ticks) {\n\t\tvar labels = [];\n\t\tvar i, ilen;\n\n\t\tfor (i = 0, ilen = ticks.length; i < ilen; ++i) {\n\t\t\tlabels.push(this.tickFormatFunction(ticks[i].value, i, ticks));\n\t\t}\n\n\t\treturn labels;\n\t},\n\n\t/**\n\t * @private\n\t */\n\tgetPixelForOffset: function(time) {\n\t\tvar me = this;\n\t\tvar isReverse = me.options.ticks.reverse;\n\t\tvar size = me._horizontal ? me.width : me.height;\n\t\tvar start = me._horizontal ? isReverse ? me.right : me.left : isReverse ? me.bottom : me.top;\n\t\tvar pos = interpolate$1(me._table, 'time', time, 'pos');\n\t\tvar offset = size * (me._offsets.start + pos) / (me._offsets.start + 1 + me._offsets.end);\n\n\t\treturn isReverse ? start - offset : start + offset;\n\t},\n\n\tgetPixelForValue: function(value, index, datasetIndex) {\n\t\tvar me = this;\n\t\tvar time = null;\n\n\t\tif (index !== undefined && datasetIndex !== undefined) {\n\t\t\ttime = me._timestamps.datasets[datasetIndex][index];\n\t\t}\n\n\t\tif (time === null) {\n\t\t\ttime = parse(me, value);\n\t\t}\n\n\t\tif (time !== null) {\n\t\t\treturn me.getPixelForOffset(time);\n\t\t}\n\t},\n\n\tgetPixelForTick: function(index) {\n\t\tvar ticks = this.getTicks();\n\t\treturn index >= 0 && index < ticks.length ?\n\t\t\tthis.getPixelForOffset(ticks[index].value) :\n\t\t\tnull;\n\t},\n\n\tgetValueForPixel: function(pixel) {\n\t\tvar me = this;\n\t\tvar size = me._horizontal ? me.width : me.height;\n\t\tvar start = me._horizontal ? me.left : me.top;\n\t\tvar pos = (size ? (pixel - start) / size : 0) * (me._offsets.start + 1 + me._offsets.start) - me._offsets.end;\n\t\tvar time = interpolate$1(me._table, 'pos', pos, 'time');\n\n\t\t// DEPRECATION, we should return time directly\n\t\treturn me._adapter._create(time);\n\t},\n\n\t/**\n\t * Crude approximation of what the label width might be\n\t * @private\n\t */\n\tgetLabelWidth: function(label) {\n\t\tvar me = this;\n\t\tvar ticksOpts = me.options.ticks;\n\t\tvar tickLabelWidth = me.ctx.measureText(label).width;\n\t\tvar angle = helpers$1.toRadians(ticksOpts.maxRotation);\n\t\tvar cosRotation = Math.cos(angle);\n\t\tvar sinRotation = Math.sin(angle);\n\t\tvar tickFontSize = valueOrDefault$c(ticksOpts.fontSize, core_defaults.global.defaultFontSize);\n\n\t\treturn (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tgetLabelCapacity: function(exampleTime) {\n\t\tvar me = this;\n\n\t\t// pick the longest format (milliseconds) for guestimation\n\t\tvar format = me.options.time.displayFormats.millisecond;\n\t\tvar exampleLabel = me.tickFormatFunction(exampleTime, 0, [], format);\n\t\tvar tickLabelWidth = me.getLabelWidth(exampleLabel);\n\t\tvar innerWidth = me.isHorizontal() ? me.width : me.height;\n\t\tvar capacity = Math.floor(innerWidth / tickLabelWidth);\n\n\t\treturn capacity > 0 ? capacity : 1;\n\t}\n});\n\n// INTERNAL: static default options, registered in src/index.js\nvar _defaults$4 = defaultConfig$4;\nscale_time._defaults = _defaults$4;\n\nvar scales = {\n\tcategory: scale_category,\n\tlinear: scale_linear,\n\tlogarithmic: scale_logarithmic,\n\tradialLinear: scale_radialLinear,\n\ttime: scale_time\n};\n\nvar FORMATS = {\n\tdatetime: 'MMM D, YYYY, h:mm:ss a',\n\tmillisecond: 'h:mm:ss.SSS a',\n\tsecond: 'h:mm:ss a',\n\tminute: 'h:mm a',\n\thour: 'hA',\n\tday: 'MMM D',\n\tweek: 'll',\n\tmonth: 'MMM YYYY',\n\tquarter: '[Q]Q - YYYY',\n\tyear: 'YYYY'\n};\n\ncore_adapters._date.override(typeof moment === 'function' ? {\n\t_id: 'moment', // DEBUG ONLY\n\n\tformats: function() {\n\t\treturn FORMATS;\n\t},\n\n\tparse: function(value, format) {\n\t\tif (typeof value === 'string' && typeof format === 'string') {\n\t\t\tvalue = moment(value, format);\n\t\t} else if (!(value instanceof moment)) {\n\t\t\tvalue = moment(value);\n\t\t}\n\t\treturn value.isValid() ? value.valueOf() : null;\n\t},\n\n\tformat: function(time, format) {\n\t\treturn moment(time).format(format);\n\t},\n\n\tadd: function(time, amount, unit) {\n\t\treturn moment(time).add(amount, unit).valueOf();\n\t},\n\n\tdiff: function(max, min, unit) {\n\t\treturn moment.duration(moment(max).diff(moment(min))).as(unit);\n\t},\n\n\tstartOf: function(time, unit, weekday) {\n\t\ttime = moment(time);\n\t\tif (unit === 'isoWeek') {\n\t\t\treturn time.isoWeekday(weekday).valueOf();\n\t\t}\n\t\treturn time.startOf(unit).valueOf();\n\t},\n\n\tendOf: function(time, unit) {\n\t\treturn moment(time).endOf(unit).valueOf();\n\t},\n\n\t// DEPRECATIONS\n\n\t/**\n\t * Provided for backward compatibility with scale.getValueForPixel().\n\t * @deprecated since version 2.8.0\n\t * @todo remove at version 3\n\t * @private\n\t */\n\t_create: function(time) {\n\t\treturn moment(time);\n\t},\n} : {});\n\ncore_defaults._set('global', {\n\tplugins: {\n\t\tfiller: {\n\t\t\tpropagate: true\n\t\t}\n\t}\n});\n\nvar mappers = {\n\tdataset: function(source) {\n\t\tvar index = source.fill;\n\t\tvar chart = source.chart;\n\t\tvar meta = chart.getDatasetMeta(index);\n\t\tvar visible = meta && chart.isDatasetVisible(index);\n\t\tvar points = (visible && meta.dataset._children) || [];\n\t\tvar length = points.length || 0;\n\n\t\treturn !length ? null : function(point, i) {\n\t\t\treturn (i < length && points[i]._view) || null;\n\t\t};\n\t},\n\n\tboundary: function(source) {\n\t\tvar boundary = source.boundary;\n\t\tvar x = boundary ? boundary.x : null;\n\t\tvar y = boundary ? boundary.y : null;\n\n\t\treturn function(point) {\n\t\t\treturn {\n\t\t\t\tx: x === null ? point.x : x,\n\t\t\t\ty: y === null ? point.y : y,\n\t\t\t};\n\t\t};\n\t}\n};\n\n// @todo if (fill[0] === '#')\nfunction decodeFill(el, index, count) {\n\tvar model = el._model || {};\n\tvar fill = model.fill;\n\tvar target;\n\n\tif (fill === undefined) {\n\t\tfill = !!model.backgroundColor;\n\t}\n\n\tif (fill === false || fill === null) {\n\t\treturn false;\n\t}\n\n\tif (fill === true) {\n\t\treturn 'origin';\n\t}\n\n\ttarget = parseFloat(fill, 10);\n\tif (isFinite(target) && Math.floor(target) === target) {\n\t\tif (fill[0] === '-' || fill[0] === '+') {\n\t\t\ttarget = index + target;\n\t\t}\n\n\t\tif (target === index || target < 0 || target >= count) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn target;\n\t}\n\n\tswitch (fill) {\n\t// compatibility\n\tcase 'bottom':\n\t\treturn 'start';\n\tcase 'top':\n\t\treturn 'end';\n\tcase 'zero':\n\t\treturn 'origin';\n\t// supported boundaries\n\tcase 'origin':\n\tcase 'start':\n\tcase 'end':\n\t\treturn fill;\n\t// invalid fill values\n\tdefault:\n\t\treturn false;\n\t}\n}\n\nfunction computeBoundary(source) {\n\tvar model = source.el._model || {};\n\tvar scale = source.el._scale || {};\n\tvar fill = source.fill;\n\tvar target = null;\n\tvar horizontal;\n\n\tif (isFinite(fill)) {\n\t\treturn null;\n\t}\n\n\t// Backward compatibility: until v3, we still need to support boundary values set on\n\t// the model (scaleTop, scaleBottom and scaleZero) because some external plugins and\n\t// controllers might still use it (e.g. the Smith chart).\n\n\tif (fill === 'start') {\n\t\ttarget = model.scaleBottom === undefined ? scale.bottom : model.scaleBottom;\n\t} else if (fill === 'end') {\n\t\ttarget = model.scaleTop === undefined ? scale.top : model.scaleTop;\n\t} else if (model.scaleZero !== undefined) {\n\t\ttarget = model.scaleZero;\n\t} else if (scale.getBasePosition) {\n\t\ttarget = scale.getBasePosition();\n\t} else if (scale.getBasePixel) {\n\t\ttarget = scale.getBasePixel();\n\t}\n\n\tif (target !== undefined && target !== null) {\n\t\tif (target.x !== undefined && target.y !== undefined) {\n\t\t\treturn target;\n\t\t}\n\n\t\tif (helpers$1.isFinite(target)) {\n\t\t\thorizontal = scale.isHorizontal();\n\t\t\treturn {\n\t\t\t\tx: horizontal ? target : null,\n\t\t\t\ty: horizontal ? null : target\n\t\t\t};\n\t\t}\n\t}\n\n\treturn null;\n}\n\nfunction resolveTarget(sources, index, propagate) {\n\tvar source = sources[index];\n\tvar fill = source.fill;\n\tvar visited = [index];\n\tvar target;\n\n\tif (!propagate) {\n\t\treturn fill;\n\t}\n\n\twhile (fill !== false && visited.indexOf(fill) === -1) {\n\t\tif (!isFinite(fill)) {\n\t\t\treturn fill;\n\t\t}\n\n\t\ttarget = sources[fill];\n\t\tif (!target) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (target.visible) {\n\t\t\treturn fill;\n\t\t}\n\n\t\tvisited.push(fill);\n\t\tfill = target.fill;\n\t}\n\n\treturn false;\n}\n\nfunction createMapper(source) {\n\tvar fill = source.fill;\n\tvar type = 'dataset';\n\n\tif (fill === false) {\n\t\treturn null;\n\t}\n\n\tif (!isFinite(fill)) {\n\t\ttype = 'boundary';\n\t}\n\n\treturn mappers[type](source);\n}\n\nfunction isDrawable(point) {\n\treturn point && !point.skip;\n}\n\nfunction drawArea(ctx, curve0, curve1, len0, len1) {\n\tvar i;\n\n\tif (!len0 || !len1) {\n\t\treturn;\n\t}\n\n\t// building first area curve (normal)\n\tctx.moveTo(curve0[0].x, curve0[0].y);\n\tfor (i = 1; i < len0; ++i) {\n\t\thelpers$1.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);\n\t}\n\n\t// joining the two area curves\n\tctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y);\n\n\t// building opposite area curve (reverse)\n\tfor (i = len1 - 1; i > 0; --i) {\n\t\thelpers$1.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);\n\t}\n}\n\nfunction doFill(ctx, points, mapper, view, color, loop) {\n\tvar count = points.length;\n\tvar span = view.spanGaps;\n\tvar curve0 = [];\n\tvar curve1 = [];\n\tvar len0 = 0;\n\tvar len1 = 0;\n\tvar i, ilen, index, p0, p1, d0, d1;\n\n\tctx.beginPath();\n\n\tfor (i = 0, ilen = (count + !!loop); i < ilen; ++i) {\n\t\tindex = i % count;\n\t\tp0 = points[index]._view;\n\t\tp1 = mapper(p0, index, view);\n\t\td0 = isDrawable(p0);\n\t\td1 = isDrawable(p1);\n\n\t\tif (d0 && d1) {\n\t\t\tlen0 = curve0.push(p0);\n\t\t\tlen1 = curve1.push(p1);\n\t\t} else if (len0 && len1) {\n\t\t\tif (!span) {\n\t\t\t\tdrawArea(ctx, curve0, curve1, len0, len1);\n\t\t\t\tlen0 = len1 = 0;\n\t\t\t\tcurve0 = [];\n\t\t\t\tcurve1 = [];\n\t\t\t} else {\n\t\t\t\tif (d0) {\n\t\t\t\t\tcurve0.push(p0);\n\t\t\t\t}\n\t\t\t\tif (d1) {\n\t\t\t\t\tcurve1.push(p1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tdrawArea(ctx, curve0, curve1, len0, len1);\n\n\tctx.closePath();\n\tctx.fillStyle = color;\n\tctx.fill();\n}\n\nvar plugin_filler = {\n\tid: 'filler',\n\n\tafterDatasetsUpdate: function(chart, options) {\n\t\tvar count = (chart.data.datasets || []).length;\n\t\tvar propagate = options.propagate;\n\t\tvar sources = [];\n\t\tvar meta, i, el, source;\n\n\t\tfor (i = 0; i < count; ++i) {\n\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\tel = meta.dataset;\n\t\t\tsource = null;\n\n\t\t\tif (el && el._model && el instanceof elements.Line) {\n\t\t\t\tsource = {\n\t\t\t\t\tvisible: chart.isDatasetVisible(i),\n\t\t\t\t\tfill: decodeFill(el, i, count),\n\t\t\t\t\tchart: chart,\n\t\t\t\t\tel: el\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tmeta.$filler = source;\n\t\t\tsources.push(source);\n\t\t}\n\n\t\tfor (i = 0; i < count; ++i) {\n\t\t\tsource = sources[i];\n\t\t\tif (!source) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tsource.fill = resolveTarget(sources, i, propagate);\n\t\t\tsource.boundary = computeBoundary(source);\n\t\t\tsource.mapper = createMapper(source);\n\t\t}\n\t},\n\n\tbeforeDatasetDraw: function(chart, args) {\n\t\tvar meta = args.meta.$filler;\n\t\tif (!meta) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar ctx = chart.ctx;\n\t\tvar el = meta.el;\n\t\tvar view = el._view;\n\t\tvar points = el._children || [];\n\t\tvar mapper = meta.mapper;\n\t\tvar color = view.backgroundColor || core_defaults.global.defaultColor;\n\n\t\tif (mapper && color && points.length) {\n\t\t\thelpers$1.canvas.clipArea(ctx, chart.chartArea);\n\t\t\tdoFill(ctx, points, mapper, view, color, el._loop);\n\t\t\thelpers$1.canvas.unclipArea(ctx);\n\t\t}\n\t}\n};\n\nvar noop$1 = helpers$1.noop;\nvar valueOrDefault$d = helpers$1.valueOrDefault;\n\ncore_defaults._set('global', {\n\tlegend: {\n\t\tdisplay: true,\n\t\tposition: 'top',\n\t\tfullWidth: true,\n\t\treverse: false,\n\t\tweight: 1000,\n\n\t\t// a callback that will handle\n\t\tonClick: function(e, legendItem) {\n\t\t\tvar index = legendItem.datasetIndex;\n\t\t\tvar ci = this.chart;\n\t\t\tvar meta = ci.getDatasetMeta(index);\n\n\t\t\t// See controller.isDatasetVisible comment\n\t\t\tmeta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;\n\n\t\t\t// We hid a dataset ... rerender the chart\n\t\t\tci.update();\n\t\t},\n\n\t\tonHover: null,\n\t\tonLeave: null,\n\n\t\tlabels: {\n\t\t\tboxWidth: 40,\n\t\t\tpadding: 10,\n\t\t\t// Generates labels shown in the legend\n\t\t\t// Valid properties to return:\n\t\t\t// text : text to display\n\t\t\t// fillStyle : fill of coloured box\n\t\t\t// strokeStyle: stroke of coloured box\n\t\t\t// hidden : if this legend item refers to a hidden item\n\t\t\t// lineCap : cap style for line\n\t\t\t// lineDash\n\t\t\t// lineDashOffset :\n\t\t\t// lineJoin :\n\t\t\t// lineWidth :\n\t\t\tgenerateLabels: function(chart) {\n\t\t\t\tvar data = chart.data;\n\t\t\t\treturn helpers$1.isArray(data.datasets) ? data.datasets.map(function(dataset, i) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttext: dataset.label,\n\t\t\t\t\t\tfillStyle: (!helpers$1.isArray(dataset.backgroundColor) ? dataset.backgroundColor : dataset.backgroundColor[0]),\n\t\t\t\t\t\thidden: !chart.isDatasetVisible(i),\n\t\t\t\t\t\tlineCap: dataset.borderCapStyle,\n\t\t\t\t\t\tlineDash: dataset.borderDash,\n\t\t\t\t\t\tlineDashOffset: dataset.borderDashOffset,\n\t\t\t\t\t\tlineJoin: dataset.borderJoinStyle,\n\t\t\t\t\t\tlineWidth: dataset.borderWidth,\n\t\t\t\t\t\tstrokeStyle: dataset.borderColor,\n\t\t\t\t\t\tpointStyle: dataset.pointStyle,\n\n\t\t\t\t\t\t// Below is extra data used for toggling the datasets\n\t\t\t\t\t\tdatasetIndex: i\n\t\t\t\t\t};\n\t\t\t\t}, this) : [];\n\t\t\t}\n\t\t}\n\t},\n\n\tlegendCallback: function(chart) {\n\t\tvar text = [];\n\t\ttext.push('<ul class=\"' + chart.id + '-legend\">');\n\t\tfor (var i = 0; i < chart.data.datasets.length; i++) {\n\t\t\ttext.push('<li><span style=\"background-color:' + chart.data.datasets[i].backgroundColor + '\"></span>');\n\t\t\tif (chart.data.datasets[i].label) {\n\t\t\t\ttext.push(chart.data.datasets[i].label);\n\t\t\t}\n\t\t\ttext.push('</li>');\n\t\t}\n\t\ttext.push('</ul>');\n\t\treturn text.join('');\n\t}\n});\n\n/**\n * Helper function to get the box width based on the usePointStyle option\n * @param {object} labelopts - the label options on the legend\n * @param {number} fontSize - the label font size\n * @return {number} width of the color box area\n */\nfunction getBoxWidth(labelOpts, fontSize) {\n\treturn labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ?\n\t\tfontSize :\n\t\tlabelOpts.boxWidth;\n}\n\n/**\n * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!\n */\nvar Legend = core_element.extend({\n\n\tinitialize: function(config) {\n\t\thelpers$1.extend(this, config);\n\n\t\t// Contains hit boxes for each dataset (in dataset order)\n\t\tthis.legendHitBoxes = [];\n\n\t\t/**\n \t\t * @private\n \t\t */\n\t\tthis._hoveredItem = null;\n\n\t\t// Are we in doughnut mode which has a different data type\n\t\tthis.doughnutMode = false;\n\t},\n\n\t// These methods are ordered by lifecycle. Utilities then follow.\n\t// Any function defined here is inherited by all legend types.\n\t// Any function can be extended by the legend type\n\n\tbeforeUpdate: noop$1,\n\tupdate: function(maxWidth, maxHeight, margins) {\n\t\tvar me = this;\n\n\t\t// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\t\tme.beforeUpdate();\n\n\t\t// Absorb the master measurements\n\t\tme.maxWidth = maxWidth;\n\t\tme.maxHeight = maxHeight;\n\t\tme.margins = margins;\n\n\t\t// Dimensions\n\t\tme.beforeSetDimensions();\n\t\tme.setDimensions();\n\t\tme.afterSetDimensions();\n\t\t// Labels\n\t\tme.beforeBuildLabels();\n\t\tme.buildLabels();\n\t\tme.afterBuildLabels();\n\n\t\t// Fit\n\t\tme.beforeFit();\n\t\tme.fit();\n\t\tme.afterFit();\n\t\t//\n\t\tme.afterUpdate();\n\n\t\treturn me.minSize;\n\t},\n\tafterUpdate: noop$1,\n\n\t//\n\n\tbeforeSetDimensions: noop$1,\n\tsetDimensions: function() {\n\t\tvar me = this;\n\t\t// Set the unconstrained dimension before label rotation\n\t\tif (me.isHorizontal()) {\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.width = me.maxWidth;\n\t\t\tme.left = 0;\n\t\t\tme.right = me.width;\n\t\t} else {\n\t\t\tme.height = me.maxHeight;\n\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.top = 0;\n\t\t\tme.bottom = me.height;\n\t\t}\n\n\t\t// Reset padding\n\t\tme.paddingLeft = 0;\n\t\tme.paddingTop = 0;\n\t\tme.paddingRight = 0;\n\t\tme.paddingBottom = 0;\n\n\t\t// Reset minSize\n\t\tme.minSize = {\n\t\t\twidth: 0,\n\t\t\theight: 0\n\t\t};\n\t},\n\tafterSetDimensions: noop$1,\n\n\t//\n\n\tbeforeBuildLabels: noop$1,\n\tbuildLabels: function() {\n\t\tvar me = this;\n\t\tvar labelOpts = me.options.labels || {};\n\t\tvar legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];\n\n\t\tif (labelOpts.filter) {\n\t\t\tlegendItems = legendItems.filter(function(item) {\n\t\t\t\treturn labelOpts.filter(item, me.chart.data);\n\t\t\t});\n\t\t}\n\n\t\tif (me.options.reverse) {\n\t\t\tlegendItems.reverse();\n\t\t}\n\n\t\tme.legendItems = legendItems;\n\t},\n\tafterBuildLabels: noop$1,\n\n\t//\n\n\tbeforeFit: noop$1,\n\tfit: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar labelOpts = opts.labels;\n\t\tvar display = opts.display;\n\n\t\tvar ctx = me.ctx;\n\n\t\tvar labelFont = helpers$1.options._parseFont(labelOpts);\n\t\tvar fontSize = labelFont.size;\n\n\t\t// Reset hit boxes\n\t\tvar hitboxes = me.legendHitBoxes = [];\n\n\t\tvar minSize = me.minSize;\n\t\tvar isHorizontal = me.isHorizontal();\n\n\t\tif (isHorizontal) {\n\t\t\tminSize.width = me.maxWidth; // fill all the width\n\t\t\tminSize.height = display ? 10 : 0;\n\t\t} else {\n\t\t\tminSize.width = display ? 10 : 0;\n\t\t\tminSize.height = me.maxHeight; // fill all the height\n\t\t}\n\n\t\t// Increase sizes here\n\t\tif (display) {\n\t\t\tctx.font = labelFont.string;\n\n\t\t\tif (isHorizontal) {\n\t\t\t\t// Labels\n\n\t\t\t\t// Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n\t\t\t\tvar lineWidths = me.lineWidths = [0];\n\t\t\t\tvar totalHeight = 0;\n\n\t\t\t\tctx.textAlign = 'left';\n\t\t\t\tctx.textBaseline = 'top';\n\n\t\t\t\thelpers$1.each(me.legendItems, function(legendItem, i) {\n\t\t\t\t\tvar boxWidth = getBoxWidth(labelOpts, fontSize);\n\t\t\t\t\tvar width = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n\t\t\t\t\tif (i === 0 || lineWidths[lineWidths.length - 1] + width + labelOpts.padding > minSize.width) {\n\t\t\t\t\t\ttotalHeight += fontSize + labelOpts.padding;\n\t\t\t\t\t\tlineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = labelOpts.padding;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Store the hitbox width and height here. Final position will be updated in `draw`\n\t\t\t\t\thitboxes[i] = {\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\twidth: width,\n\t\t\t\t\t\theight: fontSize\n\t\t\t\t\t};\n\n\t\t\t\t\tlineWidths[lineWidths.length - 1] += width + labelOpts.padding;\n\t\t\t\t});\n\n\t\t\t\tminSize.height += totalHeight;\n\n\t\t\t} else {\n\t\t\t\tvar vPadding = labelOpts.padding;\n\t\t\t\tvar columnWidths = me.columnWidths = [];\n\t\t\t\tvar totalWidth = labelOpts.padding;\n\t\t\t\tvar currentColWidth = 0;\n\t\t\t\tvar currentColHeight = 0;\n\t\t\t\tvar itemHeight = fontSize + vPadding;\n\n\t\t\t\thelpers$1.each(me.legendItems, function(legendItem, i) {\n\t\t\t\t\tvar boxWidth = getBoxWidth(labelOpts, fontSize);\n\t\t\t\t\tvar itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n\t\t\t\t\t// If too tall, go to new column\n\t\t\t\t\tif (i > 0 && currentColHeight + itemHeight > minSize.height - vPadding) {\n\t\t\t\t\t\ttotalWidth += currentColWidth + labelOpts.padding;\n\t\t\t\t\t\tcolumnWidths.push(currentColWidth); // previous column width\n\n\t\t\t\t\t\tcurrentColWidth = 0;\n\t\t\t\t\t\tcurrentColHeight = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Get max width\n\t\t\t\t\tcurrentColWidth = Math.max(currentColWidth, itemWidth);\n\t\t\t\t\tcurrentColHeight += itemHeight;\n\n\t\t\t\t\t// Store the hitbox width and height here. Final position will be updated in `draw`\n\t\t\t\t\thitboxes[i] = {\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\twidth: itemWidth,\n\t\t\t\t\t\theight: fontSize\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\ttotalWidth += currentColWidth;\n\t\t\t\tcolumnWidths.push(currentColWidth);\n\t\t\t\tminSize.width += totalWidth;\n\t\t\t}\n\t\t}\n\n\t\tme.width = minSize.width;\n\t\tme.height = minSize.height;\n\t},\n\tafterFit: noop$1,\n\n\t// Shared Methods\n\tisHorizontal: function() {\n\t\treturn this.options.position === 'top' || this.options.position === 'bottom';\n\t},\n\n\t// Actually draw the legend on the canvas\n\tdraw: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar labelOpts = opts.labels;\n\t\tvar globalDefaults = core_defaults.global;\n\t\tvar defaultColor = globalDefaults.defaultColor;\n\t\tvar lineDefault = globalDefaults.elements.line;\n\t\tvar legendWidth = me.width;\n\t\tvar lineWidths = me.lineWidths;\n\n\t\tif (opts.display) {\n\t\t\tvar ctx = me.ctx;\n\t\t\tvar fontColor = valueOrDefault$d(labelOpts.fontColor, globalDefaults.defaultFontColor);\n\t\t\tvar labelFont = helpers$1.options._parseFont(labelOpts);\n\t\t\tvar fontSize = labelFont.size;\n\t\t\tvar cursor;\n\n\t\t\t// Canvas setup\n\t\t\tctx.textAlign = 'left';\n\t\t\tctx.textBaseline = 'middle';\n\t\t\tctx.lineWidth = 0.5;\n\t\t\tctx.strokeStyle = fontColor; // for strikethrough effect\n\t\t\tctx.fillStyle = fontColor; // render in correct colour\n\t\t\tctx.font = labelFont.string;\n\n\t\t\tvar boxWidth = getBoxWidth(labelOpts, fontSize);\n\t\t\tvar hitboxes = me.legendHitBoxes;\n\n\t\t\t// current position\n\t\t\tvar drawLegendBox = function(x, y, legendItem) {\n\t\t\t\tif (isNaN(boxWidth) || boxWidth <= 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Set the ctx for the box\n\t\t\t\tctx.save();\n\n\t\t\t\tvar lineWidth = valueOrDefault$d(legendItem.lineWidth, lineDefault.borderWidth);\n\t\t\t\tctx.fillStyle = valueOrDefault$d(legendItem.fillStyle, defaultColor);\n\t\t\t\tctx.lineCap = valueOrDefault$d(legendItem.lineCap, lineDefault.borderCapStyle);\n\t\t\t\tctx.lineDashOffset = valueOrDefault$d(legendItem.lineDashOffset, lineDefault.borderDashOffset);\n\t\t\t\tctx.lineJoin = valueOrDefault$d(legendItem.lineJoin, lineDefault.borderJoinStyle);\n\t\t\t\tctx.lineWidth = lineWidth;\n\t\t\t\tctx.strokeStyle = valueOrDefault$d(legendItem.strokeStyle, defaultColor);\n\n\t\t\t\tif (ctx.setLineDash) {\n\t\t\t\t\t// IE 9 and 10 do not support line dash\n\t\t\t\t\tctx.setLineDash(valueOrDefault$d(legendItem.lineDash, lineDefault.borderDash));\n\t\t\t\t}\n\n\t\t\t\tif (opts.labels && opts.labels.usePointStyle) {\n\t\t\t\t\t// Recalculate x and y for drawPoint() because its expecting\n\t\t\t\t\t// x and y to be center of figure (instead of top left)\n\t\t\t\t\tvar radius = boxWidth * Math.SQRT2 / 2;\n\t\t\t\t\tvar centerX = x + boxWidth / 2;\n\t\t\t\t\tvar centerY = y + fontSize / 2;\n\n\t\t\t\t\t// Draw pointStyle as legend symbol\n\t\t\t\t\thelpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);\n\t\t\t\t} else {\n\t\t\t\t\t// Draw box as legend symbol\n\t\t\t\t\tif (lineWidth !== 0) {\n\t\t\t\t\t\tctx.strokeRect(x, y, boxWidth, fontSize);\n\t\t\t\t\t}\n\t\t\t\t\tctx.fillRect(x, y, boxWidth, fontSize);\n\t\t\t\t}\n\n\t\t\t\tctx.restore();\n\t\t\t};\n\t\t\tvar fillText = function(x, y, legendItem, textWidth) {\n\t\t\t\tvar halfFontSize = fontSize / 2;\n\t\t\t\tvar xLeft = boxWidth + halfFontSize + x;\n\t\t\t\tvar yMiddle = y + halfFontSize;\n\n\t\t\t\tctx.fillText(legendItem.text, xLeft, yMiddle);\n\n\t\t\t\tif (legendItem.hidden) {\n\t\t\t\t\t// Strikethrough the text if hidden\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.lineWidth = 2;\n\t\t\t\t\tctx.moveTo(xLeft, yMiddle);\n\t\t\t\t\tctx.lineTo(xLeft + textWidth, yMiddle);\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Horizontal\n\t\t\tvar isHorizontal = me.isHorizontal();\n\t\t\tif (isHorizontal) {\n\t\t\t\tcursor = {\n\t\t\t\t\tx: me.left + ((legendWidth - lineWidths[0]) / 2) + labelOpts.padding,\n\t\t\t\t\ty: me.top + labelOpts.padding,\n\t\t\t\t\tline: 0\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tcursor = {\n\t\t\t\t\tx: me.left + labelOpts.padding,\n\t\t\t\t\ty: me.top + labelOpts.padding,\n\t\t\t\t\tline: 0\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar itemHeight = fontSize + labelOpts.padding;\n\t\t\thelpers$1.each(me.legendItems, function(legendItem, i) {\n\t\t\t\tvar textWidth = ctx.measureText(legendItem.text).width;\n\t\t\t\tvar width = boxWidth + (fontSize / 2) + textWidth;\n\t\t\t\tvar x = cursor.x;\n\t\t\t\tvar y = cursor.y;\n\n\t\t\t\t// Use (me.left + me.minSize.width) and (me.top + me.minSize.height)\n\t\t\t\t// instead of me.right and me.bottom because me.width and me.height\n\t\t\t\t// may have been changed since me.minSize was calculated\n\t\t\t\tif (isHorizontal) {\n\t\t\t\t\tif (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {\n\t\t\t\t\t\ty = cursor.y += itemHeight;\n\t\t\t\t\t\tcursor.line++;\n\t\t\t\t\t\tx = cursor.x = me.left + ((legendWidth - lineWidths[cursor.line]) / 2) + labelOpts.padding;\n\t\t\t\t\t}\n\t\t\t\t} else if (i > 0 && y + itemHeight > me.top + me.minSize.height) {\n\t\t\t\t\tx = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;\n\t\t\t\t\ty = cursor.y = me.top + labelOpts.padding;\n\t\t\t\t\tcursor.line++;\n\t\t\t\t}\n\n\t\t\t\tdrawLegendBox(x, y, legendItem);\n\n\t\t\t\thitboxes[i].left = x;\n\t\t\t\thitboxes[i].top = y;\n\n\t\t\t\t// Fill the actual label\n\t\t\t\tfillText(x, y, legendItem, textWidth);\n\n\t\t\t\tif (isHorizontal) {\n\t\t\t\t\tcursor.x += width + labelOpts.padding;\n\t\t\t\t} else {\n\t\t\t\t\tcursor.y += itemHeight;\n\t\t\t\t}\n\n\t\t\t});\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getLegendItemAt: function(x, y) {\n\t\tvar me = this;\n\t\tvar i, hitBox, lh;\n\n\t\tif (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {\n\t\t\t// See if we are touching one of the dataset boxes\n\t\t\tlh = me.legendHitBoxes;\n\t\t\tfor (i = 0; i < lh.length; ++i) {\n\t\t\t\thitBox = lh[i];\n\n\t\t\t\tif (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {\n\t\t\t\t\t// Touching an element\n\t\t\t\t\treturn me.legendItems[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\n\t/**\n\t * Handle an event\n\t * @private\n\t * @param {IEvent} event - The event to handle\n\t */\n\thandleEvent: function(e) {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar type = e.type === 'mouseup' ? 'click' : e.type;\n\t\tvar hoveredItem;\n\n\t\tif (type === 'mousemove') {\n\t\t\tif (!opts.onHover && !opts.onLeave) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (type === 'click') {\n\t\t\tif (!opts.onClick) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\t// Chart event already has relative position in it\n\t\thoveredItem = me._getLegendItemAt(e.x, e.y);\n\n\t\tif (type === 'click') {\n\t\t\tif (hoveredItem && opts.onClick) {\n\t\t\t\t// use e.native for backwards compatibility\n\t\t\t\topts.onClick.call(me, e.native, hoveredItem);\n\t\t\t}\n\t\t} else {\n\t\t\tif (opts.onLeave && hoveredItem !== me._hoveredItem) {\n\t\t\t\tif (me._hoveredItem) {\n\t\t\t\t\topts.onLeave.call(me, e.native, me._hoveredItem);\n\t\t\t\t}\n\t\t\t\tme._hoveredItem = hoveredItem;\n\t\t\t}\n\n\t\t\tif (opts.onHover && hoveredItem) {\n\t\t\t\t// use e.native for backwards compatibility\n\t\t\t\topts.onHover.call(me, e.native, hoveredItem);\n\t\t\t}\n\t\t}\n\t}\n});\n\nfunction createNewLegendAndAttach(chart, legendOpts) {\n\tvar legend = new Legend({\n\t\tctx: chart.ctx,\n\t\toptions: legendOpts,\n\t\tchart: chart\n\t});\n\n\tcore_layouts.configure(chart, legend, legendOpts);\n\tcore_layouts.addBox(chart, legend);\n\tchart.legend = legend;\n}\n\nvar plugin_legend = {\n\tid: 'legend',\n\n\t/**\n\t * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making\n\t * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of\n\t * the plugin, which one will be re-exposed in the chart.js file.\n\t * https://github.com/chartjs/Chart.js/pull/2640\n\t * @private\n\t */\n\t_element: Legend,\n\n\tbeforeInit: function(chart) {\n\t\tvar legendOpts = chart.options.legend;\n\n\t\tif (legendOpts) {\n\t\t\tcreateNewLegendAndAttach(chart, legendOpts);\n\t\t}\n\t},\n\n\tbeforeUpdate: function(chart) {\n\t\tvar legendOpts = chart.options.legend;\n\t\tvar legend = chart.legend;\n\n\t\tif (legendOpts) {\n\t\t\thelpers$1.mergeIf(legendOpts, core_defaults.global.legend);\n\n\t\t\tif (legend) {\n\t\t\t\tcore_layouts.configure(chart, legend, legendOpts);\n\t\t\t\tlegend.options = legendOpts;\n\t\t\t} else {\n\t\t\t\tcreateNewLegendAndAttach(chart, legendOpts);\n\t\t\t}\n\t\t} else if (legend) {\n\t\t\tcore_layouts.removeBox(chart, legend);\n\t\t\tdelete chart.legend;\n\t\t}\n\t},\n\n\tafterEvent: function(chart, e) {\n\t\tvar legend = chart.legend;\n\t\tif (legend) {\n\t\t\tlegend.handleEvent(e);\n\t\t}\n\t}\n};\n\nvar noop$2 = helpers$1.noop;\n\ncore_defaults._set('global', {\n\ttitle: {\n\t\tdisplay: false,\n\t\tfontStyle: 'bold',\n\t\tfullWidth: true,\n\t\tpadding: 10,\n\t\tposition: 'top',\n\t\ttext: '',\n\t\tweight: 2000         // by default greater than legend (1000) to be above\n\t}\n});\n\n/**\n * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!\n */\nvar Title = core_element.extend({\n\tinitialize: function(config) {\n\t\tvar me = this;\n\t\thelpers$1.extend(me, config);\n\n\t\t// Contains hit boxes for each dataset (in dataset order)\n\t\tme.legendHitBoxes = [];\n\t},\n\n\t// These methods are ordered by lifecycle. Utilities then follow.\n\n\tbeforeUpdate: noop$2,\n\tupdate: function(maxWidth, maxHeight, margins) {\n\t\tvar me = this;\n\n\t\t// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\t\tme.beforeUpdate();\n\n\t\t// Absorb the master measurements\n\t\tme.maxWidth = maxWidth;\n\t\tme.maxHeight = maxHeight;\n\t\tme.margins = margins;\n\n\t\t// Dimensions\n\t\tme.beforeSetDimensions();\n\t\tme.setDimensions();\n\t\tme.afterSetDimensions();\n\t\t// Labels\n\t\tme.beforeBuildLabels();\n\t\tme.buildLabels();\n\t\tme.afterBuildLabels();\n\n\t\t// Fit\n\t\tme.beforeFit();\n\t\tme.fit();\n\t\tme.afterFit();\n\t\t//\n\t\tme.afterUpdate();\n\n\t\treturn me.minSize;\n\n\t},\n\tafterUpdate: noop$2,\n\n\t//\n\n\tbeforeSetDimensions: noop$2,\n\tsetDimensions: function() {\n\t\tvar me = this;\n\t\t// Set the unconstrained dimension before label rotation\n\t\tif (me.isHorizontal()) {\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.width = me.maxWidth;\n\t\t\tme.left = 0;\n\t\t\tme.right = me.width;\n\t\t} else {\n\t\t\tme.height = me.maxHeight;\n\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.top = 0;\n\t\t\tme.bottom = me.height;\n\t\t}\n\n\t\t// Reset padding\n\t\tme.paddingLeft = 0;\n\t\tme.paddingTop = 0;\n\t\tme.paddingRight = 0;\n\t\tme.paddingBottom = 0;\n\n\t\t// Reset minSize\n\t\tme.minSize = {\n\t\t\twidth: 0,\n\t\t\theight: 0\n\t\t};\n\t},\n\tafterSetDimensions: noop$2,\n\n\t//\n\n\tbeforeBuildLabels: noop$2,\n\tbuildLabels: noop$2,\n\tafterBuildLabels: noop$2,\n\n\t//\n\n\tbeforeFit: noop$2,\n\tfit: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar display = opts.display;\n\t\tvar minSize = me.minSize;\n\t\tvar lineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;\n\t\tvar fontOpts = helpers$1.options._parseFont(opts);\n\t\tvar textSize = display ? (lineCount * fontOpts.lineHeight) + (opts.padding * 2) : 0;\n\n\t\tif (me.isHorizontal()) {\n\t\t\tminSize.width = me.maxWidth; // fill all the width\n\t\t\tminSize.height = textSize;\n\t\t} else {\n\t\t\tminSize.width = textSize;\n\t\t\tminSize.height = me.maxHeight; // fill all the height\n\t\t}\n\n\t\tme.width = minSize.width;\n\t\tme.height = minSize.height;\n\n\t},\n\tafterFit: noop$2,\n\n\t// Shared Methods\n\tisHorizontal: function() {\n\t\tvar pos = this.options.position;\n\t\treturn pos === 'top' || pos === 'bottom';\n\t},\n\n\t// Actually draw the title block on the canvas\n\tdraw: function() {\n\t\tvar me = this;\n\t\tvar ctx = me.ctx;\n\t\tvar opts = me.options;\n\n\t\tif (opts.display) {\n\t\t\tvar fontOpts = helpers$1.options._parseFont(opts);\n\t\t\tvar lineHeight = fontOpts.lineHeight;\n\t\t\tvar offset = lineHeight / 2 + opts.padding;\n\t\t\tvar rotation = 0;\n\t\t\tvar top = me.top;\n\t\t\tvar left = me.left;\n\t\t\tvar bottom = me.bottom;\n\t\t\tvar right = me.right;\n\t\t\tvar maxWidth, titleX, titleY;\n\n\t\t\tctx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor); // render in correct colour\n\t\t\tctx.font = fontOpts.string;\n\n\t\t\t// Horizontal\n\t\t\tif (me.isHorizontal()) {\n\t\t\t\ttitleX = left + ((right - left) / 2); // midpoint of the width\n\t\t\t\ttitleY = top + offset;\n\t\t\t\tmaxWidth = right - left;\n\t\t\t} else {\n\t\t\t\ttitleX = opts.position === 'left' ? left + offset : right - offset;\n\t\t\t\ttitleY = top + ((bottom - top) / 2);\n\t\t\t\tmaxWidth = bottom - top;\n\t\t\t\trotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);\n\t\t\t}\n\n\t\t\tctx.save();\n\t\t\tctx.translate(titleX, titleY);\n\t\t\tctx.rotate(rotation);\n\t\t\tctx.textAlign = 'center';\n\t\t\tctx.textBaseline = 'middle';\n\n\t\t\tvar text = opts.text;\n\t\t\tif (helpers$1.isArray(text)) {\n\t\t\t\tvar y = 0;\n\t\t\t\tfor (var i = 0; i < text.length; ++i) {\n\t\t\t\t\tctx.fillText(text[i], 0, y, maxWidth);\n\t\t\t\t\ty += lineHeight;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tctx.fillText(text, 0, 0, maxWidth);\n\t\t\t}\n\n\t\t\tctx.restore();\n\t\t}\n\t}\n});\n\nfunction createNewTitleBlockAndAttach(chart, titleOpts) {\n\tvar title = new Title({\n\t\tctx: chart.ctx,\n\t\toptions: titleOpts,\n\t\tchart: chart\n\t});\n\n\tcore_layouts.configure(chart, title, titleOpts);\n\tcore_layouts.addBox(chart, title);\n\tchart.titleBlock = title;\n}\n\nvar plugin_title = {\n\tid: 'title',\n\n\t/**\n\t * Backward compatibility: since 2.1.5, the title is registered as a plugin, making\n\t * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of\n\t * the plugin, which one will be re-exposed in the chart.js file.\n\t * https://github.com/chartjs/Chart.js/pull/2640\n\t * @private\n\t */\n\t_element: Title,\n\n\tbeforeInit: function(chart) {\n\t\tvar titleOpts = chart.options.title;\n\n\t\tif (titleOpts) {\n\t\t\tcreateNewTitleBlockAndAttach(chart, titleOpts);\n\t\t}\n\t},\n\n\tbeforeUpdate: function(chart) {\n\t\tvar titleOpts = chart.options.title;\n\t\tvar titleBlock = chart.titleBlock;\n\n\t\tif (titleOpts) {\n\t\t\thelpers$1.mergeIf(titleOpts, core_defaults.global.title);\n\n\t\t\tif (titleBlock) {\n\t\t\t\tcore_layouts.configure(chart, titleBlock, titleOpts);\n\t\t\t\ttitleBlock.options = titleOpts;\n\t\t\t} else {\n\t\t\t\tcreateNewTitleBlockAndAttach(chart, titleOpts);\n\t\t\t}\n\t\t} else if (titleBlock) {\n\t\t\tcore_layouts.removeBox(chart, titleBlock);\n\t\t\tdelete chart.titleBlock;\n\t\t}\n\t}\n};\n\nvar plugins = {};\nvar filler = plugin_filler;\nvar legend = plugin_legend;\nvar title = plugin_title;\nplugins.filler = filler;\nplugins.legend = legend;\nplugins.title = title;\n\n/**\n * @namespace Chart\n */\n\n\ncore_controller.helpers = helpers$1;\n\n// @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!\ncore_helpers(core_controller);\n\ncore_controller._adapters = core_adapters;\ncore_controller.Animation = core_animation;\ncore_controller.animationService = core_animations;\ncore_controller.controllers = controllers;\ncore_controller.DatasetController = core_datasetController;\ncore_controller.defaults = core_defaults;\ncore_controller.Element = core_element;\ncore_controller.elements = elements;\ncore_controller.Interaction = core_interaction;\ncore_controller.layouts = core_layouts;\ncore_controller.platform = platform;\ncore_controller.plugins = core_plugins;\ncore_controller.Scale = core_scale;\ncore_controller.scaleService = core_scaleService;\ncore_controller.Ticks = core_ticks;\ncore_controller.Tooltip = core_tooltip;\n\n// Register built-in scales\n\ncore_controller.helpers.each(scales, function(scale, type) {\n\tcore_controller.scaleService.registerScaleType(type, scale, scale._defaults);\n});\n\n// Load to register built-in adapters (as side effects)\n\n\n// Loading built-in plugins\n\nfor (var k in plugins) {\n\tif (plugins.hasOwnProperty(k)) {\n\t\tcore_controller.plugins.register(plugins[k]);\n\t}\n}\n\ncore_controller.platform.initialize();\n\nvar src = core_controller;\nif (typeof window !== 'undefined') {\n\twindow.Chart = core_controller;\n}\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, not available anymore\n * @namespace Chart.Chart\n * @deprecated since version 2.8.0\n * @todo remove at version 3\n * @private\n */\ncore_controller.Chart = core_controller;\n\n/**\n * Provided for backward compatibility, not available anymore\n * @namespace Chart.Legend\n * @deprecated since version 2.1.5\n * @todo remove at version 3\n * @private\n */\ncore_controller.Legend = plugins.legend._element;\n\n/**\n * Provided for backward compatibility, not available anymore\n * @namespace Chart.Title\n * @deprecated since version 2.1.5\n * @todo remove at version 3\n * @private\n */\ncore_controller.Title = plugins.title._element;\n\n/**\n * Provided for backward compatibility, use Chart.plugins instead\n * @namespace Chart.pluginService\n * @deprecated since version 2.1.5\n * @todo remove at version 3\n * @private\n */\ncore_controller.pluginService = core_controller.plugins;\n\n/**\n * Provided for backward compatibility, inheriting from Chart.PlugingBase has no\n * effect, instead simply create/register plugins via plain JavaScript objects.\n * @interface Chart.PluginBase\n * @deprecated since version 2.5.0\n * @todo remove at version 3\n * @private\n */\ncore_controller.PluginBase = core_controller.Element.extend({});\n\n/**\n * Provided for backward compatibility, use Chart.helpers.canvas instead.\n * @namespace Chart.canvasHelpers\n * @deprecated since version 2.6.0\n * @todo remove at version 3\n * @private\n */\ncore_controller.canvasHelpers = core_controller.helpers.canvas;\n\n/**\n * Provided for backward compatibility, use Chart.layouts instead.\n * @namespace Chart.layoutService\n * @deprecated since version 2.7.3\n * @todo remove at version 3\n * @private\n */\ncore_controller.layoutService = core_controller.layouts;\n\n/**\n * Provided for backward compatibility, not available anymore.\n * @namespace Chart.LinearScaleBase\n * @deprecated since version 2.8\n * @todo remove at version 3\n * @private\n */\ncore_controller.LinearScaleBase = scale_linearbase;\n\n/**\n * Provided for backward compatibility, instead we should create a new Chart\n * by setting the type in the config (`new Chart(id, {type: '{chart-type}'}`).\n * @deprecated since version 2.8.0\n * @todo remove at version 3\n */\ncore_controller.helpers.each(\n\t[\n\t\t'Bar',\n\t\t'Bubble',\n\t\t'Doughnut',\n\t\t'Line',\n\t\t'PolarArea',\n\t\t'Radar',\n\t\t'Scatter'\n\t],\n\tfunction(klass) {\n\t\tcore_controller[klass] = function(ctx, cfg) {\n\t\t\treturn new core_controller(ctx, core_controller.helpers.merge(cfg || {}, {\n\t\t\t\ttype: klass.charAt(0).toLowerCase() + klass.slice(1)\n\t\t\t}));\n\t\t};\n\t}\n);\n\nreturn src;\n\n})));\n\n\n/***/ }),\n\n/***/ 2569:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseAssignValue = __webpack_require__(207),\n    createAggregator = __webpack_require__(2570);\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The corresponding value of\n * each key is the last element responsible for generating the key. The\n * iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * var array = [\n *   { 'dir': 'left', 'code': 97 },\n *   { 'dir': 'right', 'code': 100 }\n * ];\n *\n * _.keyBy(array, function(o) {\n *   return String.fromCharCode(o.code);\n * });\n * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n *\n * _.keyBy(array, 'dir');\n * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n */\nvar keyBy = createAggregator(function(result, value, key) {\n  baseAssignValue(result, key, value);\n});\n\nmodule.exports = keyBy;\n\n\n/***/ }),\n\n/***/ 2570:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar arrayAggregator = __webpack_require__(2571),\n    baseAggregator = __webpack_require__(2572),\n    baseIteratee = __webpack_require__(156),\n    isArray = __webpack_require__(50);\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nmodule.exports = createAggregator;\n\n\n/***/ }),\n\n/***/ 2571:\n/***/ (function(module, exports) {\n\n/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayAggregator;\n\n\n/***/ }),\n\n/***/ 2572:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseEach = __webpack_require__(740);\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseAggregator;\n\n\n/***/ }),\n\n/***/ 2573:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_redux__ = __webpack_require__(49);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_redux__ = __webpack_require__(86);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_antd__ = __webpack_require__(30);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__components_UI_Antd__ = __webpack_require__(730);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__actions_dashboardAction__ = __webpack_require__(2083);\nvar _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var JumpStartModal=function(_Component){_inherits(JumpStartModal,_Component);function JumpStartModal(){_classCallCheck(this,JumpStartModal);return _possibleConstructorReturn(this,(JumpStartModal.__proto__||Object.getPrototypeOf(JumpStartModal)).apply(this,arguments));}_createClass(JumpStartModal,[{key:'render',value:function render(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__components_UI_Antd__[\"g\" /* StyledModal */],{title:this.props.jumpstartData.title,visible:this.props.isModalOpen,onOk:this.handleOk,onCancel:this.props.closeJumpstartModal},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('p',null,this.props.jumpstartData.title),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('p',null,this.props.jumpstartData.value)));}}]);return JumpStartModal;}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);var mapStateToProps=function mapStateToProps(state){return{isModalOpen:state.dashboardReducer.isModalOpen,jumpstartData:state.dashboardReducer.jumpstartData};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return Object(__WEBPACK_IMPORTED_MODULE_2_redux__[\"b\" /* bindActionCreators */])({closeJumpstartModal:__WEBPACK_IMPORTED_MODULE_5__actions_dashboardAction__[\"a\" /* closeJumpstartModal */]},dispatch);};/* harmony default export */ __webpack_exports__[\"a\"] = (Object(__WEBPACK_IMPORTED_MODULE_1_react_redux__[\"b\" /* connect */])(mapStateToProps,mapDispatchToProps)(JumpStartModal));\n\n/***/ }),\n\n/***/ 2574:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_redux__ = __webpack_require__(49);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_redux__ = __webpack_require__(86);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_classnames__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_classnames__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_antd__ = __webpack_require__(30);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_react_spring__ = __webpack_require__(738);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__actions_dashboardAction__ = __webpack_require__(2083);\nvar JumpStartDetail=function JumpStartDetail(props){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:'jumpstart-box test',onClick:function onClick(){return props.openJumpstartModal(props.data);}},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_5_react_spring__[\"a\" /* Spring */],{delay:500,from:{opacity:0,transform:' scale(0.4)'},to:{opacity:1,transform:'scale(1)'}},function(styles){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{style:styles},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('h3',{style:{color:'#aaa'}},props.data.title),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('h2',{style:{color:'#eee'}},props.data.value,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('span',{className:props.jumpstartStyle},props.data.progress>0?__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4_antd__[\"l\" /* Icon */],{type:'caret-up'}):__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4_antd__[\"l\" /* Icon */],{type:'caret-down'}),'\\xA0',props.data.progress)));}));};/* harmony default export */ __webpack_exports__[\"a\"] = (Object(__WEBPACK_IMPORTED_MODULE_1_react_redux__[\"b\" /* connect */])(null,function(dispatch){return Object(__WEBPACK_IMPORTED_MODULE_2_redux__[\"b\" /* bindActionCreators */])({openJumpstartModal:__WEBPACK_IMPORTED_MODULE_6__actions_dashboardAction__[\"b\" /* openJumpstartModal */]},dispatch);})(JumpStartDetail));\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/18.09228f88.chunk.js","var baseIsEqual = require('./_baseIsEqual');\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nmodule.exports = isEqual;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/isEqual.js\n// module id = 1997\n// module chunks = 1 17 18","import { GET_JUMPSTART_LIST, SET_JUMPSTART_LIST, OPEN_JUMPSTART_MODAL, CLOSE_JUMPSTART_MODAL, SORT_JUMPSTART_BOX } from '../types/dashboardActionTypes';\r\nexport const getJumpstartList = () => dispatch => {\r\n    return dispatch({\r\n        type: GET_JUMPSTART_LIST\r\n    })\r\n}\r\nexport const setJumpstartList = (data) => dispatch => {\r\n    console.log(data)\r\n    return dispatch({\r\n        type: SET_JUMPSTART_LIST,\r\n        payload: data\r\n\r\n    })\r\n}\r\nexport const openJumpstartModal = (id) => dispatch => {\r\n    return dispatch({\r\n        type: OPEN_JUMPSTART_MODAL,\r\n        payload: id\r\n\r\n    })\r\n}\r\nexport const closeJumpstartModal = (id) => dispatch => {\r\n    return dispatch({\r\n        type: CLOSE_JUMPSTART_MODAL,\r\n        payload: id\r\n\r\n    })\r\n}\r\n\r\nexport const sortJumpstartBox = (dragIndex, hoverIndex) => dispatch => {\r\n    console.log(dragIndex, hoverIndex)\r\n    return dispatch({\r\n        type: SORT_JUMPSTART_BOX,\r\n        payload: dragIndex,\r\n        payload2: hoverIndex,\r\n\r\n    })\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/actions/dashboardAction.js","import React, { Component } from 'react';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { Bar, Line } from 'react-chartjs-2';\r\nimport  classNames  from 'classnames';\r\nimport { Card } from 'antd';\r\nimport { getJumpstartList } from '../../actions/dashboardAction';\r\nimport JumpStartModal from './jumpStartModal';\r\nimport JumpStartDetail from './jumpStartDetail'\r\nimport { openJumpstartModal } from '../../actions/dashboardAction';\r\nimport '../../App.css';\r\nimport './dashboard.css';\r\nclass JumpStartBox extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n\r\n        let renderJumpStartBoxes = this.props.jumpStartData.filter((data) => data.visible)\r\n            .map((data) => {\r\n                const jumpstartStyle = classNames({\r\n                    'increase': data.progress<0,\r\n                    'decrease': data.progress>0\r\n                  });\r\n                return <JumpStartDetail key={data.id} data={data}jumpstartStyle={jumpstartStyle} />\r\n            })\r\n\r\n        return (\r\n            <div className=\"flex-container\" style={{ flexGrow: 1, justifyContent: 'flex-start' }}>\r\n                {renderJumpStartBoxes}\r\n                <JumpStartModal/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        jumpStartData: state.dashboardReducer.jumpStartList\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators({\r\n        openJumpstartModal\r\n    }, dispatch)\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(JumpStartBox);\n\n\n// WEBPACK FOOTER //\n// ./src/container/dashboard/jumpStart.js","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Chart from 'chart.js';\nimport isEqual from 'lodash/isEqual';\nimport keyBy from 'lodash/keyBy';\n\nvar NODE_ENV = typeof process !== 'undefined' && process.env && process.env.NODE_ENV;\n\nvar ChartComponent = function (_React$Component) {\n  _inherits(ChartComponent, _React$Component);\n\n  function ChartComponent() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ChartComponent);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleOnClick = function (event) {\n      var instance = _this.chartInstance;\n\n      var _this$props = _this.props,\n          getDatasetAtEvent = _this$props.getDatasetAtEvent,\n          getElementAtEvent = _this$props.getElementAtEvent,\n          getElementsAtEvent = _this$props.getElementsAtEvent,\n          onElementsClick = _this$props.onElementsClick;\n\n\n      getDatasetAtEvent && getDatasetAtEvent(instance.getDatasetAtEvent(event), event);\n      getElementAtEvent && getElementAtEvent(instance.getElementAtEvent(event), event);\n      getElementsAtEvent && getElementsAtEvent(instance.getElementsAtEvent(event), event);\n      onElementsClick && onElementsClick(instance.getElementsAtEvent(event), event); // Backward compatibility\n    }, _this.ref = function (element) {\n      _this.element = element;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  ChartComponent.prototype.componentWillMount = function componentWillMount() {\n    this.chartInstance = undefined;\n  };\n\n  ChartComponent.prototype.componentDidMount = function componentDidMount() {\n    this.renderChart();\n  };\n\n  ChartComponent.prototype.componentDidUpdate = function componentDidUpdate() {\n    if (this.props.redraw) {\n      this.destroyChart();\n      this.renderChart();\n      return;\n    }\n\n    this.updateChart();\n  };\n\n  ChartComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n    var _props = this.props,\n        redraw = _props.redraw,\n        type = _props.type,\n        options = _props.options,\n        plugins = _props.plugins,\n        legend = _props.legend,\n        height = _props.height,\n        width = _props.width;\n\n\n    if (nextProps.redraw === true) {\n      return true;\n    }\n\n    if (height !== nextProps.height || width !== nextProps.width) {\n      return true;\n    }\n\n    if (type !== nextProps.type) {\n      return true;\n    }\n\n    if (!isEqual(legend, nextProps.legend)) {\n      return true;\n    }\n\n    if (!isEqual(options, nextProps.options)) {\n      return true;\n    }\n\n    var nextData = this.transformDataProp(nextProps);\n\n    if (!isEqual(this.shadowDataProp, nextData)) {\n      return true;\n    }\n\n    return !isEqual(plugins, nextProps.plugins);\n  };\n\n  ChartComponent.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.destroyChart();\n  };\n\n  ChartComponent.prototype.transformDataProp = function transformDataProp(props) {\n    var data = props.data;\n\n    if (typeof data == 'function') {\n      var node = this.element;\n      return data(node);\n    } else {\n      return data;\n    }\n  };\n\n  // Chart.js directly mutates the data.dataset objects by adding _meta proprerty\n  // this makes impossible to compare the current and next data changes\n  // therefore we memoize the data prop while sending a fake to Chart.js for mutation.\n  // see https://github.com/chartjs/Chart.js/blob/master/src/core/core.controller.js#L615-L617\n\n\n  ChartComponent.prototype.memoizeDataProps = function memoizeDataProps() {\n    if (!this.props.data) {\n      return;\n    }\n\n    var data = this.transformDataProp(this.props);\n\n    this.shadowDataProp = _extends({}, data, {\n      datasets: data.datasets && data.datasets.map(function (set) {\n        return _extends({}, set);\n      })\n    });\n\n    this.saveCurrentDatasets(); // to remove the dataset metadata from this chart when the chart is destroyed\n\n    return data;\n  };\n\n  ChartComponent.prototype.checkDatasets = function checkDatasets(datasets) {\n    var isDev = NODE_ENV !== 'production' && NODE_ENV !== 'prod';\n    var usingCustomKeyProvider = this.props.datasetKeyProvider !== ChartComponent.getLabelAsKey;\n    var multipleDatasets = datasets.length > 1;\n\n    if (isDev && multipleDatasets && !usingCustomKeyProvider) {\n      var shouldWarn = false;\n      datasets.forEach(function (dataset) {\n        if (!dataset.label) {\n          shouldWarn = true;\n        }\n      });\n\n      if (shouldWarn) {\n        console.error('[react-chartjs-2] Warning: Each dataset needs a unique key. By default, the \"label\" property on each dataset is used. Alternatively, you may provide a \"datasetKeyProvider\" as a prop that returns a unique key.');\n      }\n    }\n  };\n\n  ChartComponent.prototype.getCurrentDatasets = function getCurrentDatasets() {\n    return this.chartInstance && this.chartInstance.config.data && this.chartInstance.config.data.datasets || [];\n  };\n\n  ChartComponent.prototype.saveCurrentDatasets = function saveCurrentDatasets() {\n    var _this2 = this;\n\n    this.datasets = this.datasets || {};\n    var currentDatasets = this.getCurrentDatasets();\n    currentDatasets.forEach(function (d) {\n      _this2.datasets[_this2.props.datasetKeyProvider(d)] = d;\n    });\n  };\n\n  ChartComponent.prototype.updateChart = function updateChart() {\n    var _this3 = this;\n\n    var options = this.props.options;\n\n\n    var data = this.memoizeDataProps(this.props);\n\n    if (!this.chartInstance) return;\n\n    if (options) {\n      this.chartInstance.options = Chart.helpers.configMerge(this.chartInstance.options, options);\n    }\n\n    // Pipe datasets to chart instance datasets enabling\n    // seamless transitions\n    var currentDatasets = this.getCurrentDatasets();\n    var nextDatasets = data.datasets || [];\n    this.checkDatasets(currentDatasets);\n\n    var currentDatasetsIndexed = keyBy(currentDatasets, this.props.datasetKeyProvider);\n\n    // We can safely replace the dataset array, as long as we retain the _meta property\n    // on each dataset.\n    this.chartInstance.config.data.datasets = nextDatasets.map(function (next) {\n      var current = currentDatasetsIndexed[_this3.props.datasetKeyProvider(next)];\n\n      if (current && current.type === next.type) {\n        // The data array must be edited in place. As chart.js adds listeners to it.\n        current.data.splice(next.data.length);\n        next.data.forEach(function (point, pid) {\n          current.data[pid] = next.data[pid];\n        });\n\n        var _data = next.data,\n            otherProps = _objectWithoutProperties(next, ['data']);\n        // Merge properties. Notice a weakness here. If a property is removed\n        // from next, it will be retained by current and never disappears.\n        // Workaround is to set value to null or undefined in next.\n\n\n        return _extends({}, current, otherProps);\n      } else {\n        return next;\n      }\n    });\n\n    var datasets = data.datasets,\n        rest = _objectWithoutProperties(data, ['datasets']);\n\n    this.chartInstance.config.data = _extends({}, this.chartInstance.config.data, rest);\n\n    this.chartInstance.update();\n  };\n\n  ChartComponent.prototype.renderChart = function renderChart() {\n    var _props2 = this.props,\n        options = _props2.options,\n        legend = _props2.legend,\n        type = _props2.type,\n        plugins = _props2.plugins;\n\n    var node = this.element;\n    var data = this.memoizeDataProps();\n\n    if (typeof legend !== 'undefined' && !isEqual(ChartComponent.defaultProps.legend, legend)) {\n      options.legend = legend;\n    }\n\n    this.chartInstance = new Chart(node, {\n      type: type,\n      data: data,\n      options: options,\n      plugins: plugins\n    });\n  };\n\n  ChartComponent.prototype.destroyChart = function destroyChart() {\n    // Put all of the datasets that have existed in the chart back on the chart\n    // so that the metadata associated with this chart get destroyed.\n    // This allows the datasets to be used in another chart. This can happen,\n    // for example, in a tabbed UI where the chart gets created each time the\n    // tab gets switched to the chart and uses the same data).\n    this.saveCurrentDatasets();\n    var datasets = Object.values(this.datasets);\n    this.chartInstance.config.data.datasets = datasets;\n\n    this.chartInstance.destroy();\n  };\n\n  ChartComponent.prototype.render = function render() {\n    var _props3 = this.props,\n        height = _props3.height,\n        width = _props3.width,\n        id = _props3.id;\n\n\n    return React.createElement('canvas', {\n      ref: this.ref,\n      height: height,\n      width: width,\n      id: id,\n      onClick: this.handleOnClick\n    });\n  };\n\n  return ChartComponent;\n}(React.Component);\n\nChartComponent.getLabelAsKey = function (d) {\n  return d.label;\n};\n\nChartComponent.propTypes = {\n  data: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired,\n  getDatasetAtEvent: PropTypes.func,\n  getElementAtEvent: PropTypes.func,\n  getElementsAtEvent: PropTypes.func,\n  height: PropTypes.number,\n  legend: PropTypes.object,\n  onElementsClick: PropTypes.func,\n  options: PropTypes.object,\n  plugins: PropTypes.arrayOf(PropTypes.object),\n  redraw: PropTypes.bool,\n  type: function type(props, propName, componentName) {\n    if (!Chart.controllers[props[propName]]) {\n      return new Error('Invalid chart type `' + props[propName] + '` supplied to' + ' `' + componentName + '`.');\n    }\n  },\n  width: PropTypes.number,\n  datasetKeyProvider: PropTypes.func\n};\nChartComponent.defaultProps = {\n  legend: {\n    display: true,\n    position: 'bottom'\n  },\n  type: 'doughnut',\n  height: 150,\n  width: 300,\n  redraw: false,\n  options: {},\n  datasetKeyProvider: ChartComponent.getLabelAsKey\n};\n\n\nexport default ChartComponent;\n\nexport var Doughnut = function (_React$Component2) {\n  _inherits(Doughnut, _React$Component2);\n\n  function Doughnut() {\n    _classCallCheck(this, Doughnut);\n\n    return _possibleConstructorReturn(this, _React$Component2.apply(this, arguments));\n  }\n\n  Doughnut.prototype.render = function render() {\n    var _this5 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref) {\n        return _this5.chartInstance = _ref && _ref.chartInstance;\n      },\n      type: 'doughnut'\n    }));\n  };\n\n  return Doughnut;\n}(React.Component);\n\nexport var Pie = function (_React$Component3) {\n  _inherits(Pie, _React$Component3);\n\n  function Pie() {\n    _classCallCheck(this, Pie);\n\n    return _possibleConstructorReturn(this, _React$Component3.apply(this, arguments));\n  }\n\n  Pie.prototype.render = function render() {\n    var _this7 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref2) {\n        return _this7.chartInstance = _ref2 && _ref2.chartInstance;\n      },\n      type: 'pie'\n    }));\n  };\n\n  return Pie;\n}(React.Component);\n\nexport var Line = function (_React$Component4) {\n  _inherits(Line, _React$Component4);\n\n  function Line() {\n    _classCallCheck(this, Line);\n\n    return _possibleConstructorReturn(this, _React$Component4.apply(this, arguments));\n  }\n\n  Line.prototype.render = function render() {\n    var _this9 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref3) {\n        return _this9.chartInstance = _ref3 && _ref3.chartInstance;\n      },\n      type: 'line'\n    }));\n  };\n\n  return Line;\n}(React.Component);\n\nexport var Bar = function (_React$Component5) {\n  _inherits(Bar, _React$Component5);\n\n  function Bar() {\n    _classCallCheck(this, Bar);\n\n    return _possibleConstructorReturn(this, _React$Component5.apply(this, arguments));\n  }\n\n  Bar.prototype.render = function render() {\n    var _this11 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref4) {\n        return _this11.chartInstance = _ref4 && _ref4.chartInstance;\n      },\n      type: 'bar'\n    }));\n  };\n\n  return Bar;\n}(React.Component);\n\nexport var HorizontalBar = function (_React$Component6) {\n  _inherits(HorizontalBar, _React$Component6);\n\n  function HorizontalBar() {\n    _classCallCheck(this, HorizontalBar);\n\n    return _possibleConstructorReturn(this, _React$Component6.apply(this, arguments));\n  }\n\n  HorizontalBar.prototype.render = function render() {\n    var _this13 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref5) {\n        return _this13.chartInstance = _ref5 && _ref5.chartInstance;\n      },\n      type: 'horizontalBar'\n    }));\n  };\n\n  return HorizontalBar;\n}(React.Component);\n\nexport var Radar = function (_React$Component7) {\n  _inherits(Radar, _React$Component7);\n\n  function Radar() {\n    _classCallCheck(this, Radar);\n\n    return _possibleConstructorReturn(this, _React$Component7.apply(this, arguments));\n  }\n\n  Radar.prototype.render = function render() {\n    var _this15 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref6) {\n        return _this15.chartInstance = _ref6 && _ref6.chartInstance;\n      },\n      type: 'radar'\n    }));\n  };\n\n  return Radar;\n}(React.Component);\n\nexport var Polar = function (_React$Component8) {\n  _inherits(Polar, _React$Component8);\n\n  function Polar() {\n    _classCallCheck(this, Polar);\n\n    return _possibleConstructorReturn(this, _React$Component8.apply(this, arguments));\n  }\n\n  Polar.prototype.render = function render() {\n    var _this17 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref7) {\n        return _this17.chartInstance = _ref7 && _ref7.chartInstance;\n      },\n      type: 'polarArea'\n    }));\n  };\n\n  return Polar;\n}(React.Component);\n\nexport var Bubble = function (_React$Component9) {\n  _inherits(Bubble, _React$Component9);\n\n  function Bubble() {\n    _classCallCheck(this, Bubble);\n\n    return _possibleConstructorReturn(this, _React$Component9.apply(this, arguments));\n  }\n\n  Bubble.prototype.render = function render() {\n    var _this19 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref8) {\n        return _this19.chartInstance = _ref8 && _ref8.chartInstance;\n      },\n      type: 'bubble'\n    }));\n  };\n\n  return Bubble;\n}(React.Component);\n\nexport var Scatter = function (_React$Component10) {\n  _inherits(Scatter, _React$Component10);\n\n  function Scatter() {\n    _classCallCheck(this, Scatter);\n\n    return _possibleConstructorReturn(this, _React$Component10.apply(this, arguments));\n  }\n\n  Scatter.prototype.render = function render() {\n    var _this21 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref9) {\n        return _this21.chartInstance = _ref9 && _ref9.chartInstance;\n      },\n      type: 'scatter'\n    }));\n  };\n\n  return Scatter;\n}(React.Component);\n\nexport var defaults = Chart.defaults;\nexport { Chart };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/react-chartjs-2/es/index.js\n// module id = 2567\n// module chunks = 18","/*!\n * Chart.js v2.8.0\n * https://www.chartjs.org\n * (c) 2019 Chart.js Contributors\n * Released under the MIT License\n */\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(function() { try { return require('moment'); } catch(e) { } }()) :\ntypeof define === 'function' && define.amd ? define(['require'], function(require) { return factory(function() { try { return require('moment'); } catch(e) { } }()); }) :\n(global.Chart = factory(global.moment));\n}(this, (function (moment) { 'use strict';\n\nmoment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;\n\n/* MIT license */\n\nvar conversions = {\n  rgb2hsl: rgb2hsl,\n  rgb2hsv: rgb2hsv,\n  rgb2hwb: rgb2hwb,\n  rgb2cmyk: rgb2cmyk,\n  rgb2keyword: rgb2keyword,\n  rgb2xyz: rgb2xyz,\n  rgb2lab: rgb2lab,\n  rgb2lch: rgb2lch,\n\n  hsl2rgb: hsl2rgb,\n  hsl2hsv: hsl2hsv,\n  hsl2hwb: hsl2hwb,\n  hsl2cmyk: hsl2cmyk,\n  hsl2keyword: hsl2keyword,\n\n  hsv2rgb: hsv2rgb,\n  hsv2hsl: hsv2hsl,\n  hsv2hwb: hsv2hwb,\n  hsv2cmyk: hsv2cmyk,\n  hsv2keyword: hsv2keyword,\n\n  hwb2rgb: hwb2rgb,\n  hwb2hsl: hwb2hsl,\n  hwb2hsv: hwb2hsv,\n  hwb2cmyk: hwb2cmyk,\n  hwb2keyword: hwb2keyword,\n\n  cmyk2rgb: cmyk2rgb,\n  cmyk2hsl: cmyk2hsl,\n  cmyk2hsv: cmyk2hsv,\n  cmyk2hwb: cmyk2hwb,\n  cmyk2keyword: cmyk2keyword,\n\n  keyword2rgb: keyword2rgb,\n  keyword2hsl: keyword2hsl,\n  keyword2hsv: keyword2hsv,\n  keyword2hwb: keyword2hwb,\n  keyword2cmyk: keyword2cmyk,\n  keyword2lab: keyword2lab,\n  keyword2xyz: keyword2xyz,\n\n  xyz2rgb: xyz2rgb,\n  xyz2lab: xyz2lab,\n  xyz2lch: xyz2lch,\n\n  lab2xyz: lab2xyz,\n  lab2rgb: lab2rgb,\n  lab2lch: lab2lch,\n\n  lch2lab: lch2lab,\n  lch2xyz: lch2xyz,\n  lch2rgb: lch2rgb\n};\n\n\nfunction rgb2hsl(rgb) {\n  var r = rgb[0]/255,\n      g = rgb[1]/255,\n      b = rgb[2]/255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      delta = max - min,\n      h, s, l;\n\n  if (max == min)\n    h = 0;\n  else if (r == max)\n    h = (g - b) / delta;\n  else if (g == max)\n    h = 2 + (b - r) / delta;\n  else if (b == max)\n    h = 4 + (r - g)/ delta;\n\n  h = Math.min(h * 60, 360);\n\n  if (h < 0)\n    h += 360;\n\n  l = (min + max) / 2;\n\n  if (max == min)\n    s = 0;\n  else if (l <= 0.5)\n    s = delta / (max + min);\n  else\n    s = delta / (2 - max - min);\n\n  return [h, s * 100, l * 100];\n}\n\nfunction rgb2hsv(rgb) {\n  var r = rgb[0],\n      g = rgb[1],\n      b = rgb[2],\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      delta = max - min,\n      h, s, v;\n\n  if (max == 0)\n    s = 0;\n  else\n    s = (delta/max * 1000)/10;\n\n  if (max == min)\n    h = 0;\n  else if (r == max)\n    h = (g - b) / delta;\n  else if (g == max)\n    h = 2 + (b - r) / delta;\n  else if (b == max)\n    h = 4 + (r - g) / delta;\n\n  h = Math.min(h * 60, 360);\n\n  if (h < 0)\n    h += 360;\n\n  v = ((max / 255) * 1000) / 10;\n\n  return [h, s, v];\n}\n\nfunction rgb2hwb(rgb) {\n  var r = rgb[0],\n      g = rgb[1],\n      b = rgb[2],\n      h = rgb2hsl(rgb)[0],\n      w = 1/255 * Math.min(r, Math.min(g, b)),\n      b = 1 - 1/255 * Math.max(r, Math.max(g, b));\n\n  return [h, w * 100, b * 100];\n}\n\nfunction rgb2cmyk(rgb) {\n  var r = rgb[0] / 255,\n      g = rgb[1] / 255,\n      b = rgb[2] / 255,\n      c, m, y, k;\n\n  k = Math.min(1 - r, 1 - g, 1 - b);\n  c = (1 - r - k) / (1 - k) || 0;\n  m = (1 - g - k) / (1 - k) || 0;\n  y = (1 - b - k) / (1 - k) || 0;\n  return [c * 100, m * 100, y * 100, k * 100];\n}\n\nfunction rgb2keyword(rgb) {\n  return reverseKeywords[JSON.stringify(rgb)];\n}\n\nfunction rgb2xyz(rgb) {\n  var r = rgb[0] / 255,\n      g = rgb[1] / 255,\n      b = rgb[2] / 255;\n\n  // assume sRGB\n  r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n  g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n  b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n  var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n  var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n  var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n  return [x * 100, y *100, z * 100];\n}\n\nfunction rgb2lab(rgb) {\n  var xyz = rgb2xyz(rgb),\n        x = xyz[0],\n        y = xyz[1],\n        z = xyz[2],\n        l, a, b;\n\n  x /= 95.047;\n  y /= 100;\n  z /= 108.883;\n\n  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);\n  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);\n  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);\n\n  l = (116 * y) - 16;\n  a = 500 * (x - y);\n  b = 200 * (y - z);\n\n  return [l, a, b];\n}\n\nfunction rgb2lch(args) {\n  return lab2lch(rgb2lab(args));\n}\n\nfunction hsl2rgb(hsl) {\n  var h = hsl[0] / 360,\n      s = hsl[1] / 100,\n      l = hsl[2] / 100,\n      t1, t2, t3, rgb, val;\n\n  if (s == 0) {\n    val = l * 255;\n    return [val, val, val];\n  }\n\n  if (l < 0.5)\n    t2 = l * (1 + s);\n  else\n    t2 = l + s - l * s;\n  t1 = 2 * l - t2;\n\n  rgb = [0, 0, 0];\n  for (var i = 0; i < 3; i++) {\n    t3 = h + 1 / 3 * - (i - 1);\n    t3 < 0 && t3++;\n    t3 > 1 && t3--;\n\n    if (6 * t3 < 1)\n      val = t1 + (t2 - t1) * 6 * t3;\n    else if (2 * t3 < 1)\n      val = t2;\n    else if (3 * t3 < 2)\n      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n    else\n      val = t1;\n\n    rgb[i] = val * 255;\n  }\n\n  return rgb;\n}\n\nfunction hsl2hsv(hsl) {\n  var h = hsl[0],\n      s = hsl[1] / 100,\n      l = hsl[2] / 100,\n      sv, v;\n\n  if(l === 0) {\n      // no need to do calc on black\n      // also avoids divide by 0 error\n      return [0, 0, 0];\n  }\n\n  l *= 2;\n  s *= (l <= 1) ? l : 2 - l;\n  v = (l + s) / 2;\n  sv = (2 * s) / (l + s);\n  return [h, sv * 100, v * 100];\n}\n\nfunction hsl2hwb(args) {\n  return rgb2hwb(hsl2rgb(args));\n}\n\nfunction hsl2cmyk(args) {\n  return rgb2cmyk(hsl2rgb(args));\n}\n\nfunction hsl2keyword(args) {\n  return rgb2keyword(hsl2rgb(args));\n}\n\n\nfunction hsv2rgb(hsv) {\n  var h = hsv[0] / 60,\n      s = hsv[1] / 100,\n      v = hsv[2] / 100,\n      hi = Math.floor(h) % 6;\n\n  var f = h - Math.floor(h),\n      p = 255 * v * (1 - s),\n      q = 255 * v * (1 - (s * f)),\n      t = 255 * v * (1 - (s * (1 - f))),\n      v = 255 * v;\n\n  switch(hi) {\n    case 0:\n      return [v, t, p];\n    case 1:\n      return [q, v, p];\n    case 2:\n      return [p, v, t];\n    case 3:\n      return [p, q, v];\n    case 4:\n      return [t, p, v];\n    case 5:\n      return [v, p, q];\n  }\n}\n\nfunction hsv2hsl(hsv) {\n  var h = hsv[0],\n      s = hsv[1] / 100,\n      v = hsv[2] / 100,\n      sl, l;\n\n  l = (2 - s) * v;\n  sl = s * v;\n  sl /= (l <= 1) ? l : 2 - l;\n  sl = sl || 0;\n  l /= 2;\n  return [h, sl * 100, l * 100];\n}\n\nfunction hsv2hwb(args) {\n  return rgb2hwb(hsv2rgb(args))\n}\n\nfunction hsv2cmyk(args) {\n  return rgb2cmyk(hsv2rgb(args));\n}\n\nfunction hsv2keyword(args) {\n  return rgb2keyword(hsv2rgb(args));\n}\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nfunction hwb2rgb(hwb) {\n  var h = hwb[0] / 360,\n      wh = hwb[1] / 100,\n      bl = hwb[2] / 100,\n      ratio = wh + bl,\n      i, v, f, n;\n\n  // wh + bl cant be > 1\n  if (ratio > 1) {\n    wh /= ratio;\n    bl /= ratio;\n  }\n\n  i = Math.floor(6 * h);\n  v = 1 - bl;\n  f = 6 * h - i;\n  if ((i & 0x01) != 0) {\n    f = 1 - f;\n  }\n  n = wh + f * (v - wh);  // linear interpolation\n\n  switch (i) {\n    default:\n    case 6:\n    case 0: r = v; g = n; b = wh; break;\n    case 1: r = n; g = v; b = wh; break;\n    case 2: r = wh; g = v; b = n; break;\n    case 3: r = wh; g = n; b = v; break;\n    case 4: r = n; g = wh; b = v; break;\n    case 5: r = v; g = wh; b = n; break;\n  }\n\n  return [r * 255, g * 255, b * 255];\n}\n\nfunction hwb2hsl(args) {\n  return rgb2hsl(hwb2rgb(args));\n}\n\nfunction hwb2hsv(args) {\n  return rgb2hsv(hwb2rgb(args));\n}\n\nfunction hwb2cmyk(args) {\n  return rgb2cmyk(hwb2rgb(args));\n}\n\nfunction hwb2keyword(args) {\n  return rgb2keyword(hwb2rgb(args));\n}\n\nfunction cmyk2rgb(cmyk) {\n  var c = cmyk[0] / 100,\n      m = cmyk[1] / 100,\n      y = cmyk[2] / 100,\n      k = cmyk[3] / 100,\n      r, g, b;\n\n  r = 1 - Math.min(1, c * (1 - k) + k);\n  g = 1 - Math.min(1, m * (1 - k) + k);\n  b = 1 - Math.min(1, y * (1 - k) + k);\n  return [r * 255, g * 255, b * 255];\n}\n\nfunction cmyk2hsl(args) {\n  return rgb2hsl(cmyk2rgb(args));\n}\n\nfunction cmyk2hsv(args) {\n  return rgb2hsv(cmyk2rgb(args));\n}\n\nfunction cmyk2hwb(args) {\n  return rgb2hwb(cmyk2rgb(args));\n}\n\nfunction cmyk2keyword(args) {\n  return rgb2keyword(cmyk2rgb(args));\n}\n\n\nfunction xyz2rgb(xyz) {\n  var x = xyz[0] / 100,\n      y = xyz[1] / 100,\n      z = xyz[2] / 100,\n      r, g, b;\n\n  r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n  g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n  b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n  // assume sRGB\n  r = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n    : r = (r * 12.92);\n\n  g = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n    : g = (g * 12.92);\n\n  b = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n    : b = (b * 12.92);\n\n  r = Math.min(Math.max(0, r), 1);\n  g = Math.min(Math.max(0, g), 1);\n  b = Math.min(Math.max(0, b), 1);\n\n  return [r * 255, g * 255, b * 255];\n}\n\nfunction xyz2lab(xyz) {\n  var x = xyz[0],\n      y = xyz[1],\n      z = xyz[2],\n      l, a, b;\n\n  x /= 95.047;\n  y /= 100;\n  z /= 108.883;\n\n  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);\n  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);\n  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);\n\n  l = (116 * y) - 16;\n  a = 500 * (x - y);\n  b = 200 * (y - z);\n\n  return [l, a, b];\n}\n\nfunction xyz2lch(args) {\n  return lab2lch(xyz2lab(args));\n}\n\nfunction lab2xyz(lab) {\n  var l = lab[0],\n      a = lab[1],\n      b = lab[2],\n      x, y, z, y2;\n\n  if (l <= 8) {\n    y = (l * 100) / 903.3;\n    y2 = (7.787 * (y / 100)) + (16 / 116);\n  } else {\n    y = 100 * Math.pow((l + 16) / 116, 3);\n    y2 = Math.pow(y / 100, 1/3);\n  }\n\n  x = x / 95.047 <= 0.008856 ? x = (95.047 * ((a / 500) + y2 - (16 / 116))) / 7.787 : 95.047 * Math.pow((a / 500) + y2, 3);\n\n  z = z / 108.883 <= 0.008859 ? z = (108.883 * (y2 - (b / 200) - (16 / 116))) / 7.787 : 108.883 * Math.pow(y2 - (b / 200), 3);\n\n  return [x, y, z];\n}\n\nfunction lab2lch(lab) {\n  var l = lab[0],\n      a = lab[1],\n      b = lab[2],\n      hr, h, c;\n\n  hr = Math.atan2(b, a);\n  h = hr * 360 / 2 / Math.PI;\n  if (h < 0) {\n    h += 360;\n  }\n  c = Math.sqrt(a * a + b * b);\n  return [l, c, h];\n}\n\nfunction lab2rgb(args) {\n  return xyz2rgb(lab2xyz(args));\n}\n\nfunction lch2lab(lch) {\n  var l = lch[0],\n      c = lch[1],\n      h = lch[2],\n      a, b, hr;\n\n  hr = h / 360 * 2 * Math.PI;\n  a = c * Math.cos(hr);\n  b = c * Math.sin(hr);\n  return [l, a, b];\n}\n\nfunction lch2xyz(args) {\n  return lab2xyz(lch2lab(args));\n}\n\nfunction lch2rgb(args) {\n  return lab2rgb(lch2lab(args));\n}\n\nfunction keyword2rgb(keyword) {\n  return cssKeywords[keyword];\n}\n\nfunction keyword2hsl(args) {\n  return rgb2hsl(keyword2rgb(args));\n}\n\nfunction keyword2hsv(args) {\n  return rgb2hsv(keyword2rgb(args));\n}\n\nfunction keyword2hwb(args) {\n  return rgb2hwb(keyword2rgb(args));\n}\n\nfunction keyword2cmyk(args) {\n  return rgb2cmyk(keyword2rgb(args));\n}\n\nfunction keyword2lab(args) {\n  return rgb2lab(keyword2rgb(args));\n}\n\nfunction keyword2xyz(args) {\n  return rgb2xyz(keyword2rgb(args));\n}\n\nvar cssKeywords = {\n  aliceblue:  [240,248,255],\n  antiquewhite: [250,235,215],\n  aqua: [0,255,255],\n  aquamarine: [127,255,212],\n  azure:  [240,255,255],\n  beige:  [245,245,220],\n  bisque: [255,228,196],\n  black:  [0,0,0],\n  blanchedalmond: [255,235,205],\n  blue: [0,0,255],\n  blueviolet: [138,43,226],\n  brown:  [165,42,42],\n  burlywood:  [222,184,135],\n  cadetblue:  [95,158,160],\n  chartreuse: [127,255,0],\n  chocolate:  [210,105,30],\n  coral:  [255,127,80],\n  cornflowerblue: [100,149,237],\n  cornsilk: [255,248,220],\n  crimson:  [220,20,60],\n  cyan: [0,255,255],\n  darkblue: [0,0,139],\n  darkcyan: [0,139,139],\n  darkgoldenrod:  [184,134,11],\n  darkgray: [169,169,169],\n  darkgreen:  [0,100,0],\n  darkgrey: [169,169,169],\n  darkkhaki:  [189,183,107],\n  darkmagenta:  [139,0,139],\n  darkolivegreen: [85,107,47],\n  darkorange: [255,140,0],\n  darkorchid: [153,50,204],\n  darkred:  [139,0,0],\n  darksalmon: [233,150,122],\n  darkseagreen: [143,188,143],\n  darkslateblue:  [72,61,139],\n  darkslategray:  [47,79,79],\n  darkslategrey:  [47,79,79],\n  darkturquoise:  [0,206,209],\n  darkviolet: [148,0,211],\n  deeppink: [255,20,147],\n  deepskyblue:  [0,191,255],\n  dimgray:  [105,105,105],\n  dimgrey:  [105,105,105],\n  dodgerblue: [30,144,255],\n  firebrick:  [178,34,34],\n  floralwhite:  [255,250,240],\n  forestgreen:  [34,139,34],\n  fuchsia:  [255,0,255],\n  gainsboro:  [220,220,220],\n  ghostwhite: [248,248,255],\n  gold: [255,215,0],\n  goldenrod:  [218,165,32],\n  gray: [128,128,128],\n  green:  [0,128,0],\n  greenyellow:  [173,255,47],\n  grey: [128,128,128],\n  honeydew: [240,255,240],\n  hotpink:  [255,105,180],\n  indianred:  [205,92,92],\n  indigo: [75,0,130],\n  ivory:  [255,255,240],\n  khaki:  [240,230,140],\n  lavender: [230,230,250],\n  lavenderblush:  [255,240,245],\n  lawngreen:  [124,252,0],\n  lemonchiffon: [255,250,205],\n  lightblue:  [173,216,230],\n  lightcoral: [240,128,128],\n  lightcyan:  [224,255,255],\n  lightgoldenrodyellow: [250,250,210],\n  lightgray:  [211,211,211],\n  lightgreen: [144,238,144],\n  lightgrey:  [211,211,211],\n  lightpink:  [255,182,193],\n  lightsalmon:  [255,160,122],\n  lightseagreen:  [32,178,170],\n  lightskyblue: [135,206,250],\n  lightslategray: [119,136,153],\n  lightslategrey: [119,136,153],\n  lightsteelblue: [176,196,222],\n  lightyellow:  [255,255,224],\n  lime: [0,255,0],\n  limegreen:  [50,205,50],\n  linen:  [250,240,230],\n  magenta:  [255,0,255],\n  maroon: [128,0,0],\n  mediumaquamarine: [102,205,170],\n  mediumblue: [0,0,205],\n  mediumorchid: [186,85,211],\n  mediumpurple: [147,112,219],\n  mediumseagreen: [60,179,113],\n  mediumslateblue:  [123,104,238],\n  mediumspringgreen:  [0,250,154],\n  mediumturquoise:  [72,209,204],\n  mediumvioletred:  [199,21,133],\n  midnightblue: [25,25,112],\n  mintcream:  [245,255,250],\n  mistyrose:  [255,228,225],\n  moccasin: [255,228,181],\n  navajowhite:  [255,222,173],\n  navy: [0,0,128],\n  oldlace:  [253,245,230],\n  olive:  [128,128,0],\n  olivedrab:  [107,142,35],\n  orange: [255,165,0],\n  orangered:  [255,69,0],\n  orchid: [218,112,214],\n  palegoldenrod:  [238,232,170],\n  palegreen:  [152,251,152],\n  paleturquoise:  [175,238,238],\n  palevioletred:  [219,112,147],\n  papayawhip: [255,239,213],\n  peachpuff:  [255,218,185],\n  peru: [205,133,63],\n  pink: [255,192,203],\n  plum: [221,160,221],\n  powderblue: [176,224,230],\n  purple: [128,0,128],\n  rebeccapurple: [102, 51, 153],\n  red:  [255,0,0],\n  rosybrown:  [188,143,143],\n  royalblue:  [65,105,225],\n  saddlebrown:  [139,69,19],\n  salmon: [250,128,114],\n  sandybrown: [244,164,96],\n  seagreen: [46,139,87],\n  seashell: [255,245,238],\n  sienna: [160,82,45],\n  silver: [192,192,192],\n  skyblue:  [135,206,235],\n  slateblue:  [106,90,205],\n  slategray:  [112,128,144],\n  slategrey:  [112,128,144],\n  snow: [255,250,250],\n  springgreen:  [0,255,127],\n  steelblue:  [70,130,180],\n  tan:  [210,180,140],\n  teal: [0,128,128],\n  thistle:  [216,191,216],\n  tomato: [255,99,71],\n  turquoise:  [64,224,208],\n  violet: [238,130,238],\n  wheat:  [245,222,179],\n  white:  [255,255,255],\n  whitesmoke: [245,245,245],\n  yellow: [255,255,0],\n  yellowgreen:  [154,205,50]\n};\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n  reverseKeywords[JSON.stringify(cssKeywords[key])] = key;\n}\n\nvar convert = function() {\n   return new Converter();\n};\n\nfor (var func in conversions) {\n  // export Raw versions\n  convert[func + \"Raw\"] =  (function(func) {\n    // accept array or plain args\n    return function(arg) {\n      if (typeof arg == \"number\")\n        arg = Array.prototype.slice.call(arguments);\n      return conversions[func](arg);\n    }\n  })(func);\n\n  var pair = /(\\w+)2(\\w+)/.exec(func),\n      from = pair[1],\n      to = pair[2];\n\n  // export rgb2hsl and [\"rgb\"][\"hsl\"]\n  convert[from] = convert[from] || {};\n\n  convert[from][to] = convert[func] = (function(func) { \n    return function(arg) {\n      if (typeof arg == \"number\")\n        arg = Array.prototype.slice.call(arguments);\n      \n      var val = conversions[func](arg);\n      if (typeof val == \"string\" || val === undefined)\n        return val; // keyword\n\n      for (var i = 0; i < val.length; i++)\n        val[i] = Math.round(val[i]);\n      return val;\n    }\n  })(func);\n}\n\n\n/* Converter does lazy conversion and caching */\nvar Converter = function() {\n   this.convs = {};\n};\n\n/* Either get the values for a space or\n  set the values for a space, depending on args */\nConverter.prototype.routeSpace = function(space, args) {\n   var values = args[0];\n   if (values === undefined) {\n      // color.rgb()\n      return this.getValues(space);\n   }\n   // color.rgb(10, 10, 10)\n   if (typeof values == \"number\") {\n      values = Array.prototype.slice.call(args);        \n   }\n\n   return this.setValues(space, values);\n};\n  \n/* Set the values for a space, invalidating cache */\nConverter.prototype.setValues = function(space, values) {\n   this.space = space;\n   this.convs = {};\n   this.convs[space] = values;\n   return this;\n};\n\n/* Get the values for a space. If there's already\n  a conversion for the space, fetch it, otherwise\n  compute it */\nConverter.prototype.getValues = function(space) {\n   var vals = this.convs[space];\n   if (!vals) {\n      var fspace = this.space,\n          from = this.convs[fspace];\n      vals = convert[fspace][space](from);\n\n      this.convs[space] = vals;\n   }\n  return vals;\n};\n\n[\"rgb\", \"hsl\", \"hsv\", \"cmyk\", \"keyword\"].forEach(function(space) {\n   Converter.prototype[space] = function(vals) {\n      return this.routeSpace(space, arguments);\n   };\n});\n\nvar colorConvert = convert;\n\nvar colorName = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\n\n/* MIT license */\n\n\nvar colorString = {\n   getRgba: getRgba,\n   getHsla: getHsla,\n   getRgb: getRgb,\n   getHsl: getHsl,\n   getHwb: getHwb,\n   getAlpha: getAlpha,\n\n   hexString: hexString,\n   rgbString: rgbString,\n   rgbaString: rgbaString,\n   percentString: percentString,\n   percentaString: percentaString,\n   hslString: hslString,\n   hslaString: hslaString,\n   hwbString: hwbString,\n   keyword: keyword\n};\n\nfunction getRgba(string) {\n   if (!string) {\n      return;\n   }\n   var abbr =  /^#([a-fA-F0-9]{3,4})$/i,\n       hex =  /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,\n       rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i,\n       per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i,\n       keyword = /(\\w+)/;\n\n   var rgb = [0, 0, 0],\n       a = 1,\n       match = string.match(abbr),\n       hexAlpha = \"\";\n   if (match) {\n      match = match[1];\n      hexAlpha = match[3];\n      for (var i = 0; i < rgb.length; i++) {\n         rgb[i] = parseInt(match[i] + match[i], 16);\n      }\n      if (hexAlpha) {\n         a = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;\n      }\n   }\n   else if (match = string.match(hex)) {\n      hexAlpha = match[2];\n      match = match[1];\n      for (var i = 0; i < rgb.length; i++) {\n         rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);\n      }\n      if (hexAlpha) {\n         a = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;\n      }\n   }\n   else if (match = string.match(rgba)) {\n      for (var i = 0; i < rgb.length; i++) {\n         rgb[i] = parseInt(match[i + 1]);\n      }\n      a = parseFloat(match[4]);\n   }\n   else if (match = string.match(per)) {\n      for (var i = 0; i < rgb.length; i++) {\n         rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n      }\n      a = parseFloat(match[4]);\n   }\n   else if (match = string.match(keyword)) {\n      if (match[1] == \"transparent\") {\n         return [0, 0, 0, 0];\n      }\n      rgb = colorName[match[1]];\n      if (!rgb) {\n         return;\n      }\n   }\n\n   for (var i = 0; i < rgb.length; i++) {\n      rgb[i] = scale(rgb[i], 0, 255);\n   }\n   if (!a && a != 0) {\n      a = 1;\n   }\n   else {\n      a = scale(a, 0, 1);\n   }\n   rgb[3] = a;\n   return rgb;\n}\n\nfunction getHsla(string) {\n   if (!string) {\n      return;\n   }\n   var hsl = /^hsla?\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\n   var match = string.match(hsl);\n   if (match) {\n      var alpha = parseFloat(match[4]);\n      var h = scale(parseInt(match[1]), 0, 360),\n          s = scale(parseFloat(match[2]), 0, 100),\n          l = scale(parseFloat(match[3]), 0, 100),\n          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\n      return [h, s, l, a];\n   }\n}\n\nfunction getHwb(string) {\n   if (!string) {\n      return;\n   }\n   var hwb = /^hwb\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\n   var match = string.match(hwb);\n   if (match) {\n    var alpha = parseFloat(match[4]);\n      var h = scale(parseInt(match[1]), 0, 360),\n          w = scale(parseFloat(match[2]), 0, 100),\n          b = scale(parseFloat(match[3]), 0, 100),\n          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\n      return [h, w, b, a];\n   }\n}\n\nfunction getRgb(string) {\n   var rgba = getRgba(string);\n   return rgba && rgba.slice(0, 3);\n}\n\nfunction getHsl(string) {\n  var hsla = getHsla(string);\n  return hsla && hsla.slice(0, 3);\n}\n\nfunction getAlpha(string) {\n   var vals = getRgba(string);\n   if (vals) {\n      return vals[3];\n   }\n   else if (vals = getHsla(string)) {\n      return vals[3];\n   }\n   else if (vals = getHwb(string)) {\n      return vals[3];\n   }\n}\n\n// generators\nfunction hexString(rgba, a) {\n   var a = (a !== undefined && rgba.length === 3) ? a : rgba[3];\n   return \"#\" + hexDouble(rgba[0]) \n              + hexDouble(rgba[1])\n              + hexDouble(rgba[2])\n              + (\n                 (a >= 0 && a < 1)\n                 ? hexDouble(Math.round(a * 255))\n                 : \"\"\n              );\n}\n\nfunction rgbString(rgba, alpha) {\n   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {\n      return rgbaString(rgba, alpha);\n   }\n   return \"rgb(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2] + \")\";\n}\n\nfunction rgbaString(rgba, alpha) {\n   if (alpha === undefined) {\n      alpha = (rgba[3] !== undefined ? rgba[3] : 1);\n   }\n   return \"rgba(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2]\n           + \", \" + alpha + \")\";\n}\n\nfunction percentString(rgba, alpha) {\n   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {\n      return percentaString(rgba, alpha);\n   }\n   var r = Math.round(rgba[0]/255 * 100),\n       g = Math.round(rgba[1]/255 * 100),\n       b = Math.round(rgba[2]/255 * 100);\n\n   return \"rgb(\" + r + \"%, \" + g + \"%, \" + b + \"%)\";\n}\n\nfunction percentaString(rgba, alpha) {\n   var r = Math.round(rgba[0]/255 * 100),\n       g = Math.round(rgba[1]/255 * 100),\n       b = Math.round(rgba[2]/255 * 100);\n   return \"rgba(\" + r + \"%, \" + g + \"%, \" + b + \"%, \" + (alpha || rgba[3] || 1) + \")\";\n}\n\nfunction hslString(hsla, alpha) {\n   if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {\n      return hslaString(hsla, alpha);\n   }\n   return \"hsl(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%)\";\n}\n\nfunction hslaString(hsla, alpha) {\n   if (alpha === undefined) {\n      alpha = (hsla[3] !== undefined ? hsla[3] : 1);\n   }\n   return \"hsla(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%, \"\n           + alpha + \")\";\n}\n\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\nfunction hwbString(hwb, alpha) {\n   if (alpha === undefined) {\n      alpha = (hwb[3] !== undefined ? hwb[3] : 1);\n   }\n   return \"hwb(\" + hwb[0] + \", \" + hwb[1] + \"%, \" + hwb[2] + \"%\"\n           + (alpha !== undefined && alpha !== 1 ? \", \" + alpha : \"\") + \")\";\n}\n\nfunction keyword(rgb) {\n  return reverseNames[rgb.slice(0, 3)];\n}\n\n// helpers\nfunction scale(num, min, max) {\n   return Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n  var str = num.toString(16).toUpperCase();\n  return (str.length < 2) ? \"0\" + str : str;\n}\n\n\n//create a list of reverse color names\nvar reverseNames = {};\nfor (var name in colorName) {\n   reverseNames[colorName[name]] = name;\n}\n\n/* MIT license */\n\n\n\nvar Color = function (obj) {\n\tif (obj instanceof Color) {\n\t\treturn obj;\n\t}\n\tif (!(this instanceof Color)) {\n\t\treturn new Color(obj);\n\t}\n\n\tthis.valid = false;\n\tthis.values = {\n\t\trgb: [0, 0, 0],\n\t\thsl: [0, 0, 0],\n\t\thsv: [0, 0, 0],\n\t\thwb: [0, 0, 0],\n\t\tcmyk: [0, 0, 0, 0],\n\t\talpha: 1\n\t};\n\n\t// parse Color() argument\n\tvar vals;\n\tif (typeof obj === 'string') {\n\t\tvals = colorString.getRgba(obj);\n\t\tif (vals) {\n\t\t\tthis.setValues('rgb', vals);\n\t\t} else if (vals = colorString.getHsla(obj)) {\n\t\t\tthis.setValues('hsl', vals);\n\t\t} else if (vals = colorString.getHwb(obj)) {\n\t\t\tthis.setValues('hwb', vals);\n\t\t}\n\t} else if (typeof obj === 'object') {\n\t\tvals = obj;\n\t\tif (vals.r !== undefined || vals.red !== undefined) {\n\t\t\tthis.setValues('rgb', vals);\n\t\t} else if (vals.l !== undefined || vals.lightness !== undefined) {\n\t\t\tthis.setValues('hsl', vals);\n\t\t} else if (vals.v !== undefined || vals.value !== undefined) {\n\t\t\tthis.setValues('hsv', vals);\n\t\t} else if (vals.w !== undefined || vals.whiteness !== undefined) {\n\t\t\tthis.setValues('hwb', vals);\n\t\t} else if (vals.c !== undefined || vals.cyan !== undefined) {\n\t\t\tthis.setValues('cmyk', vals);\n\t\t}\n\t}\n};\n\nColor.prototype = {\n\tisValid: function () {\n\t\treturn this.valid;\n\t},\n\trgb: function () {\n\t\treturn this.setSpace('rgb', arguments);\n\t},\n\thsl: function () {\n\t\treturn this.setSpace('hsl', arguments);\n\t},\n\thsv: function () {\n\t\treturn this.setSpace('hsv', arguments);\n\t},\n\thwb: function () {\n\t\treturn this.setSpace('hwb', arguments);\n\t},\n\tcmyk: function () {\n\t\treturn this.setSpace('cmyk', arguments);\n\t},\n\n\trgbArray: function () {\n\t\treturn this.values.rgb;\n\t},\n\thslArray: function () {\n\t\treturn this.values.hsl;\n\t},\n\thsvArray: function () {\n\t\treturn this.values.hsv;\n\t},\n\thwbArray: function () {\n\t\tvar values = this.values;\n\t\tif (values.alpha !== 1) {\n\t\t\treturn values.hwb.concat([values.alpha]);\n\t\t}\n\t\treturn values.hwb;\n\t},\n\tcmykArray: function () {\n\t\treturn this.values.cmyk;\n\t},\n\trgbaArray: function () {\n\t\tvar values = this.values;\n\t\treturn values.rgb.concat([values.alpha]);\n\t},\n\thslaArray: function () {\n\t\tvar values = this.values;\n\t\treturn values.hsl.concat([values.alpha]);\n\t},\n\talpha: function (val) {\n\t\tif (val === undefined) {\n\t\t\treturn this.values.alpha;\n\t\t}\n\t\tthis.setValues('alpha', val);\n\t\treturn this;\n\t},\n\n\tred: function (val) {\n\t\treturn this.setChannel('rgb', 0, val);\n\t},\n\tgreen: function (val) {\n\t\treturn this.setChannel('rgb', 1, val);\n\t},\n\tblue: function (val) {\n\t\treturn this.setChannel('rgb', 2, val);\n\t},\n\thue: function (val) {\n\t\tif (val) {\n\t\t\tval %= 360;\n\t\t\tval = val < 0 ? 360 + val : val;\n\t\t}\n\t\treturn this.setChannel('hsl', 0, val);\n\t},\n\tsaturation: function (val) {\n\t\treturn this.setChannel('hsl', 1, val);\n\t},\n\tlightness: function (val) {\n\t\treturn this.setChannel('hsl', 2, val);\n\t},\n\tsaturationv: function (val) {\n\t\treturn this.setChannel('hsv', 1, val);\n\t},\n\twhiteness: function (val) {\n\t\treturn this.setChannel('hwb', 1, val);\n\t},\n\tblackness: function (val) {\n\t\treturn this.setChannel('hwb', 2, val);\n\t},\n\tvalue: function (val) {\n\t\treturn this.setChannel('hsv', 2, val);\n\t},\n\tcyan: function (val) {\n\t\treturn this.setChannel('cmyk', 0, val);\n\t},\n\tmagenta: function (val) {\n\t\treturn this.setChannel('cmyk', 1, val);\n\t},\n\tyellow: function (val) {\n\t\treturn this.setChannel('cmyk', 2, val);\n\t},\n\tblack: function (val) {\n\t\treturn this.setChannel('cmyk', 3, val);\n\t},\n\n\thexString: function () {\n\t\treturn colorString.hexString(this.values.rgb);\n\t},\n\trgbString: function () {\n\t\treturn colorString.rgbString(this.values.rgb, this.values.alpha);\n\t},\n\trgbaString: function () {\n\t\treturn colorString.rgbaString(this.values.rgb, this.values.alpha);\n\t},\n\tpercentString: function () {\n\t\treturn colorString.percentString(this.values.rgb, this.values.alpha);\n\t},\n\thslString: function () {\n\t\treturn colorString.hslString(this.values.hsl, this.values.alpha);\n\t},\n\thslaString: function () {\n\t\treturn colorString.hslaString(this.values.hsl, this.values.alpha);\n\t},\n\thwbString: function () {\n\t\treturn colorString.hwbString(this.values.hwb, this.values.alpha);\n\t},\n\tkeyword: function () {\n\t\treturn colorString.keyword(this.values.rgb, this.values.alpha);\n\t},\n\n\trgbNumber: function () {\n\t\tvar rgb = this.values.rgb;\n\t\treturn (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];\n\t},\n\n\tluminosity: function () {\n\t\t// http://www.w3.org/TR/WCAG20/#relativeluminancedef\n\t\tvar rgb = this.values.rgb;\n\t\tvar lum = [];\n\t\tfor (var i = 0; i < rgb.length; i++) {\n\t\t\tvar chan = rgb[i] / 255;\n\t\t\tlum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);\n\t\t}\n\t\treturn 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n\t},\n\n\tcontrast: function (color2) {\n\t\t// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n\t\tvar lum1 = this.luminosity();\n\t\tvar lum2 = color2.luminosity();\n\t\tif (lum1 > lum2) {\n\t\t\treturn (lum1 + 0.05) / (lum2 + 0.05);\n\t\t}\n\t\treturn (lum2 + 0.05) / (lum1 + 0.05);\n\t},\n\n\tlevel: function (color2) {\n\t\tvar contrastRatio = this.contrast(color2);\n\t\tif (contrastRatio >= 7.1) {\n\t\t\treturn 'AAA';\n\t\t}\n\n\t\treturn (contrastRatio >= 4.5) ? 'AA' : '';\n\t},\n\n\tdark: function () {\n\t\t// YIQ equation from http://24ways.org/2010/calculating-color-contrast\n\t\tvar rgb = this.values.rgb;\n\t\tvar yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n\t\treturn yiq < 128;\n\t},\n\n\tlight: function () {\n\t\treturn !this.dark();\n\t},\n\n\tnegate: function () {\n\t\tvar rgb = [];\n\t\tfor (var i = 0; i < 3; i++) {\n\t\t\trgb[i] = 255 - this.values.rgb[i];\n\t\t}\n\t\tthis.setValues('rgb', rgb);\n\t\treturn this;\n\t},\n\n\tlighten: function (ratio) {\n\t\tvar hsl = this.values.hsl;\n\t\thsl[2] += hsl[2] * ratio;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\tdarken: function (ratio) {\n\t\tvar hsl = this.values.hsl;\n\t\thsl[2] -= hsl[2] * ratio;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\tsaturate: function (ratio) {\n\t\tvar hsl = this.values.hsl;\n\t\thsl[1] += hsl[1] * ratio;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\tdesaturate: function (ratio) {\n\t\tvar hsl = this.values.hsl;\n\t\thsl[1] -= hsl[1] * ratio;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\twhiten: function (ratio) {\n\t\tvar hwb = this.values.hwb;\n\t\thwb[1] += hwb[1] * ratio;\n\t\tthis.setValues('hwb', hwb);\n\t\treturn this;\n\t},\n\n\tblacken: function (ratio) {\n\t\tvar hwb = this.values.hwb;\n\t\thwb[2] += hwb[2] * ratio;\n\t\tthis.setValues('hwb', hwb);\n\t\treturn this;\n\t},\n\n\tgreyscale: function () {\n\t\tvar rgb = this.values.rgb;\n\t\t// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\t\tvar val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n\t\tthis.setValues('rgb', [val, val, val]);\n\t\treturn this;\n\t},\n\n\tclearer: function (ratio) {\n\t\tvar alpha = this.values.alpha;\n\t\tthis.setValues('alpha', alpha - (alpha * ratio));\n\t\treturn this;\n\t},\n\n\topaquer: function (ratio) {\n\t\tvar alpha = this.values.alpha;\n\t\tthis.setValues('alpha', alpha + (alpha * ratio));\n\t\treturn this;\n\t},\n\n\trotate: function (degrees) {\n\t\tvar hsl = this.values.hsl;\n\t\tvar hue = (hsl[0] + degrees) % 360;\n\t\thsl[0] = hue < 0 ? 360 + hue : hue;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\t/**\n\t * Ported from sass implementation in C\n\t * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n\t */\n\tmix: function (mixinColor, weight) {\n\t\tvar color1 = this;\n\t\tvar color2 = mixinColor;\n\t\tvar p = weight === undefined ? 0.5 : weight;\n\n\t\tvar w = 2 * p - 1;\n\t\tvar a = color1.alpha() - color2.alpha();\n\n\t\tvar w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t\tvar w2 = 1 - w1;\n\n\t\treturn this\n\t\t\t.rgb(\n\t\t\t\tw1 * color1.red() + w2 * color2.red(),\n\t\t\t\tw1 * color1.green() + w2 * color2.green(),\n\t\t\t\tw1 * color1.blue() + w2 * color2.blue()\n\t\t\t)\n\t\t\t.alpha(color1.alpha() * p + color2.alpha() * (1 - p));\n\t},\n\n\ttoJSON: function () {\n\t\treturn this.rgb();\n\t},\n\n\tclone: function () {\n\t\t// NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,\n\t\t// making the final build way to big to embed in Chart.js. So let's do it manually,\n\t\t// assuming that values to clone are 1 dimension arrays containing only numbers,\n\t\t// except 'alpha' which is a number.\n\t\tvar result = new Color();\n\t\tvar source = this.values;\n\t\tvar target = result.values;\n\t\tvar value, type;\n\n\t\tfor (var prop in source) {\n\t\t\tif (source.hasOwnProperty(prop)) {\n\t\t\t\tvalue = source[prop];\n\t\t\t\ttype = ({}).toString.call(value);\n\t\t\t\tif (type === '[object Array]') {\n\t\t\t\t\ttarget[prop] = value.slice(0);\n\t\t\t\t} else if (type === '[object Number]') {\n\t\t\t\t\ttarget[prop] = value;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('unexpected color value:', value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n\nColor.prototype.spaces = {\n\trgb: ['red', 'green', 'blue'],\n\thsl: ['hue', 'saturation', 'lightness'],\n\thsv: ['hue', 'saturation', 'value'],\n\thwb: ['hue', 'whiteness', 'blackness'],\n\tcmyk: ['cyan', 'magenta', 'yellow', 'black']\n};\n\nColor.prototype.maxes = {\n\trgb: [255, 255, 255],\n\thsl: [360, 100, 100],\n\thsv: [360, 100, 100],\n\thwb: [360, 100, 100],\n\tcmyk: [100, 100, 100, 100]\n};\n\nColor.prototype.getValues = function (space) {\n\tvar values = this.values;\n\tvar vals = {};\n\n\tfor (var i = 0; i < space.length; i++) {\n\t\tvals[space.charAt(i)] = values[space][i];\n\t}\n\n\tif (values.alpha !== 1) {\n\t\tvals.a = values.alpha;\n\t}\n\n\t// {r: 255, g: 255, b: 255, a: 0.4}\n\treturn vals;\n};\n\nColor.prototype.setValues = function (space, vals) {\n\tvar values = this.values;\n\tvar spaces = this.spaces;\n\tvar maxes = this.maxes;\n\tvar alpha = 1;\n\tvar i;\n\n\tthis.valid = true;\n\n\tif (space === 'alpha') {\n\t\talpha = vals;\n\t} else if (vals.length) {\n\t\t// [10, 10, 10]\n\t\tvalues[space] = vals.slice(0, space.length);\n\t\talpha = vals[space.length];\n\t} else if (vals[space.charAt(0)] !== undefined) {\n\t\t// {r: 10, g: 10, b: 10}\n\t\tfor (i = 0; i < space.length; i++) {\n\t\t\tvalues[space][i] = vals[space.charAt(i)];\n\t\t}\n\n\t\talpha = vals.a;\n\t} else if (vals[spaces[space][0]] !== undefined) {\n\t\t// {red: 10, green: 10, blue: 10}\n\t\tvar chans = spaces[space];\n\n\t\tfor (i = 0; i < space.length; i++) {\n\t\t\tvalues[space][i] = vals[chans[i]];\n\t\t}\n\n\t\talpha = vals.alpha;\n\t}\n\n\tvalues.alpha = Math.max(0, Math.min(1, (alpha === undefined ? values.alpha : alpha)));\n\n\tif (space === 'alpha') {\n\t\treturn false;\n\t}\n\n\tvar capped;\n\n\t// cap values of the space prior converting all values\n\tfor (i = 0; i < space.length; i++) {\n\t\tcapped = Math.max(0, Math.min(maxes[space][i], values[space][i]));\n\t\tvalues[space][i] = Math.round(capped);\n\t}\n\n\t// convert to all the other color spaces\n\tfor (var sname in spaces) {\n\t\tif (sname !== space) {\n\t\t\tvalues[sname] = colorConvert[space][sname](values[space]);\n\t\t}\n\t}\n\n\treturn true;\n};\n\nColor.prototype.setSpace = function (space, args) {\n\tvar vals = args[0];\n\n\tif (vals === undefined) {\n\t\t// color.rgb()\n\t\treturn this.getValues(space);\n\t}\n\n\t// color.rgb(10, 10, 10)\n\tif (typeof vals === 'number') {\n\t\tvals = Array.prototype.slice.call(args);\n\t}\n\n\tthis.setValues(space, vals);\n\treturn this;\n};\n\nColor.prototype.setChannel = function (space, index, val) {\n\tvar svalues = this.values[space];\n\tif (val === undefined) {\n\t\t// color.red()\n\t\treturn svalues[index];\n\t} else if (val === svalues[index]) {\n\t\t// color.red(color.red())\n\t\treturn this;\n\t}\n\n\t// color.red(100)\n\tsvalues[index] = val;\n\tthis.setValues(space, svalues);\n\n\treturn this;\n};\n\nif (typeof window !== 'undefined') {\n\twindow.Color = Color;\n}\n\nvar chartjsColor = Color;\n\n/**\n * @namespace Chart.helpers\n */\nvar helpers = {\n\t/**\n\t * An empty function that can be used, for example, for optional callback.\n\t */\n\tnoop: function() {},\n\n\t/**\n\t * Returns a unique id, sequentially generated from a global variable.\n\t * @returns {number}\n\t * @function\n\t */\n\tuid: (function() {\n\t\tvar id = 0;\n\t\treturn function() {\n\t\t\treturn id++;\n\t\t};\n\t}()),\n\n\t/**\n\t * Returns true if `value` is neither null nor undefined, else returns false.\n\t * @param {*} value - The value to test.\n\t * @returns {boolean}\n\t * @since 2.7.0\n\t */\n\tisNullOrUndef: function(value) {\n\t\treturn value === null || typeof value === 'undefined';\n\t},\n\n\t/**\n\t * Returns true if `value` is an array (including typed arrays), else returns false.\n\t * @param {*} value - The value to test.\n\t * @returns {boolean}\n\t * @function\n\t */\n\tisArray: function(value) {\n\t\tif (Array.isArray && Array.isArray(value)) {\n\t\t\treturn true;\n\t\t}\n\t\tvar type = Object.prototype.toString.call(value);\n\t\tif (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\n\t/**\n\t * Returns true if `value` is an object (excluding null), else returns false.\n\t * @param {*} value - The value to test.\n\t * @returns {boolean}\n\t * @since 2.7.0\n\t */\n\tisObject: function(value) {\n\t\treturn value !== null && Object.prototype.toString.call(value) === '[object Object]';\n\t},\n\n\t/**\n\t * Returns true if `value` is a finite number, else returns false\n\t * @param {*} value  - The value to test.\n\t * @returns {boolean}\n\t */\n\tisFinite: function(value) {\n\t\treturn (typeof value === 'number' || value instanceof Number) && isFinite(value);\n\t},\n\n\t/**\n\t * Returns `value` if defined, else returns `defaultValue`.\n\t * @param {*} value - The value to return if defined.\n\t * @param {*} defaultValue - The value to return if `value` is undefined.\n\t * @returns {*}\n\t */\n\tvalueOrDefault: function(value, defaultValue) {\n\t\treturn typeof value === 'undefined' ? defaultValue : value;\n\t},\n\n\t/**\n\t * Returns value at the given `index` in array if defined, else returns `defaultValue`.\n\t * @param {Array} value - The array to lookup for value at `index`.\n\t * @param {number} index - The index in `value` to lookup for value.\n\t * @param {*} defaultValue - The value to return if `value[index]` is undefined.\n\t * @returns {*}\n\t */\n\tvalueAtIndexOrDefault: function(value, index, defaultValue) {\n\t\treturn helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);\n\t},\n\n\t/**\n\t * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n\t * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n\t * @param {function} fn - The function to call.\n\t * @param {Array|undefined|null} args - The arguments with which `fn` should be called.\n\t * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.\n\t * @returns {*}\n\t */\n\tcallback: function(fn, args, thisArg) {\n\t\tif (fn && typeof fn.call === 'function') {\n\t\t\treturn fn.apply(thisArg, args);\n\t\t}\n\t},\n\n\t/**\n\t * Note(SB) for performance sake, this method should only be used when loopable type\n\t * is unknown or in none intensive code (not called often and small loopable). Else\n\t * it's preferable to use a regular for() loop and save extra function calls.\n\t * @param {object|Array} loopable - The object or array to be iterated.\n\t * @param {function} fn - The function to call for each item.\n\t * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.\n\t * @param {boolean} [reverse] - If true, iterates backward on the loopable.\n\t */\n\teach: function(loopable, fn, thisArg, reverse) {\n\t\tvar i, len, keys;\n\t\tif (helpers.isArray(loopable)) {\n\t\t\tlen = loopable.length;\n\t\t\tif (reverse) {\n\t\t\t\tfor (i = len - 1; i >= 0; i--) {\n\t\t\t\t\tfn.call(thisArg, loopable[i], i);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\tfn.call(thisArg, loopable[i], i);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (helpers.isObject(loopable)) {\n\t\t\tkeys = Object.keys(loopable);\n\t\t\tlen = keys.length;\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\tfn.call(thisArg, loopable[keys[i]], keys[i]);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n\t * @see https://stackoverflow.com/a/14853974\n\t * @param {Array} a0 - The array to compare\n\t * @param {Array} a1 - The array to compare\n\t * @returns {boolean}\n\t */\n\tarrayEquals: function(a0, a1) {\n\t\tvar i, ilen, v0, v1;\n\n\t\tif (!a0 || !a1 || a0.length !== a1.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (i = 0, ilen = a0.length; i < ilen; ++i) {\n\t\t\tv0 = a0[i];\n\t\t\tv1 = a1[i];\n\n\t\t\tif (v0 instanceof Array && v1 instanceof Array) {\n\t\t\t\tif (!helpers.arrayEquals(v0, v1)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (v0 !== v1) {\n\t\t\t\t// NOTE: two different object instances will never be equal: {x:20} != {x:20}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * Returns a deep copy of `source` without keeping references on objects and arrays.\n\t * @param {*} source - The value to clone.\n\t * @returns {*}\n\t */\n\tclone: function(source) {\n\t\tif (helpers.isArray(source)) {\n\t\t\treturn source.map(helpers.clone);\n\t\t}\n\n\t\tif (helpers.isObject(source)) {\n\t\t\tvar target = {};\n\t\t\tvar keys = Object.keys(source);\n\t\t\tvar klen = keys.length;\n\t\t\tvar k = 0;\n\n\t\t\tfor (; k < klen; ++k) {\n\t\t\t\ttarget[keys[k]] = helpers.clone(source[keys[k]]);\n\t\t\t}\n\n\t\t\treturn target;\n\t\t}\n\n\t\treturn source;\n\t},\n\n\t/**\n\t * The default merger when Chart.helpers.merge is called without merger option.\n\t * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n\t * @private\n\t */\n\t_merger: function(key, target, source, options) {\n\t\tvar tval = target[key];\n\t\tvar sval = source[key];\n\n\t\tif (helpers.isObject(tval) && helpers.isObject(sval)) {\n\t\t\thelpers.merge(tval, sval, options);\n\t\t} else {\n\t\t\ttarget[key] = helpers.clone(sval);\n\t\t}\n\t},\n\n\t/**\n\t * Merges source[key] in target[key] only if target[key] is undefined.\n\t * @private\n\t */\n\t_mergerIf: function(key, target, source) {\n\t\tvar tval = target[key];\n\t\tvar sval = source[key];\n\n\t\tif (helpers.isObject(tval) && helpers.isObject(sval)) {\n\t\t\thelpers.mergeIf(tval, sval);\n\t\t} else if (!target.hasOwnProperty(key)) {\n\t\t\ttarget[key] = helpers.clone(sval);\n\t\t}\n\t},\n\n\t/**\n\t * Recursively deep copies `source` properties into `target` with the given `options`.\n\t * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n\t * @param {object} target - The target object in which all sources are merged into.\n\t * @param {object|object[]} source - Object(s) to merge into `target`.\n\t * @param {object} [options] - Merging options:\n\t * @param {function} [options.merger] - The merge method (key, target, source, options)\n\t * @returns {object} The `target` object.\n\t */\n\tmerge: function(target, source, options) {\n\t\tvar sources = helpers.isArray(source) ? source : [source];\n\t\tvar ilen = sources.length;\n\t\tvar merge, i, keys, klen, k;\n\n\t\tif (!helpers.isObject(target)) {\n\t\t\treturn target;\n\t\t}\n\n\t\toptions = options || {};\n\t\tmerge = options.merger || helpers._merger;\n\n\t\tfor (i = 0; i < ilen; ++i) {\n\t\t\tsource = sources[i];\n\t\t\tif (!helpers.isObject(source)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tkeys = Object.keys(source);\n\t\t\tfor (k = 0, klen = keys.length; k < klen; ++k) {\n\t\t\t\tmerge(keys[k], target, source, options);\n\t\t\t}\n\t\t}\n\n\t\treturn target;\n\t},\n\n\t/**\n\t * Recursively deep copies `source` properties into `target` *only* if not defined in target.\n\t * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n\t * @param {object} target - The target object in which all sources are merged into.\n\t * @param {object|object[]} source - Object(s) to merge into `target`.\n\t * @returns {object} The `target` object.\n\t */\n\tmergeIf: function(target, source) {\n\t\treturn helpers.merge(target, source, {merger: helpers._mergerIf});\n\t},\n\n\t/**\n\t * Applies the contents of two or more objects together into the first object.\n\t * @param {object} target - The target object in which all objects are merged into.\n\t * @param {object} arg1 - Object containing additional properties to merge in target.\n\t * @param {object} argN - Additional objects containing properties to merge in target.\n\t * @returns {object} The `target` object.\n\t */\n\textend: function(target) {\n\t\tvar setFn = function(value, key) {\n\t\t\ttarget[key] = value;\n\t\t};\n\t\tfor (var i = 1, ilen = arguments.length; i < ilen; ++i) {\n\t\t\thelpers.each(arguments[i], setFn);\n\t\t}\n\t\treturn target;\n\t},\n\n\t/**\n\t * Basic javascript inheritance based on the model created in Backbone.js\n\t */\n\tinherits: function(extensions) {\n\t\tvar me = this;\n\t\tvar ChartElement = (extensions && extensions.hasOwnProperty('constructor')) ? extensions.constructor : function() {\n\t\t\treturn me.apply(this, arguments);\n\t\t};\n\n\t\tvar Surrogate = function() {\n\t\t\tthis.constructor = ChartElement;\n\t\t};\n\n\t\tSurrogate.prototype = me.prototype;\n\t\tChartElement.prototype = new Surrogate();\n\t\tChartElement.extend = helpers.inherits;\n\n\t\tif (extensions) {\n\t\t\thelpers.extend(ChartElement.prototype, extensions);\n\t\t}\n\n\t\tChartElement.__super__ = me.prototype;\n\t\treturn ChartElement;\n\t}\n};\n\nvar helpers_core = helpers;\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart.helpers.callback instead.\n * @function Chart.helpers.callCallback\n * @deprecated since version 2.6.0\n * @todo remove at version 3\n * @private\n */\nhelpers.callCallback = helpers.callback;\n\n/**\n * Provided for backward compatibility, use Array.prototype.indexOf instead.\n * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+\n * @function Chart.helpers.indexOf\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers.indexOf = function(array, item, fromIndex) {\n\treturn Array.prototype.indexOf.call(array, item, fromIndex);\n};\n\n/**\n * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.\n * @function Chart.helpers.getValueOrDefault\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers.getValueOrDefault = helpers.valueOrDefault;\n\n/**\n * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.\n * @function Chart.helpers.getValueAtIndexOrDefault\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;\n\n/**\n * Easing functions adapted from Robert Penner's easing equations.\n * @namespace Chart.helpers.easingEffects\n * @see http://www.robertpenner.com/easing/\n */\nvar effects = {\n\tlinear: function(t) {\n\t\treturn t;\n\t},\n\n\teaseInQuad: function(t) {\n\t\treturn t * t;\n\t},\n\n\teaseOutQuad: function(t) {\n\t\treturn -t * (t - 2);\n\t},\n\n\teaseInOutQuad: function(t) {\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * t * t;\n\t\t}\n\t\treturn -0.5 * ((--t) * (t - 2) - 1);\n\t},\n\n\teaseInCubic: function(t) {\n\t\treturn t * t * t;\n\t},\n\n\teaseOutCubic: function(t) {\n\t\treturn (t = t - 1) * t * t + 1;\n\t},\n\n\teaseInOutCubic: function(t) {\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * t * t * t;\n\t\t}\n\t\treturn 0.5 * ((t -= 2) * t * t + 2);\n\t},\n\n\teaseInQuart: function(t) {\n\t\treturn t * t * t * t;\n\t},\n\n\teaseOutQuart: function(t) {\n\t\treturn -((t = t - 1) * t * t * t - 1);\n\t},\n\n\teaseInOutQuart: function(t) {\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * t * t * t * t;\n\t\t}\n\t\treturn -0.5 * ((t -= 2) * t * t * t - 2);\n\t},\n\n\teaseInQuint: function(t) {\n\t\treturn t * t * t * t * t;\n\t},\n\n\teaseOutQuint: function(t) {\n\t\treturn (t = t - 1) * t * t * t * t + 1;\n\t},\n\n\teaseInOutQuint: function(t) {\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * t * t * t * t * t;\n\t\t}\n\t\treturn 0.5 * ((t -= 2) * t * t * t * t + 2);\n\t},\n\n\teaseInSine: function(t) {\n\t\treturn -Math.cos(t * (Math.PI / 2)) + 1;\n\t},\n\n\teaseOutSine: function(t) {\n\t\treturn Math.sin(t * (Math.PI / 2));\n\t},\n\n\teaseInOutSine: function(t) {\n\t\treturn -0.5 * (Math.cos(Math.PI * t) - 1);\n\t},\n\n\teaseInExpo: function(t) {\n\t\treturn (t === 0) ? 0 : Math.pow(2, 10 * (t - 1));\n\t},\n\n\teaseOutExpo: function(t) {\n\t\treturn (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1;\n\t},\n\n\teaseInOutExpo: function(t) {\n\t\tif (t === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (t === 1) {\n\t\t\treturn 1;\n\t\t}\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * Math.pow(2, 10 * (t - 1));\n\t\t}\n\t\treturn 0.5 * (-Math.pow(2, -10 * --t) + 2);\n\t},\n\n\teaseInCirc: function(t) {\n\t\tif (t >= 1) {\n\t\t\treturn t;\n\t\t}\n\t\treturn -(Math.sqrt(1 - t * t) - 1);\n\t},\n\n\teaseOutCirc: function(t) {\n\t\treturn Math.sqrt(1 - (t = t - 1) * t);\n\t},\n\n\teaseInOutCirc: function(t) {\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn -0.5 * (Math.sqrt(1 - t * t) - 1);\n\t\t}\n\t\treturn 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n\t},\n\n\teaseInElastic: function(t) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = 1;\n\t\tif (t === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (t === 1) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (!p) {\n\t\t\tp = 0.3;\n\t\t}\n\t\tif (a < 1) {\n\t\t\ta = 1;\n\t\t\ts = p / 4;\n\t\t} else {\n\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t}\n\t\treturn -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));\n\t},\n\n\teaseOutElastic: function(t) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = 1;\n\t\tif (t === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (t === 1) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (!p) {\n\t\t\tp = 0.3;\n\t\t}\n\t\tif (a < 1) {\n\t\t\ta = 1;\n\t\t\ts = p / 4;\n\t\t} else {\n\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t}\n\t\treturn a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;\n\t},\n\n\teaseInOutElastic: function(t) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = 1;\n\t\tif (t === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tif ((t /= 0.5) === 2) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (!p) {\n\t\t\tp = 0.45;\n\t\t}\n\t\tif (a < 1) {\n\t\t\ta = 1;\n\t\t\ts = p / 4;\n\t\t} else {\n\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t}\n\t\tif (t < 1) {\n\t\t\treturn -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));\n\t\t}\n\t\treturn a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;\n\t},\n\teaseInBack: function(t) {\n\t\tvar s = 1.70158;\n\t\treturn t * t * ((s + 1) * t - s);\n\t},\n\n\teaseOutBack: function(t) {\n\t\tvar s = 1.70158;\n\t\treturn (t = t - 1) * t * ((s + 1) * t + s) + 1;\n\t},\n\n\teaseInOutBack: function(t) {\n\t\tvar s = 1.70158;\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));\n\t\t}\n\t\treturn 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);\n\t},\n\n\teaseInBounce: function(t) {\n\t\treturn 1 - effects.easeOutBounce(1 - t);\n\t},\n\n\teaseOutBounce: function(t) {\n\t\tif (t < (1 / 2.75)) {\n\t\t\treturn 7.5625 * t * t;\n\t\t}\n\t\tif (t < (2 / 2.75)) {\n\t\t\treturn 7.5625 * (t -= (1.5 / 2.75)) * t + 0.75;\n\t\t}\n\t\tif (t < (2.5 / 2.75)) {\n\t\t\treturn 7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375;\n\t\t}\n\t\treturn 7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375;\n\t},\n\n\teaseInOutBounce: function(t) {\n\t\tif (t < 0.5) {\n\t\t\treturn effects.easeInBounce(t * 2) * 0.5;\n\t\t}\n\t\treturn effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;\n\t}\n};\n\nvar helpers_easing = {\n\teffects: effects\n};\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart.helpers.easing.effects instead.\n * @function Chart.helpers.easingEffects\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers_core.easingEffects = effects;\n\nvar PI = Math.PI;\nvar RAD_PER_DEG = PI / 180;\nvar DOUBLE_PI = PI * 2;\nvar HALF_PI = PI / 2;\nvar QUARTER_PI = PI / 4;\nvar TWO_THIRDS_PI = PI * 2 / 3;\n\n/**\n * @namespace Chart.helpers.canvas\n */\nvar exports$1 = {\n\t/**\n\t * Clears the entire canvas associated to the given `chart`.\n\t * @param {Chart} chart - The chart for which to clear the canvas.\n\t */\n\tclear: function(chart) {\n\t\tchart.ctx.clearRect(0, 0, chart.width, chart.height);\n\t},\n\n\t/**\n\t * Creates a \"path\" for a rectangle with rounded corners at position (x, y) with a\n\t * given size (width, height) and the same `radius` for all corners.\n\t * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.\n\t * @param {number} x - The x axis of the coordinate for the rectangle starting point.\n\t * @param {number} y - The y axis of the coordinate for the rectangle starting point.\n\t * @param {number} width - The rectangle's width.\n\t * @param {number} height - The rectangle's height.\n\t * @param {number} radius - The rounded amount (in pixels) for the four corners.\n\t * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?\n\t */\n\troundedRect: function(ctx, x, y, width, height, radius) {\n\t\tif (radius) {\n\t\t\tvar r = Math.min(radius, height / 2, width / 2);\n\t\t\tvar left = x + r;\n\t\t\tvar top = y + r;\n\t\t\tvar right = x + width - r;\n\t\t\tvar bottom = y + height - r;\n\n\t\t\tctx.moveTo(x, top);\n\t\t\tif (left < right && top < bottom) {\n\t\t\t\tctx.arc(left, top, r, -PI, -HALF_PI);\n\t\t\t\tctx.arc(right, top, r, -HALF_PI, 0);\n\t\t\t\tctx.arc(right, bottom, r, 0, HALF_PI);\n\t\t\t\tctx.arc(left, bottom, r, HALF_PI, PI);\n\t\t\t} else if (left < right) {\n\t\t\t\tctx.moveTo(left, y);\n\t\t\t\tctx.arc(right, top, r, -HALF_PI, HALF_PI);\n\t\t\t\tctx.arc(left, top, r, HALF_PI, PI + HALF_PI);\n\t\t\t} else if (top < bottom) {\n\t\t\t\tctx.arc(left, top, r, -PI, 0);\n\t\t\t\tctx.arc(left, bottom, r, 0, PI);\n\t\t\t} else {\n\t\t\t\tctx.arc(left, top, r, -PI, PI);\n\t\t\t}\n\t\t\tctx.closePath();\n\t\t\tctx.moveTo(x, y);\n\t\t} else {\n\t\t\tctx.rect(x, y, width, height);\n\t\t}\n\t},\n\n\tdrawPoint: function(ctx, style, radius, x, y, rotation) {\n\t\tvar type, xOffset, yOffset, size, cornerRadius;\n\t\tvar rad = (rotation || 0) * RAD_PER_DEG;\n\n\t\tif (style && typeof style === 'object') {\n\t\t\ttype = style.toString();\n\t\t\tif (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n\t\t\t\tctx.drawImage(style, x - style.width / 2, y - style.height / 2, style.width, style.height);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (isNaN(radius) || radius <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tctx.beginPath();\n\n\t\tswitch (style) {\n\t\t// Default includes circle\n\t\tdefault:\n\t\t\tctx.arc(x, y, radius, 0, DOUBLE_PI);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'triangle':\n\t\t\tctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n\t\t\trad += TWO_THIRDS_PI;\n\t\t\tctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n\t\t\trad += TWO_THIRDS_PI;\n\t\t\tctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'rectRounded':\n\t\t\t// NOTE: the rounded rect implementation changed to use `arc` instead of\n\t\t\t// `quadraticCurveTo` since it generates better results when rect is\n\t\t\t// almost a circle. 0.516 (instead of 0.5) produces results with visually\n\t\t\t// closer proportion to the previous impl and it is inscribed in the\n\t\t\t// circle with `radius`. For more details, see the following PRs:\n\t\t\t// https://github.com/chartjs/Chart.js/issues/5597\n\t\t\t// https://github.com/chartjs/Chart.js/issues/5858\n\t\t\tcornerRadius = radius * 0.516;\n\t\t\tsize = radius - cornerRadius;\n\t\t\txOffset = Math.cos(rad + QUARTER_PI) * size;\n\t\t\tyOffset = Math.sin(rad + QUARTER_PI) * size;\n\t\t\tctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n\t\t\tctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n\t\t\tctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n\t\t\tctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'rect':\n\t\t\tif (!rotation) {\n\t\t\t\tsize = Math.SQRT1_2 * radius;\n\t\t\t\tctx.rect(x - size, y - size, 2 * size, 2 * size);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\trad += QUARTER_PI;\n\t\t\t/* falls through */\n\t\tcase 'rectRot':\n\t\t\txOffset = Math.cos(rad) * radius;\n\t\t\tyOffset = Math.sin(rad) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + yOffset, y - xOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tctx.lineTo(x - yOffset, y + xOffset);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'crossRot':\n\t\t\trad += QUARTER_PI;\n\t\t\t/* falls through */\n\t\tcase 'cross':\n\t\t\txOffset = Math.cos(rad) * radius;\n\t\t\tyOffset = Math.sin(rad) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tctx.moveTo(x + yOffset, y - xOffset);\n\t\t\tctx.lineTo(x - yOffset, y + xOffset);\n\t\t\tbreak;\n\t\tcase 'star':\n\t\t\txOffset = Math.cos(rad) * radius;\n\t\t\tyOffset = Math.sin(rad) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tctx.moveTo(x + yOffset, y - xOffset);\n\t\t\tctx.lineTo(x - yOffset, y + xOffset);\n\t\t\trad += QUARTER_PI;\n\t\t\txOffset = Math.cos(rad) * radius;\n\t\t\tyOffset = Math.sin(rad) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tctx.moveTo(x + yOffset, y - xOffset);\n\t\t\tctx.lineTo(x - yOffset, y + xOffset);\n\t\t\tbreak;\n\t\tcase 'line':\n\t\t\txOffset = Math.cos(rad) * radius;\n\t\t\tyOffset = Math.sin(rad) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tbreak;\n\t\tcase 'dash':\n\t\t\tctx.moveTo(x, y);\n\t\t\tctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);\n\t\t\tbreak;\n\t\t}\n\n\t\tctx.fill();\n\t\tctx.stroke();\n\t},\n\n\t/**\n\t * Returns true if the point is inside the rectangle\n\t * @param {object} point - The point to test\n\t * @param {object} area - The rectangle\n\t * @returns {boolean}\n\t * @private\n\t */\n\t_isPointInArea: function(point, area) {\n\t\tvar epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n\n\t\treturn point.x > area.left - epsilon && point.x < area.right + epsilon &&\n\t\t\tpoint.y > area.top - epsilon && point.y < area.bottom + epsilon;\n\t},\n\n\tclipArea: function(ctx, area) {\n\t\tctx.save();\n\t\tctx.beginPath();\n\t\tctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n\t\tctx.clip();\n\t},\n\n\tunclipArea: function(ctx) {\n\t\tctx.restore();\n\t},\n\n\tlineTo: function(ctx, previous, target, flip) {\n\t\tvar stepped = target.steppedLine;\n\t\tif (stepped) {\n\t\t\tif (stepped === 'middle') {\n\t\t\t\tvar midpoint = (previous.x + target.x) / 2.0;\n\t\t\t\tctx.lineTo(midpoint, flip ? target.y : previous.y);\n\t\t\t\tctx.lineTo(midpoint, flip ? previous.y : target.y);\n\t\t\t} else if ((stepped === 'after' && !flip) || (stepped !== 'after' && flip)) {\n\t\t\t\tctx.lineTo(previous.x, target.y);\n\t\t\t} else {\n\t\t\t\tctx.lineTo(target.x, previous.y);\n\t\t\t}\n\t\t\tctx.lineTo(target.x, target.y);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!target.tension) {\n\t\t\tctx.lineTo(target.x, target.y);\n\t\t\treturn;\n\t\t}\n\n\t\tctx.bezierCurveTo(\n\t\t\tflip ? previous.controlPointPreviousX : previous.controlPointNextX,\n\t\t\tflip ? previous.controlPointPreviousY : previous.controlPointNextY,\n\t\t\tflip ? target.controlPointNextX : target.controlPointPreviousX,\n\t\t\tflip ? target.controlPointNextY : target.controlPointPreviousY,\n\t\t\ttarget.x,\n\t\t\ttarget.y);\n\t}\n};\n\nvar helpers_canvas = exports$1;\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.\n * @namespace Chart.helpers.clear\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers_core.clear = exports$1.clear;\n\n/**\n * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.\n * @namespace Chart.helpers.drawRoundedRectangle\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers_core.drawRoundedRectangle = function(ctx) {\n\tctx.beginPath();\n\texports$1.roundedRect.apply(exports$1, arguments);\n};\n\nvar defaults = {\n\t/**\n\t * @private\n\t */\n\t_set: function(scope, values) {\n\t\treturn helpers_core.merge(this[scope] || (this[scope] = {}), values);\n\t}\n};\n\ndefaults._set('global', {\n\tdefaultColor: 'rgba(0,0,0,0.1)',\n\tdefaultFontColor: '#666',\n\tdefaultFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\tdefaultFontSize: 12,\n\tdefaultFontStyle: 'normal',\n\tdefaultLineHeight: 1.2,\n\tshowLines: true\n});\n\nvar core_defaults = defaults;\n\nvar valueOrDefault = helpers_core.valueOrDefault;\n\n/**\n * Converts the given font object into a CSS font string.\n * @param {object} font - A font object.\n * @return {string} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @private\n */\nfunction toFontString(font) {\n\tif (!font || helpers_core.isNullOrUndef(font.size) || helpers_core.isNullOrUndef(font.family)) {\n\t\treturn null;\n\t}\n\n\treturn (font.style ? font.style + ' ' : '')\n\t\t+ (font.weight ? font.weight + ' ' : '')\n\t\t+ font.size + 'px '\n\t\t+ font.family;\n}\n\n/**\n * @alias Chart.helpers.options\n * @namespace\n */\nvar helpers_options = {\n\t/**\n\t * Converts the given line height `value` in pixels for a specific font `size`.\n\t * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n\t * @param {number} size - The font size (in pixels) used to resolve relative `value`.\n\t * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).\n\t * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n\t * @since 2.7.0\n\t */\n\ttoLineHeight: function(value, size) {\n\t\tvar matches = ('' + value).match(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/);\n\t\tif (!matches || matches[1] === 'normal') {\n\t\t\treturn size * 1.2;\n\t\t}\n\n\t\tvalue = +matches[2];\n\n\t\tswitch (matches[3]) {\n\t\tcase 'px':\n\t\t\treturn value;\n\t\tcase '%':\n\t\t\tvalue /= 100;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\n\t\treturn size * value;\n\t},\n\n\t/**\n\t * Converts the given value into a padding object with pre-computed width/height.\n\t * @param {number|object} value - If a number, set the value to all TRBL component,\n\t *  else, if and object, use defined properties and sets undefined ones to 0.\n\t * @returns {object} The padding values (top, right, bottom, left, width, height)\n\t * @since 2.7.0\n\t */\n\ttoPadding: function(value) {\n\t\tvar t, r, b, l;\n\n\t\tif (helpers_core.isObject(value)) {\n\t\t\tt = +value.top || 0;\n\t\t\tr = +value.right || 0;\n\t\t\tb = +value.bottom || 0;\n\t\t\tl = +value.left || 0;\n\t\t} else {\n\t\t\tt = r = b = l = +value || 0;\n\t\t}\n\n\t\treturn {\n\t\t\ttop: t,\n\t\t\tright: r,\n\t\t\tbottom: b,\n\t\t\tleft: l,\n\t\t\theight: t + b,\n\t\t\twidth: l + r\n\t\t};\n\t},\n\n\t/**\n\t * Parses font options and returns the font object.\n\t * @param {object} options - A object that contains font options to be parsed.\n\t * @return {object} The font object.\n\t * @todo Support font.* options and renamed to toFont().\n\t * @private\n\t */\n\t_parseFont: function(options) {\n\t\tvar globalDefaults = core_defaults.global;\n\t\tvar size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);\n\t\tvar font = {\n\t\t\tfamily: valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily),\n\t\t\tlineHeight: helpers_core.options.toLineHeight(valueOrDefault(options.lineHeight, globalDefaults.defaultLineHeight), size),\n\t\t\tsize: size,\n\t\t\tstyle: valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle),\n\t\t\tweight: null,\n\t\t\tstring: ''\n\t\t};\n\n\t\tfont.string = toFontString(font);\n\t\treturn font;\n\t},\n\n\t/**\n\t * Evaluates the given `inputs` sequentially and returns the first defined value.\n\t * @param {Array} inputs - An array of values, falling back to the last value.\n\t * @param {object} [context] - If defined and the current value is a function, the value\n\t * is called with `context` as first argument and the result becomes the new input.\n\t * @param {number} [index] - If defined and the current value is an array, the value\n\t * at `index` become the new input.\n\t * @since 2.7.0\n\t */\n\tresolve: function(inputs, context, index) {\n\t\tvar i, ilen, value;\n\n\t\tfor (i = 0, ilen = inputs.length; i < ilen; ++i) {\n\t\t\tvalue = inputs[i];\n\t\t\tif (value === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (context !== undefined && typeof value === 'function') {\n\t\t\t\tvalue = value(context);\n\t\t\t}\n\t\t\tif (index !== undefined && helpers_core.isArray(value)) {\n\t\t\t\tvalue = value[index];\n\t\t\t}\n\t\t\tif (value !== undefined) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t}\n};\n\nvar helpers$1 = helpers_core;\nvar easing = helpers_easing;\nvar canvas = helpers_canvas;\nvar options = helpers_options;\nhelpers$1.easing = easing;\nhelpers$1.canvas = canvas;\nhelpers$1.options = options;\n\nfunction interpolate(start, view, model, ease) {\n\tvar keys = Object.keys(model);\n\tvar i, ilen, key, actual, origin, target, type, c0, c1;\n\n\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\tkey = keys[i];\n\n\t\ttarget = model[key];\n\n\t\t// if a value is added to the model after pivot() has been called, the view\n\t\t// doesn't contain it, so let's initialize the view to the target value.\n\t\tif (!view.hasOwnProperty(key)) {\n\t\t\tview[key] = target;\n\t\t}\n\n\t\tactual = view[key];\n\n\t\tif (actual === target || key[0] === '_') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!start.hasOwnProperty(key)) {\n\t\t\tstart[key] = actual;\n\t\t}\n\n\t\torigin = start[key];\n\n\t\ttype = typeof target;\n\n\t\tif (type === typeof origin) {\n\t\t\tif (type === 'string') {\n\t\t\t\tc0 = chartjsColor(origin);\n\t\t\t\tif (c0.valid) {\n\t\t\t\t\tc1 = chartjsColor(target);\n\t\t\t\t\tif (c1.valid) {\n\t\t\t\t\t\tview[key] = c1.mix(c0, ease).rgbString();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (helpers$1.isFinite(origin) && helpers$1.isFinite(target)) {\n\t\t\t\tview[key] = origin + (target - origin) * ease;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tview[key] = target;\n\t}\n}\n\nvar Element = function(configuration) {\n\thelpers$1.extend(this, configuration);\n\tthis.initialize.apply(this, arguments);\n};\n\nhelpers$1.extend(Element.prototype, {\n\n\tinitialize: function() {\n\t\tthis.hidden = false;\n\t},\n\n\tpivot: function() {\n\t\tvar me = this;\n\t\tif (!me._view) {\n\t\t\tme._view = helpers$1.clone(me._model);\n\t\t}\n\t\tme._start = {};\n\t\treturn me;\n\t},\n\n\ttransition: function(ease) {\n\t\tvar me = this;\n\t\tvar model = me._model;\n\t\tvar start = me._start;\n\t\tvar view = me._view;\n\n\t\t// No animation -> No Transition\n\t\tif (!model || ease === 1) {\n\t\t\tme._view = model;\n\t\t\tme._start = null;\n\t\t\treturn me;\n\t\t}\n\n\t\tif (!view) {\n\t\t\tview = me._view = {};\n\t\t}\n\n\t\tif (!start) {\n\t\t\tstart = me._start = {};\n\t\t}\n\n\t\tinterpolate(start, view, model, ease);\n\n\t\treturn me;\n\t},\n\n\ttooltipPosition: function() {\n\t\treturn {\n\t\t\tx: this._model.x,\n\t\t\ty: this._model.y\n\t\t};\n\t},\n\n\thasValue: function() {\n\t\treturn helpers$1.isNumber(this._model.x) && helpers$1.isNumber(this._model.y);\n\t}\n});\n\nElement.extend = helpers$1.inherits;\n\nvar core_element = Element;\n\nvar exports$2 = core_element.extend({\n\tchart: null, // the animation associated chart instance\n\tcurrentStep: 0, // the current animation step\n\tnumSteps: 60, // default number of steps\n\teasing: '', // the easing to use for this animation\n\trender: null, // render function used by the animation service\n\n\tonAnimationProgress: null, // user specified callback to fire on each step of the animation\n\tonAnimationComplete: null, // user specified callback to fire when the animation finishes\n});\n\nvar core_animation = exports$2;\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart.Animation instead\n * @prop Chart.Animation#animationObject\n * @deprecated since version 2.6.0\n * @todo remove at version 3\n */\nObject.defineProperty(exports$2.prototype, 'animationObject', {\n\tget: function() {\n\t\treturn this;\n\t}\n});\n\n/**\n * Provided for backward compatibility, use Chart.Animation#chart instead\n * @prop Chart.Animation#chartInstance\n * @deprecated since version 2.6.0\n * @todo remove at version 3\n */\nObject.defineProperty(exports$2.prototype, 'chartInstance', {\n\tget: function() {\n\t\treturn this.chart;\n\t},\n\tset: function(value) {\n\t\tthis.chart = value;\n\t}\n});\n\ncore_defaults._set('global', {\n\tanimation: {\n\t\tduration: 1000,\n\t\teasing: 'easeOutQuart',\n\t\tonProgress: helpers$1.noop,\n\t\tonComplete: helpers$1.noop\n\t}\n});\n\nvar core_animations = {\n\tanimations: [],\n\trequest: null,\n\n\t/**\n\t * @param {Chart} chart - The chart to animate.\n\t * @param {Chart.Animation} animation - The animation that we will animate.\n\t * @param {number} duration - The animation duration in ms.\n\t * @param {boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions\n\t */\n\taddAnimation: function(chart, animation, duration, lazy) {\n\t\tvar animations = this.animations;\n\t\tvar i, ilen;\n\n\t\tanimation.chart = chart;\n\t\tanimation.startTime = Date.now();\n\t\tanimation.duration = duration;\n\n\t\tif (!lazy) {\n\t\t\tchart.animating = true;\n\t\t}\n\n\t\tfor (i = 0, ilen = animations.length; i < ilen; ++i) {\n\t\t\tif (animations[i].chart === chart) {\n\t\t\t\tanimations[i] = animation;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tanimations.push(animation);\n\n\t\t// If there are no animations queued, manually kickstart a digest, for lack of a better word\n\t\tif (animations.length === 1) {\n\t\t\tthis.requestAnimationFrame();\n\t\t}\n\t},\n\n\tcancelAnimation: function(chart) {\n\t\tvar index = helpers$1.findIndex(this.animations, function(animation) {\n\t\t\treturn animation.chart === chart;\n\t\t});\n\n\t\tif (index !== -1) {\n\t\t\tthis.animations.splice(index, 1);\n\t\t\tchart.animating = false;\n\t\t}\n\t},\n\n\trequestAnimationFrame: function() {\n\t\tvar me = this;\n\t\tif (me.request === null) {\n\t\t\t// Skip animation frame requests until the active one is executed.\n\t\t\t// This can happen when processing mouse events, e.g. 'mousemove'\n\t\t\t// and 'mouseout' events will trigger multiple renders.\n\t\t\tme.request = helpers$1.requestAnimFrame.call(window, function() {\n\t\t\t\tme.request = null;\n\t\t\t\tme.startDigest();\n\t\t\t});\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\tstartDigest: function() {\n\t\tvar me = this;\n\n\t\tme.advance();\n\n\t\t// Do we have more stuff to animate?\n\t\tif (me.animations.length > 0) {\n\t\t\tme.requestAnimationFrame();\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\tadvance: function() {\n\t\tvar animations = this.animations;\n\t\tvar animation, chart, numSteps, nextStep;\n\t\tvar i = 0;\n\n\t\t// 1 animation per chart, so we are looping charts here\n\t\twhile (i < animations.length) {\n\t\t\tanimation = animations[i];\n\t\t\tchart = animation.chart;\n\t\t\tnumSteps = animation.numSteps;\n\n\t\t\t// Make sure that currentStep starts at 1\n\t\t\t// https://github.com/chartjs/Chart.js/issues/6104\n\t\t\tnextStep = Math.floor((Date.now() - animation.startTime) / animation.duration * numSteps) + 1;\n\t\t\tanimation.currentStep = Math.min(nextStep, numSteps);\n\n\t\t\thelpers$1.callback(animation.render, [chart, animation], chart);\n\t\t\thelpers$1.callback(animation.onAnimationProgress, [animation], chart);\n\n\t\t\tif (animation.currentStep >= numSteps) {\n\t\t\t\thelpers$1.callback(animation.onAnimationComplete, [animation], chart);\n\t\t\t\tchart.animating = false;\n\t\t\t\tanimations.splice(i, 1);\n\t\t\t} else {\n\t\t\t\t++i;\n\t\t\t}\n\t\t}\n\t}\n};\n\nvar resolve = helpers$1.options.resolve;\n\nvar arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];\n\n/**\n * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',\n * 'unshift') and notify the listener AFTER the array has been altered. Listeners are\n * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.\n */\nfunction listenArrayEvents(array, listener) {\n\tif (array._chartjs) {\n\t\tarray._chartjs.listeners.push(listener);\n\t\treturn;\n\t}\n\n\tObject.defineProperty(array, '_chartjs', {\n\t\tconfigurable: true,\n\t\tenumerable: false,\n\t\tvalue: {\n\t\t\tlisteners: [listener]\n\t\t}\n\t});\n\n\tarrayEvents.forEach(function(key) {\n\t\tvar method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);\n\t\tvar base = array[key];\n\n\t\tObject.defineProperty(array, key, {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: false,\n\t\t\tvalue: function() {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\t\tvar res = base.apply(this, args);\n\n\t\t\t\thelpers$1.each(array._chartjs.listeners, function(object) {\n\t\t\t\t\tif (typeof object[method] === 'function') {\n\t\t\t\t\t\tobject[method].apply(object, args);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn res;\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Removes the given array event listener and cleanup extra attached properties (such as\n * the _chartjs stub and overridden methods) if array doesn't have any more listeners.\n */\nfunction unlistenArrayEvents(array, listener) {\n\tvar stub = array._chartjs;\n\tif (!stub) {\n\t\treturn;\n\t}\n\n\tvar listeners = stub.listeners;\n\tvar index = listeners.indexOf(listener);\n\tif (index !== -1) {\n\t\tlisteners.splice(index, 1);\n\t}\n\n\tif (listeners.length > 0) {\n\t\treturn;\n\t}\n\n\tarrayEvents.forEach(function(key) {\n\t\tdelete array[key];\n\t});\n\n\tdelete array._chartjs;\n}\n\n// Base class for all dataset controllers (line, bar, etc)\nvar DatasetController = function(chart, datasetIndex) {\n\tthis.initialize(chart, datasetIndex);\n};\n\nhelpers$1.extend(DatasetController.prototype, {\n\n\t/**\n\t * Element type used to generate a meta dataset (e.g. Chart.element.Line).\n\t * @type {Chart.core.element}\n\t */\n\tdatasetElementType: null,\n\n\t/**\n\t * Element type used to generate a meta data (e.g. Chart.element.Point).\n\t * @type {Chart.core.element}\n\t */\n\tdataElementType: null,\n\n\tinitialize: function(chart, datasetIndex) {\n\t\tvar me = this;\n\t\tme.chart = chart;\n\t\tme.index = datasetIndex;\n\t\tme.linkScales();\n\t\tme.addElements();\n\t},\n\n\tupdateIndex: function(datasetIndex) {\n\t\tthis.index = datasetIndex;\n\t},\n\n\tlinkScales: function() {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar dataset = me.getDataset();\n\n\t\tif (meta.xAxisID === null || !(meta.xAxisID in me.chart.scales)) {\n\t\t\tmeta.xAxisID = dataset.xAxisID || me.chart.options.scales.xAxes[0].id;\n\t\t}\n\t\tif (meta.yAxisID === null || !(meta.yAxisID in me.chart.scales)) {\n\t\t\tmeta.yAxisID = dataset.yAxisID || me.chart.options.scales.yAxes[0].id;\n\t\t}\n\t},\n\n\tgetDataset: function() {\n\t\treturn this.chart.data.datasets[this.index];\n\t},\n\n\tgetMeta: function() {\n\t\treturn this.chart.getDatasetMeta(this.index);\n\t},\n\n\tgetScaleForId: function(scaleID) {\n\t\treturn this.chart.scales[scaleID];\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getValueScaleId: function() {\n\t\treturn this.getMeta().yAxisID;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getIndexScaleId: function() {\n\t\treturn this.getMeta().xAxisID;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getValueScale: function() {\n\t\treturn this.getScaleForId(this._getValueScaleId());\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getIndexScale: function() {\n\t\treturn this.getScaleForId(this._getIndexScaleId());\n\t},\n\n\treset: function() {\n\t\tthis.update(true);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tdestroy: function() {\n\t\tif (this._data) {\n\t\t\tunlistenArrayEvents(this._data, this);\n\t\t}\n\t},\n\n\tcreateMetaDataset: function() {\n\t\tvar me = this;\n\t\tvar type = me.datasetElementType;\n\t\treturn type && new type({\n\t\t\t_chart: me.chart,\n\t\t\t_datasetIndex: me.index\n\t\t});\n\t},\n\n\tcreateMetaData: function(index) {\n\t\tvar me = this;\n\t\tvar type = me.dataElementType;\n\t\treturn type && new type({\n\t\t\t_chart: me.chart,\n\t\t\t_datasetIndex: me.index,\n\t\t\t_index: index\n\t\t});\n\t},\n\n\taddElements: function() {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar data = me.getDataset().data || [];\n\t\tvar metaData = meta.data;\n\t\tvar i, ilen;\n\n\t\tfor (i = 0, ilen = data.length; i < ilen; ++i) {\n\t\t\tmetaData[i] = metaData[i] || me.createMetaData(i);\n\t\t}\n\n\t\tmeta.dataset = meta.dataset || me.createMetaDataset();\n\t},\n\n\taddElementAndReset: function(index) {\n\t\tvar element = this.createMetaData(index);\n\t\tthis.getMeta().data.splice(index, 0, element);\n\t\tthis.updateElement(element, index, true);\n\t},\n\n\tbuildOrUpdateElements: function() {\n\t\tvar me = this;\n\t\tvar dataset = me.getDataset();\n\t\tvar data = dataset.data || (dataset.data = []);\n\n\t\t// In order to correctly handle data addition/deletion animation (an thus simulate\n\t\t// real-time charts), we need to monitor these data modifications and synchronize\n\t\t// the internal meta data accordingly.\n\t\tif (me._data !== data) {\n\t\t\tif (me._data) {\n\t\t\t\t// This case happens when the user replaced the data array instance.\n\t\t\t\tunlistenArrayEvents(me._data, me);\n\t\t\t}\n\n\t\t\tif (data && Object.isExtensible(data)) {\n\t\t\t\tlistenArrayEvents(data, me);\n\t\t\t}\n\t\t\tme._data = data;\n\t\t}\n\n\t\t// Re-sync meta data in case the user replaced the data array or if we missed\n\t\t// any updates and so make sure that we handle number of datapoints changing.\n\t\tme.resyncElements();\n\t},\n\n\tupdate: helpers$1.noop,\n\n\ttransition: function(easingValue) {\n\t\tvar meta = this.getMeta();\n\t\tvar elements = meta.data || [];\n\t\tvar ilen = elements.length;\n\t\tvar i = 0;\n\n\t\tfor (; i < ilen; ++i) {\n\t\t\telements[i].transition(easingValue);\n\t\t}\n\n\t\tif (meta.dataset) {\n\t\t\tmeta.dataset.transition(easingValue);\n\t\t}\n\t},\n\n\tdraw: function() {\n\t\tvar meta = this.getMeta();\n\t\tvar elements = meta.data || [];\n\t\tvar ilen = elements.length;\n\t\tvar i = 0;\n\n\t\tif (meta.dataset) {\n\t\t\tmeta.dataset.draw();\n\t\t}\n\n\t\tfor (; i < ilen; ++i) {\n\t\t\telements[i].draw();\n\t\t}\n\t},\n\n\tremoveHoverStyle: function(element) {\n\t\thelpers$1.merge(element._model, element.$previousStyle || {});\n\t\tdelete element.$previousStyle;\n\t},\n\n\tsetHoverStyle: function(element) {\n\t\tvar dataset = this.chart.data.datasets[element._datasetIndex];\n\t\tvar index = element._index;\n\t\tvar custom = element.custom || {};\n\t\tvar model = element._model;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\n\t\telement.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth\n\t\t};\n\n\t\tmodel.backgroundColor = resolve([custom.hoverBackgroundColor, dataset.hoverBackgroundColor, getHoverColor(model.backgroundColor)], undefined, index);\n\t\tmodel.borderColor = resolve([custom.hoverBorderColor, dataset.hoverBorderColor, getHoverColor(model.borderColor)], undefined, index);\n\t\tmodel.borderWidth = resolve([custom.hoverBorderWidth, dataset.hoverBorderWidth, model.borderWidth], undefined, index);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tresyncElements: function() {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar data = me.getDataset().data;\n\t\tvar numMeta = meta.data.length;\n\t\tvar numData = data.length;\n\n\t\tif (numData < numMeta) {\n\t\t\tmeta.data.splice(numData, numMeta - numData);\n\t\t} else if (numData > numMeta) {\n\t\t\tme.insertElements(numMeta, numData - numMeta);\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\tinsertElements: function(start, count) {\n\t\tfor (var i = 0; i < count; ++i) {\n\t\t\tthis.addElementAndReset(start + i);\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\tonDataPush: function() {\n\t\tvar count = arguments.length;\n\t\tthis.insertElements(this.getDataset().data.length - count, count);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tonDataPop: function() {\n\t\tthis.getMeta().data.pop();\n\t},\n\n\t/**\n\t * @private\n\t */\n\tonDataShift: function() {\n\t\tthis.getMeta().data.shift();\n\t},\n\n\t/**\n\t * @private\n\t */\n\tonDataSplice: function(start, count) {\n\t\tthis.getMeta().data.splice(start, count);\n\t\tthis.insertElements(start, arguments.length - 2);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tonDataUnshift: function() {\n\t\tthis.insertElements(0, arguments.length);\n\t}\n});\n\nDatasetController.extend = helpers$1.inherits;\n\nvar core_datasetController = DatasetController;\n\ncore_defaults._set('global', {\n\telements: {\n\t\tarc: {\n\t\t\tbackgroundColor: core_defaults.global.defaultColor,\n\t\t\tborderColor: '#fff',\n\t\t\tborderWidth: 2,\n\t\t\tborderAlign: 'center'\n\t\t}\n\t}\n});\n\nvar element_arc = core_element.extend({\n\tinLabelRange: function(mouseX) {\n\t\tvar vm = this._view;\n\n\t\tif (vm) {\n\t\t\treturn (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2));\n\t\t}\n\t\treturn false;\n\t},\n\n\tinRange: function(chartX, chartY) {\n\t\tvar vm = this._view;\n\n\t\tif (vm) {\n\t\t\tvar pointRelativePosition = helpers$1.getAngleFromPoint(vm, {x: chartX, y: chartY});\n\t\t\tvar\tangle = pointRelativePosition.angle;\n\t\t\tvar distance = pointRelativePosition.distance;\n\n\t\t\t// Sanitise angle range\n\t\t\tvar startAngle = vm.startAngle;\n\t\t\tvar endAngle = vm.endAngle;\n\t\t\twhile (endAngle < startAngle) {\n\t\t\t\tendAngle += 2.0 * Math.PI;\n\t\t\t}\n\t\t\twhile (angle > endAngle) {\n\t\t\t\tangle -= 2.0 * Math.PI;\n\t\t\t}\n\t\t\twhile (angle < startAngle) {\n\t\t\t\tangle += 2.0 * Math.PI;\n\t\t\t}\n\n\t\t\t// Check if within the range of the open/close angle\n\t\t\tvar betweenAngles = (angle >= startAngle && angle <= endAngle);\n\t\t\tvar withinRadius = (distance >= vm.innerRadius && distance <= vm.outerRadius);\n\n\t\t\treturn (betweenAngles && withinRadius);\n\t\t}\n\t\treturn false;\n\t},\n\n\tgetCenterPoint: function() {\n\t\tvar vm = this._view;\n\t\tvar halfAngle = (vm.startAngle + vm.endAngle) / 2;\n\t\tvar halfRadius = (vm.innerRadius + vm.outerRadius) / 2;\n\t\treturn {\n\t\t\tx: vm.x + Math.cos(halfAngle) * halfRadius,\n\t\t\ty: vm.y + Math.sin(halfAngle) * halfRadius\n\t\t};\n\t},\n\n\tgetArea: function() {\n\t\tvar vm = this._view;\n\t\treturn Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));\n\t},\n\n\ttooltipPosition: function() {\n\t\tvar vm = this._view;\n\t\tvar centreAngle = vm.startAngle + ((vm.endAngle - vm.startAngle) / 2);\n\t\tvar rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;\n\n\t\treturn {\n\t\t\tx: vm.x + (Math.cos(centreAngle) * rangeFromCentre),\n\t\t\ty: vm.y + (Math.sin(centreAngle) * rangeFromCentre)\n\t\t};\n\t},\n\n\tdraw: function() {\n\t\tvar ctx = this._chart.ctx;\n\t\tvar vm = this._view;\n\t\tvar sA = vm.startAngle;\n\t\tvar eA = vm.endAngle;\n\t\tvar pixelMargin = (vm.borderAlign === 'inner') ? 0.33 : 0;\n\t\tvar angleMargin;\n\n\t\tctx.save();\n\n\t\tctx.beginPath();\n\t\tctx.arc(vm.x, vm.y, Math.max(vm.outerRadius - pixelMargin, 0), sA, eA);\n\t\tctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);\n\t\tctx.closePath();\n\n\t\tctx.fillStyle = vm.backgroundColor;\n\t\tctx.fill();\n\n\t\tif (vm.borderWidth) {\n\t\t\tif (vm.borderAlign === 'inner') {\n\t\t\t\t// Draw an inner border by cliping the arc and drawing a double-width border\n\t\t\t\t// Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n\t\t\t\tctx.beginPath();\n\t\t\t\tangleMargin = pixelMargin / vm.outerRadius;\n\t\t\t\tctx.arc(vm.x, vm.y, vm.outerRadius, sA - angleMargin, eA + angleMargin);\n\t\t\t\tif (vm.innerRadius > pixelMargin) {\n\t\t\t\t\tangleMargin = pixelMargin / vm.innerRadius;\n\t\t\t\t\tctx.arc(vm.x, vm.y, vm.innerRadius - pixelMargin, eA + angleMargin, sA - angleMargin, true);\n\t\t\t\t} else {\n\t\t\t\t\tctx.arc(vm.x, vm.y, pixelMargin, eA + Math.PI / 2, sA - Math.PI / 2);\n\t\t\t\t}\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.clip();\n\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);\n\t\t\t\tctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);\n\t\t\t\tctx.closePath();\n\n\t\t\t\tctx.lineWidth = vm.borderWidth * 2;\n\t\t\t\tctx.lineJoin = 'round';\n\t\t\t} else {\n\t\t\t\tctx.lineWidth = vm.borderWidth;\n\t\t\t\tctx.lineJoin = 'bevel';\n\t\t\t}\n\n\t\t\tctx.strokeStyle = vm.borderColor;\n\t\t\tctx.stroke();\n\t\t}\n\n\t\tctx.restore();\n\t}\n});\n\nvar valueOrDefault$1 = helpers$1.valueOrDefault;\n\nvar defaultColor = core_defaults.global.defaultColor;\n\ncore_defaults._set('global', {\n\telements: {\n\t\tline: {\n\t\t\ttension: 0.4,\n\t\t\tbackgroundColor: defaultColor,\n\t\t\tborderWidth: 3,\n\t\t\tborderColor: defaultColor,\n\t\t\tborderCapStyle: 'butt',\n\t\t\tborderDash: [],\n\t\t\tborderDashOffset: 0.0,\n\t\t\tborderJoinStyle: 'miter',\n\t\t\tcapBezierPoints: true,\n\t\t\tfill: true, // do we fill in the area between the line and its base axis\n\t\t}\n\t}\n});\n\nvar element_line = core_element.extend({\n\tdraw: function() {\n\t\tvar me = this;\n\t\tvar vm = me._view;\n\t\tvar ctx = me._chart.ctx;\n\t\tvar spanGaps = vm.spanGaps;\n\t\tvar points = me._children.slice(); // clone array\n\t\tvar globalDefaults = core_defaults.global;\n\t\tvar globalOptionLineElements = globalDefaults.elements.line;\n\t\tvar lastDrawnIndex = -1;\n\t\tvar index, current, previous, currentVM;\n\n\t\t// If we are looping, adding the first point again\n\t\tif (me._loop && points.length) {\n\t\t\tpoints.push(points[0]);\n\t\t}\n\n\t\tctx.save();\n\n\t\t// Stroke Line Options\n\t\tctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;\n\n\t\t// IE 9 and 10 do not support line dash\n\t\tif (ctx.setLineDash) {\n\t\t\tctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);\n\t\t}\n\n\t\tctx.lineDashOffset = valueOrDefault$1(vm.borderDashOffset, globalOptionLineElements.borderDashOffset);\n\t\tctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;\n\t\tctx.lineWidth = valueOrDefault$1(vm.borderWidth, globalOptionLineElements.borderWidth);\n\t\tctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;\n\n\t\t// Stroke Line\n\t\tctx.beginPath();\n\t\tlastDrawnIndex = -1;\n\n\t\tfor (index = 0; index < points.length; ++index) {\n\t\t\tcurrent = points[index];\n\t\t\tprevious = helpers$1.previousItem(points, index);\n\t\t\tcurrentVM = current._view;\n\n\t\t\t// First point moves to it's starting position no matter what\n\t\t\tif (index === 0) {\n\t\t\t\tif (!currentVM.skip) {\n\t\t\t\t\tctx.moveTo(currentVM.x, currentVM.y);\n\t\t\t\t\tlastDrawnIndex = index;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tprevious = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];\n\n\t\t\t\tif (!currentVM.skip) {\n\t\t\t\t\tif ((lastDrawnIndex !== (index - 1) && !spanGaps) || lastDrawnIndex === -1) {\n\t\t\t\t\t\t// There was a gap and this is the first point after the gap\n\t\t\t\t\t\tctx.moveTo(currentVM.x, currentVM.y);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Line to next point\n\t\t\t\t\t\thelpers$1.canvas.lineTo(ctx, previous._view, current._view);\n\t\t\t\t\t}\n\t\t\t\t\tlastDrawnIndex = index;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tctx.stroke();\n\t\tctx.restore();\n\t}\n});\n\nvar valueOrDefault$2 = helpers$1.valueOrDefault;\n\nvar defaultColor$1 = core_defaults.global.defaultColor;\n\ncore_defaults._set('global', {\n\telements: {\n\t\tpoint: {\n\t\t\tradius: 3,\n\t\t\tpointStyle: 'circle',\n\t\t\tbackgroundColor: defaultColor$1,\n\t\t\tborderColor: defaultColor$1,\n\t\t\tborderWidth: 1,\n\t\t\t// Hover\n\t\t\thitRadius: 1,\n\t\t\thoverRadius: 4,\n\t\t\thoverBorderWidth: 1\n\t\t}\n\t}\n});\n\nfunction xRange(mouseX) {\n\tvar vm = this._view;\n\treturn vm ? (Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius) : false;\n}\n\nfunction yRange(mouseY) {\n\tvar vm = this._view;\n\treturn vm ? (Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius) : false;\n}\n\nvar element_point = core_element.extend({\n\tinRange: function(mouseX, mouseY) {\n\t\tvar vm = this._view;\n\t\treturn vm ? ((Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2)) < Math.pow(vm.hitRadius + vm.radius, 2)) : false;\n\t},\n\n\tinLabelRange: xRange,\n\tinXRange: xRange,\n\tinYRange: yRange,\n\n\tgetCenterPoint: function() {\n\t\tvar vm = this._view;\n\t\treturn {\n\t\t\tx: vm.x,\n\t\t\ty: vm.y\n\t\t};\n\t},\n\n\tgetArea: function() {\n\t\treturn Math.PI * Math.pow(this._view.radius, 2);\n\t},\n\n\ttooltipPosition: function() {\n\t\tvar vm = this._view;\n\t\treturn {\n\t\t\tx: vm.x,\n\t\t\ty: vm.y,\n\t\t\tpadding: vm.radius + vm.borderWidth\n\t\t};\n\t},\n\n\tdraw: function(chartArea) {\n\t\tvar vm = this._view;\n\t\tvar ctx = this._chart.ctx;\n\t\tvar pointStyle = vm.pointStyle;\n\t\tvar rotation = vm.rotation;\n\t\tvar radius = vm.radius;\n\t\tvar x = vm.x;\n\t\tvar y = vm.y;\n\t\tvar globalDefaults = core_defaults.global;\n\t\tvar defaultColor = globalDefaults.defaultColor; // eslint-disable-line no-shadow\n\n\t\tif (vm.skip) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Clipping for Points.\n\t\tif (chartArea === undefined || helpers$1.canvas._isPointInArea(vm, chartArea)) {\n\t\t\tctx.strokeStyle = vm.borderColor || defaultColor;\n\t\t\tctx.lineWidth = valueOrDefault$2(vm.borderWidth, globalDefaults.elements.point.borderWidth);\n\t\t\tctx.fillStyle = vm.backgroundColor || defaultColor;\n\t\t\thelpers$1.canvas.drawPoint(ctx, pointStyle, radius, x, y, rotation);\n\t\t}\n\t}\n});\n\nvar defaultColor$2 = core_defaults.global.defaultColor;\n\ncore_defaults._set('global', {\n\telements: {\n\t\trectangle: {\n\t\t\tbackgroundColor: defaultColor$2,\n\t\t\tborderColor: defaultColor$2,\n\t\t\tborderSkipped: 'bottom',\n\t\t\tborderWidth: 0\n\t\t}\n\t}\n});\n\nfunction isVertical(vm) {\n\treturn vm && vm.width !== undefined;\n}\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param bar {Chart.Element.Rectangle} the bar\n * @return {Bounds} bounds of the bar\n * @private\n */\nfunction getBarBounds(vm) {\n\tvar x1, x2, y1, y2, half;\n\n\tif (isVertical(vm)) {\n\t\thalf = vm.width / 2;\n\t\tx1 = vm.x - half;\n\t\tx2 = vm.x + half;\n\t\ty1 = Math.min(vm.y, vm.base);\n\t\ty2 = Math.max(vm.y, vm.base);\n\t} else {\n\t\thalf = vm.height / 2;\n\t\tx1 = Math.min(vm.x, vm.base);\n\t\tx2 = Math.max(vm.x, vm.base);\n\t\ty1 = vm.y - half;\n\t\ty2 = vm.y + half;\n\t}\n\n\treturn {\n\t\tleft: x1,\n\t\ttop: y1,\n\t\tright: x2,\n\t\tbottom: y2\n\t};\n}\n\nfunction swap(orig, v1, v2) {\n\treturn orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction parseBorderSkipped(vm) {\n\tvar edge = vm.borderSkipped;\n\tvar res = {};\n\n\tif (!edge) {\n\t\treturn res;\n\t}\n\n\tif (vm.horizontal) {\n\t\tif (vm.base > vm.x) {\n\t\t\tedge = swap(edge, 'left', 'right');\n\t\t}\n\t} else if (vm.base < vm.y) {\n\t\tedge = swap(edge, 'bottom', 'top');\n\t}\n\n\tres[edge] = true;\n\treturn res;\n}\n\nfunction parseBorderWidth(vm, maxW, maxH) {\n\tvar value = vm.borderWidth;\n\tvar skip = parseBorderSkipped(vm);\n\tvar t, r, b, l;\n\n\tif (helpers$1.isObject(value)) {\n\t\tt = +value.top || 0;\n\t\tr = +value.right || 0;\n\t\tb = +value.bottom || 0;\n\t\tl = +value.left || 0;\n\t} else {\n\t\tt = r = b = l = +value || 0;\n\t}\n\n\treturn {\n\t\tt: skip.top || (t < 0) ? 0 : t > maxH ? maxH : t,\n\t\tr: skip.right || (r < 0) ? 0 : r > maxW ? maxW : r,\n\t\tb: skip.bottom || (b < 0) ? 0 : b > maxH ? maxH : b,\n\t\tl: skip.left || (l < 0) ? 0 : l > maxW ? maxW : l\n\t};\n}\n\nfunction boundingRects(vm) {\n\tvar bounds = getBarBounds(vm);\n\tvar width = bounds.right - bounds.left;\n\tvar height = bounds.bottom - bounds.top;\n\tvar border = parseBorderWidth(vm, width / 2, height / 2);\n\n\treturn {\n\t\touter: {\n\t\t\tx: bounds.left,\n\t\t\ty: bounds.top,\n\t\t\tw: width,\n\t\t\th: height\n\t\t},\n\t\tinner: {\n\t\t\tx: bounds.left + border.l,\n\t\t\ty: bounds.top + border.t,\n\t\t\tw: width - border.l - border.r,\n\t\t\th: height - border.t - border.b\n\t\t}\n\t};\n}\n\nfunction inRange(vm, x, y) {\n\tvar skipX = x === null;\n\tvar skipY = y === null;\n\tvar bounds = !vm || (skipX && skipY) ? false : getBarBounds(vm);\n\n\treturn bounds\n\t\t&& (skipX || x >= bounds.left && x <= bounds.right)\n\t\t&& (skipY || y >= bounds.top && y <= bounds.bottom);\n}\n\nvar element_rectangle = core_element.extend({\n\tdraw: function() {\n\t\tvar ctx = this._chart.ctx;\n\t\tvar vm = this._view;\n\t\tvar rects = boundingRects(vm);\n\t\tvar outer = rects.outer;\n\t\tvar inner = rects.inner;\n\n\t\tctx.fillStyle = vm.backgroundColor;\n\t\tctx.fillRect(outer.x, outer.y, outer.w, outer.h);\n\n\t\tif (outer.w === inner.w && outer.h === inner.h) {\n\t\t\treturn;\n\t\t}\n\n\t\tctx.save();\n\t\tctx.beginPath();\n\t\tctx.rect(outer.x, outer.y, outer.w, outer.h);\n\t\tctx.clip();\n\t\tctx.fillStyle = vm.borderColor;\n\t\tctx.rect(inner.x, inner.y, inner.w, inner.h);\n\t\tctx.fill('evenodd');\n\t\tctx.restore();\n\t},\n\n\theight: function() {\n\t\tvar vm = this._view;\n\t\treturn vm.base - vm.y;\n\t},\n\n\tinRange: function(mouseX, mouseY) {\n\t\treturn inRange(this._view, mouseX, mouseY);\n\t},\n\n\tinLabelRange: function(mouseX, mouseY) {\n\t\tvar vm = this._view;\n\t\treturn isVertical(vm)\n\t\t\t? inRange(vm, mouseX, null)\n\t\t\t: inRange(vm, null, mouseY);\n\t},\n\n\tinXRange: function(mouseX) {\n\t\treturn inRange(this._view, mouseX, null);\n\t},\n\n\tinYRange: function(mouseY) {\n\t\treturn inRange(this._view, null, mouseY);\n\t},\n\n\tgetCenterPoint: function() {\n\t\tvar vm = this._view;\n\t\tvar x, y;\n\t\tif (isVertical(vm)) {\n\t\t\tx = vm.x;\n\t\t\ty = (vm.y + vm.base) / 2;\n\t\t} else {\n\t\t\tx = (vm.x + vm.base) / 2;\n\t\t\ty = vm.y;\n\t\t}\n\n\t\treturn {x: x, y: y};\n\t},\n\n\tgetArea: function() {\n\t\tvar vm = this._view;\n\n\t\treturn isVertical(vm)\n\t\t\t? vm.width * Math.abs(vm.y - vm.base)\n\t\t\t: vm.height * Math.abs(vm.x - vm.base);\n\t},\n\n\ttooltipPosition: function() {\n\t\tvar vm = this._view;\n\t\treturn {\n\t\t\tx: vm.x,\n\t\t\ty: vm.y\n\t\t};\n\t}\n});\n\nvar elements = {};\nvar Arc = element_arc;\nvar Line = element_line;\nvar Point = element_point;\nvar Rectangle = element_rectangle;\nelements.Arc = Arc;\nelements.Line = Line;\nelements.Point = Point;\nelements.Rectangle = Rectangle;\n\nvar resolve$1 = helpers$1.options.resolve;\n\ncore_defaults._set('bar', {\n\thover: {\n\t\tmode: 'label'\n\t},\n\n\tscales: {\n\t\txAxes: [{\n\t\t\ttype: 'category',\n\t\t\tcategoryPercentage: 0.8,\n\t\t\tbarPercentage: 0.9,\n\t\t\toffset: true,\n\t\t\tgridLines: {\n\t\t\t\toffsetGridLines: true\n\t\t\t}\n\t\t}],\n\n\t\tyAxes: [{\n\t\t\ttype: 'linear'\n\t\t}]\n\t}\n});\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(scale, pixels) {\n\tvar min = scale.isHorizontal() ? scale.width : scale.height;\n\tvar ticks = scale.getTicks();\n\tvar prev, curr, i, ilen;\n\n\tfor (i = 1, ilen = pixels.length; i < ilen; ++i) {\n\t\tmin = Math.min(min, Math.abs(pixels[i] - pixels[i - 1]));\n\t}\n\n\tfor (i = 0, ilen = ticks.length; i < ilen; ++i) {\n\t\tcurr = scale.getPixelForTick(i);\n\t\tmin = i > 0 ? Math.min(min, curr - prev) : min;\n\t\tprev = curr;\n\t}\n\n\treturn min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options) {\n\tvar thickness = options.barThickness;\n\tvar count = ruler.stackCount;\n\tvar curr = ruler.pixels[index];\n\tvar size, ratio;\n\n\tif (helpers$1.isNullOrUndef(thickness)) {\n\t\tsize = ruler.min * options.categoryPercentage;\n\t\tratio = options.barPercentage;\n\t} else {\n\t\t// When bar thickness is enforced, category and bar percentages are ignored.\n\t\t// Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n\t\t// and deprecate barPercentage since this value is ignored when thickness is absolute.\n\t\tsize = thickness * count;\n\t\tratio = 1;\n\t}\n\n\treturn {\n\t\tchunk: size / count,\n\t\tratio: ratio,\n\t\tstart: curr - (size / 2)\n\t};\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options) {\n\tvar pixels = ruler.pixels;\n\tvar curr = pixels[index];\n\tvar prev = index > 0 ? pixels[index - 1] : null;\n\tvar next = index < pixels.length - 1 ? pixels[index + 1] : null;\n\tvar percent = options.categoryPercentage;\n\tvar start, size;\n\n\tif (prev === null) {\n\t\t// first data: its size is double based on the next point or,\n\t\t// if it's also the last data, we use the scale size.\n\t\tprev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n\t}\n\n\tif (next === null) {\n\t\t// last data: its size is also double based on the previous point.\n\t\tnext = curr + curr - prev;\n\t}\n\n\tstart = curr - (curr - Math.min(prev, next)) / 2 * percent;\n\tsize = Math.abs(next - prev) / 2 * percent;\n\n\treturn {\n\t\tchunk: size / ruler.stackCount,\n\t\tratio: options.barPercentage,\n\t\tstart: start\n\t};\n}\n\nvar controller_bar = core_datasetController.extend({\n\n\tdataElementType: elements.Rectangle,\n\n\tinitialize: function() {\n\t\tvar me = this;\n\t\tvar meta;\n\n\t\tcore_datasetController.prototype.initialize.apply(me, arguments);\n\n\t\tmeta = me.getMeta();\n\t\tmeta.stack = me.getDataset().stack;\n\t\tmeta.bar = true;\n\t},\n\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar rects = me.getMeta().data;\n\t\tvar i, ilen;\n\n\t\tme._ruler = me.getRuler();\n\n\t\tfor (i = 0, ilen = rects.length; i < ilen; ++i) {\n\t\t\tme.updateElement(rects[i], i, reset);\n\t\t}\n\t},\n\n\tupdateElement: function(rectangle, index, reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar dataset = me.getDataset();\n\t\tvar options = me._resolveElementOptions(rectangle, index);\n\n\t\trectangle._xScale = me.getScaleForId(meta.xAxisID);\n\t\trectangle._yScale = me.getScaleForId(meta.yAxisID);\n\t\trectangle._datasetIndex = me.index;\n\t\trectangle._index = index;\n\t\trectangle._model = {\n\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\tborderColor: options.borderColor,\n\t\t\tborderSkipped: options.borderSkipped,\n\t\t\tborderWidth: options.borderWidth,\n\t\t\tdatasetLabel: dataset.label,\n\t\t\tlabel: me.chart.data.labels[index]\n\t\t};\n\n\t\tme._updateElementGeometry(rectangle, index, reset);\n\n\t\trectangle.pivot();\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_updateElementGeometry: function(rectangle, index, reset) {\n\t\tvar me = this;\n\t\tvar model = rectangle._model;\n\t\tvar vscale = me._getValueScale();\n\t\tvar base = vscale.getBasePixel();\n\t\tvar horizontal = vscale.isHorizontal();\n\t\tvar ruler = me._ruler || me.getRuler();\n\t\tvar vpixels = me.calculateBarValuePixels(me.index, index);\n\t\tvar ipixels = me.calculateBarIndexPixels(me.index, index, ruler);\n\n\t\tmodel.horizontal = horizontal;\n\t\tmodel.base = reset ? base : vpixels.base;\n\t\tmodel.x = horizontal ? reset ? base : vpixels.head : ipixels.center;\n\t\tmodel.y = horizontal ? ipixels.center : reset ? base : vpixels.head;\n\t\tmodel.height = horizontal ? ipixels.size : undefined;\n\t\tmodel.width = horizontal ? undefined : ipixels.size;\n\t},\n\n\t/**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n\t_getStacks: function(last) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar scale = me._getIndexScale();\n\t\tvar stacked = scale.options.stacked;\n\t\tvar ilen = last === undefined ? chart.data.datasets.length : last + 1;\n\t\tvar stacks = [];\n\t\tvar i, meta;\n\n\t\tfor (i = 0; i < ilen; ++i) {\n\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\tif (meta.bar && chart.isDatasetVisible(i) &&\n\t\t\t\t(stacked === false ||\n\t\t\t\t(stacked === true && stacks.indexOf(meta.stack) === -1) ||\n\t\t\t\t(stacked === undefined && (meta.stack === undefined || stacks.indexOf(meta.stack) === -1)))) {\n\t\t\t\tstacks.push(meta.stack);\n\t\t\t}\n\t\t}\n\n\t\treturn stacks;\n\t},\n\n\t/**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n\tgetStackCount: function() {\n\t\treturn this._getStacks().length;\n\t},\n\n\t/**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n\t * @returns {number} The stack index\n\t * @private\n\t */\n\tgetStackIndex: function(datasetIndex, name) {\n\t\tvar stacks = this._getStacks(datasetIndex);\n\t\tvar index = (name !== undefined)\n\t\t\t? stacks.indexOf(name)\n\t\t\t: -1; // indexOf returns -1 if element is not present\n\n\t\treturn (index === -1)\n\t\t\t? stacks.length - 1\n\t\t\t: index;\n\t},\n\n\t/**\n\t * @private\n\t */\n\tgetRuler: function() {\n\t\tvar me = this;\n\t\tvar scale = me._getIndexScale();\n\t\tvar stackCount = me.getStackCount();\n\t\tvar datasetIndex = me.index;\n\t\tvar isHorizontal = scale.isHorizontal();\n\t\tvar start = isHorizontal ? scale.left : scale.top;\n\t\tvar end = start + (isHorizontal ? scale.width : scale.height);\n\t\tvar pixels = [];\n\t\tvar i, ilen, min;\n\n\t\tfor (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {\n\t\t\tpixels.push(scale.getPixelForValue(null, i, datasetIndex));\n\t\t}\n\n\t\tmin = helpers$1.isNullOrUndef(scale.options.barThickness)\n\t\t\t? computeMinSampleSize(scale, pixels)\n\t\t\t: -1;\n\n\t\treturn {\n\t\t\tmin: min,\n\t\t\tpixels: pixels,\n\t\t\tstart: start,\n\t\t\tend: end,\n\t\t\tstackCount: stackCount,\n\t\t\tscale: scale\n\t\t};\n\t},\n\n\t/**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n\tcalculateBarValuePixels: function(datasetIndex, index) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar meta = me.getMeta();\n\t\tvar scale = me._getValueScale();\n\t\tvar isHorizontal = scale.isHorizontal();\n\t\tvar datasets = chart.data.datasets;\n\t\tvar value = +scale.getRightValue(datasets[datasetIndex].data[index]);\n\t\tvar minBarLength = scale.options.minBarLength;\n\t\tvar stacked = scale.options.stacked;\n\t\tvar stack = meta.stack;\n\t\tvar start = 0;\n\t\tvar i, imeta, ivalue, base, head, size;\n\n\t\tif (stacked || (stacked === undefined && stack !== undefined)) {\n\t\t\tfor (i = 0; i < datasetIndex; ++i) {\n\t\t\t\timeta = chart.getDatasetMeta(i);\n\n\t\t\t\tif (imeta.bar &&\n\t\t\t\t\timeta.stack === stack &&\n\t\t\t\t\timeta.controller._getValueScaleId() === scale.id &&\n\t\t\t\t\tchart.isDatasetVisible(i)) {\n\n\t\t\t\t\tivalue = +scale.getRightValue(datasets[i].data[index]);\n\t\t\t\t\tif ((value < 0 && ivalue < 0) || (value >= 0 && ivalue > 0)) {\n\t\t\t\t\t\tstart += ivalue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tbase = scale.getPixelForValue(start);\n\t\thead = scale.getPixelForValue(start + value);\n\t\tsize = head - base;\n\n\t\tif (minBarLength !== undefined && Math.abs(size) < minBarLength) {\n\t\t\tsize = minBarLength;\n\t\t\tif (value >= 0 && !isHorizontal || value < 0 && isHorizontal) {\n\t\t\t\thead = base - minBarLength;\n\t\t\t} else {\n\t\t\t\thead = base + minBarLength;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsize: size,\n\t\t\tbase: base,\n\t\t\thead: head,\n\t\t\tcenter: head + size / 2\n\t\t};\n\t},\n\n\t/**\n\t * @private\n\t */\n\tcalculateBarIndexPixels: function(datasetIndex, index, ruler) {\n\t\tvar me = this;\n\t\tvar options = ruler.scale.options;\n\t\tvar range = options.barThickness === 'flex'\n\t\t\t? computeFlexCategoryTraits(index, ruler, options)\n\t\t\t: computeFitCategoryTraits(index, ruler, options);\n\n\t\tvar stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);\n\t\tvar center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n\t\tvar size = Math.min(\n\t\t\thelpers$1.valueOrDefault(options.maxBarThickness, Infinity),\n\t\t\trange.chunk * range.ratio);\n\n\t\treturn {\n\t\t\tbase: center - size / 2,\n\t\t\thead: center + size / 2,\n\t\t\tcenter: center,\n\t\t\tsize: size\n\t\t};\n\t},\n\n\tdraw: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar scale = me._getValueScale();\n\t\tvar rects = me.getMeta().data;\n\t\tvar dataset = me.getDataset();\n\t\tvar ilen = rects.length;\n\t\tvar i = 0;\n\n\t\thelpers$1.canvas.clipArea(chart.ctx, chart.chartArea);\n\n\t\tfor (; i < ilen; ++i) {\n\t\t\tif (!isNaN(scale.getRightValue(dataset.data[i]))) {\n\t\t\t\trects[i].draw();\n\t\t\t}\n\t\t}\n\n\t\thelpers$1.canvas.unclipArea(chart.ctx);\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveElementOptions: function(rectangle, index) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar datasets = chart.data.datasets;\n\t\tvar dataset = datasets[me.index];\n\t\tvar custom = rectangle.custom || {};\n\t\tvar options = chart.options.elements.rectangle;\n\t\tvar values = {};\n\t\tvar i, ilen, key;\n\n\t\t// Scriptable options\n\t\tvar context = {\n\t\t\tchart: chart,\n\t\t\tdataIndex: index,\n\t\t\tdataset: dataset,\n\t\t\tdatasetIndex: me.index\n\t\t};\n\n\t\tvar keys = [\n\t\t\t'backgroundColor',\n\t\t\t'borderColor',\n\t\t\t'borderSkipped',\n\t\t\t'borderWidth'\n\t\t];\n\n\t\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\t\tkey = keys[i];\n\t\t\tvalues[key] = resolve$1([\n\t\t\t\tcustom[key],\n\t\t\t\tdataset[key],\n\t\t\t\toptions[key]\n\t\t\t], context, index);\n\t\t}\n\n\t\treturn values;\n\t}\n});\n\nvar valueOrDefault$3 = helpers$1.valueOrDefault;\nvar resolve$2 = helpers$1.options.resolve;\n\ncore_defaults._set('bubble', {\n\thover: {\n\t\tmode: 'single'\n\t},\n\n\tscales: {\n\t\txAxes: [{\n\t\t\ttype: 'linear', // bubble should probably use a linear scale by default\n\t\t\tposition: 'bottom',\n\t\t\tid: 'x-axis-0' // need an ID so datasets can reference the scale\n\t\t}],\n\t\tyAxes: [{\n\t\t\ttype: 'linear',\n\t\t\tposition: 'left',\n\t\t\tid: 'y-axis-0'\n\t\t}]\n\t},\n\n\ttooltips: {\n\t\tcallbacks: {\n\t\t\ttitle: function() {\n\t\t\t\t// Title doesn't make sense for scatter since we format the data as a point\n\t\t\t\treturn '';\n\t\t\t},\n\t\t\tlabel: function(item, data) {\n\t\t\t\tvar datasetLabel = data.datasets[item.datasetIndex].label || '';\n\t\t\t\tvar dataPoint = data.datasets[item.datasetIndex].data[item.index];\n\t\t\t\treturn datasetLabel + ': (' + item.xLabel + ', ' + item.yLabel + ', ' + dataPoint.r + ')';\n\t\t\t}\n\t\t}\n\t}\n});\n\nvar controller_bubble = core_datasetController.extend({\n\t/**\n\t * @protected\n\t */\n\tdataElementType: elements.Point,\n\n\t/**\n\t * @protected\n\t */\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar points = meta.data;\n\n\t\t// Update Points\n\t\thelpers$1.each(points, function(point, index) {\n\t\t\tme.updateElement(point, index, reset);\n\t\t});\n\t},\n\n\t/**\n\t * @protected\n\t */\n\tupdateElement: function(point, index, reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar custom = point.custom || {};\n\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\tvar options = me._resolveElementOptions(point, index);\n\t\tvar data = me.getDataset().data[index];\n\t\tvar dsIndex = me.index;\n\n\t\tvar x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex);\n\t\tvar y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);\n\n\t\tpoint._xScale = xScale;\n\t\tpoint._yScale = yScale;\n\t\tpoint._options = options;\n\t\tpoint._datasetIndex = dsIndex;\n\t\tpoint._index = index;\n\t\tpoint._model = {\n\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\tborderColor: options.borderColor,\n\t\t\tborderWidth: options.borderWidth,\n\t\t\thitRadius: options.hitRadius,\n\t\t\tpointStyle: options.pointStyle,\n\t\t\trotation: options.rotation,\n\t\t\tradius: reset ? 0 : options.radius,\n\t\t\tskip: custom.skip || isNaN(x) || isNaN(y),\n\t\t\tx: x,\n\t\t\ty: y,\n\t\t};\n\n\t\tpoint.pivot();\n\t},\n\n\t/**\n\t * @protected\n\t */\n\tsetHoverStyle: function(point) {\n\t\tvar model = point._model;\n\t\tvar options = point._options;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\n\t\tpoint.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth,\n\t\t\tradius: model.radius\n\t\t};\n\n\t\tmodel.backgroundColor = valueOrDefault$3(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n\t\tmodel.borderColor = valueOrDefault$3(options.hoverBorderColor, getHoverColor(options.borderColor));\n\t\tmodel.borderWidth = valueOrDefault$3(options.hoverBorderWidth, options.borderWidth);\n\t\tmodel.radius = options.radius + options.hoverRadius;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveElementOptions: function(point, index) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar datasets = chart.data.datasets;\n\t\tvar dataset = datasets[me.index];\n\t\tvar custom = point.custom || {};\n\t\tvar options = chart.options.elements.point;\n\t\tvar data = dataset.data[index];\n\t\tvar values = {};\n\t\tvar i, ilen, key;\n\n\t\t// Scriptable options\n\t\tvar context = {\n\t\t\tchart: chart,\n\t\t\tdataIndex: index,\n\t\t\tdataset: dataset,\n\t\t\tdatasetIndex: me.index\n\t\t};\n\n\t\tvar keys = [\n\t\t\t'backgroundColor',\n\t\t\t'borderColor',\n\t\t\t'borderWidth',\n\t\t\t'hoverBackgroundColor',\n\t\t\t'hoverBorderColor',\n\t\t\t'hoverBorderWidth',\n\t\t\t'hoverRadius',\n\t\t\t'hitRadius',\n\t\t\t'pointStyle',\n\t\t\t'rotation'\n\t\t];\n\n\t\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\t\tkey = keys[i];\n\t\t\tvalues[key] = resolve$2([\n\t\t\t\tcustom[key],\n\t\t\t\tdataset[key],\n\t\t\t\toptions[key]\n\t\t\t], context, index);\n\t\t}\n\n\t\t// Custom radius resolution\n\t\tvalues.radius = resolve$2([\n\t\t\tcustom.radius,\n\t\t\tdata ? data.r : undefined,\n\t\t\tdataset.radius,\n\t\t\toptions.radius\n\t\t], context, index);\n\n\t\treturn values;\n\t}\n});\n\nvar resolve$3 = helpers$1.options.resolve;\nvar valueOrDefault$4 = helpers$1.valueOrDefault;\n\ncore_defaults._set('doughnut', {\n\tanimation: {\n\t\t// Boolean - Whether we animate the rotation of the Doughnut\n\t\tanimateRotate: true,\n\t\t// Boolean - Whether we animate scaling the Doughnut from the centre\n\t\tanimateScale: false\n\t},\n\thover: {\n\t\tmode: 'single'\n\t},\n\tlegendCallback: function(chart) {\n\t\tvar text = [];\n\t\ttext.push('<ul class=\"' + chart.id + '-legend\">');\n\n\t\tvar data = chart.data;\n\t\tvar datasets = data.datasets;\n\t\tvar labels = data.labels;\n\n\t\tif (datasets.length) {\n\t\t\tfor (var i = 0; i < datasets[0].data.length; ++i) {\n\t\t\t\ttext.push('<li><span style=\"background-color:' + datasets[0].backgroundColor[i] + '\"></span>');\n\t\t\t\tif (labels[i]) {\n\t\t\t\t\ttext.push(labels[i]);\n\t\t\t\t}\n\t\t\t\ttext.push('</li>');\n\t\t\t}\n\t\t}\n\n\t\ttext.push('</ul>');\n\t\treturn text.join('');\n\t},\n\tlegend: {\n\t\tlabels: {\n\t\t\tgenerateLabels: function(chart) {\n\t\t\t\tvar data = chart.data;\n\t\t\t\tif (data.labels.length && data.datasets.length) {\n\t\t\t\t\treturn data.labels.map(function(label, i) {\n\t\t\t\t\t\tvar meta = chart.getDatasetMeta(0);\n\t\t\t\t\t\tvar ds = data.datasets[0];\n\t\t\t\t\t\tvar arc = meta.data[i];\n\t\t\t\t\t\tvar custom = arc && arc.custom || {};\n\t\t\t\t\t\tvar arcOpts = chart.options.elements.arc;\n\t\t\t\t\t\tvar fill = resolve$3([custom.backgroundColor, ds.backgroundColor, arcOpts.backgroundColor], undefined, i);\n\t\t\t\t\t\tvar stroke = resolve$3([custom.borderColor, ds.borderColor, arcOpts.borderColor], undefined, i);\n\t\t\t\t\t\tvar bw = resolve$3([custom.borderWidth, ds.borderWidth, arcOpts.borderWidth], undefined, i);\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttext: label,\n\t\t\t\t\t\t\tfillStyle: fill,\n\t\t\t\t\t\t\tstrokeStyle: stroke,\n\t\t\t\t\t\t\tlineWidth: bw,\n\t\t\t\t\t\t\thidden: isNaN(ds.data[i]) || meta.data[i].hidden,\n\n\t\t\t\t\t\t\t// Extra data used for toggling the correct item\n\t\t\t\t\t\t\tindex: i\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t}\n\t\t},\n\n\t\tonClick: function(e, legendItem) {\n\t\t\tvar index = legendItem.index;\n\t\t\tvar chart = this.chart;\n\t\t\tvar i, ilen, meta;\n\n\t\t\tfor (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n\t\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\t\t// toggle visibility of index if exists\n\t\t\t\tif (meta.data[index]) {\n\t\t\t\t\tmeta.data[index].hidden = !meta.data[index].hidden;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tchart.update();\n\t\t}\n\t},\n\n\t// The percentage of the chart that we cut out of the middle.\n\tcutoutPercentage: 50,\n\n\t// The rotation of the chart, where the first data arc begins.\n\trotation: Math.PI * -0.5,\n\n\t// The total circumference of the chart.\n\tcircumference: Math.PI * 2.0,\n\n\t// Need to override these to give a nice default\n\ttooltips: {\n\t\tcallbacks: {\n\t\t\ttitle: function() {\n\t\t\t\treturn '';\n\t\t\t},\n\t\t\tlabel: function(tooltipItem, data) {\n\t\t\t\tvar dataLabel = data.labels[tooltipItem.index];\n\t\t\t\tvar value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n\n\t\t\t\tif (helpers$1.isArray(dataLabel)) {\n\t\t\t\t\t// show value on first line of multiline label\n\t\t\t\t\t// need to clone because we are changing the value\n\t\t\t\t\tdataLabel = dataLabel.slice();\n\t\t\t\t\tdataLabel[0] += value;\n\t\t\t\t} else {\n\t\t\t\t\tdataLabel += value;\n\t\t\t\t}\n\n\t\t\t\treturn dataLabel;\n\t\t\t}\n\t\t}\n\t}\n});\n\nvar controller_doughnut = core_datasetController.extend({\n\n\tdataElementType: elements.Arc,\n\n\tlinkScales: helpers$1.noop,\n\n\t// Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly\n\tgetRingIndex: function(datasetIndex) {\n\t\tvar ringIndex = 0;\n\n\t\tfor (var j = 0; j < datasetIndex; ++j) {\n\t\t\tif (this.chart.isDatasetVisible(j)) {\n\t\t\t\t++ringIndex;\n\t\t\t}\n\t\t}\n\n\t\treturn ringIndex;\n\t},\n\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar chartArea = chart.chartArea;\n\t\tvar opts = chart.options;\n\t\tvar availableWidth = chartArea.right - chartArea.left;\n\t\tvar availableHeight = chartArea.bottom - chartArea.top;\n\t\tvar minSize = Math.min(availableWidth, availableHeight);\n\t\tvar offset = {x: 0, y: 0};\n\t\tvar meta = me.getMeta();\n\t\tvar arcs = meta.data;\n\t\tvar cutoutPercentage = opts.cutoutPercentage;\n\t\tvar circumference = opts.circumference;\n\t\tvar chartWeight = me._getRingWeight(me.index);\n\t\tvar i, ilen;\n\n\t\t// If the chart's circumference isn't a full circle, calculate minSize as a ratio of the width/height of the arc\n\t\tif (circumference < Math.PI * 2.0) {\n\t\t\tvar startAngle = opts.rotation % (Math.PI * 2.0);\n\t\t\tstartAngle += Math.PI * 2.0 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);\n\t\t\tvar endAngle = startAngle + circumference;\n\t\t\tvar start = {x: Math.cos(startAngle), y: Math.sin(startAngle)};\n\t\t\tvar end = {x: Math.cos(endAngle), y: Math.sin(endAngle)};\n\t\t\tvar contains0 = (startAngle <= 0 && endAngle >= 0) || (startAngle <= Math.PI * 2.0 && Math.PI * 2.0 <= endAngle);\n\t\t\tvar contains90 = (startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle);\n\t\t\tvar contains180 = (startAngle <= -Math.PI && -Math.PI <= endAngle) || (startAngle <= Math.PI && Math.PI <= endAngle);\n\t\t\tvar contains270 = (startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle);\n\t\t\tvar cutout = cutoutPercentage / 100.0;\n\t\t\tvar min = {x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)), y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout))};\n\t\t\tvar max = {x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)), y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout))};\n\t\t\tvar size = {width: (max.x - min.x) * 0.5, height: (max.y - min.y) * 0.5};\n\t\t\tminSize = Math.min(availableWidth / size.width, availableHeight / size.height);\n\t\t\toffset = {x: (max.x + min.x) * -0.5, y: (max.y + min.y) * -0.5};\n\t\t}\n\n\t\tfor (i = 0, ilen = arcs.length; i < ilen; ++i) {\n\t\t\tarcs[i]._options = me._resolveElementOptions(arcs[i], i);\n\t\t}\n\n\t\tchart.borderWidth = me.getMaxBorderWidth();\n\t\tchart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);\n\t\tchart.innerRadius = Math.max(cutoutPercentage ? (chart.outerRadius / 100) * (cutoutPercentage) : 0, 0);\n\t\tchart.radiusLength = (chart.outerRadius - chart.innerRadius) / (me._getVisibleDatasetWeightTotal() || 1);\n\t\tchart.offsetX = offset.x * chart.outerRadius;\n\t\tchart.offsetY = offset.y * chart.outerRadius;\n\n\t\tmeta.total = me.calculateTotal();\n\n\t\tme.outerRadius = chart.outerRadius - chart.radiusLength * me._getRingWeightOffset(me.index);\n\t\tme.innerRadius = Math.max(me.outerRadius - chart.radiusLength * chartWeight, 0);\n\n\t\tfor (i = 0, ilen = arcs.length; i < ilen; ++i) {\n\t\t\tme.updateElement(arcs[i], i, reset);\n\t\t}\n\t},\n\n\tupdateElement: function(arc, index, reset) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar chartArea = chart.chartArea;\n\t\tvar opts = chart.options;\n\t\tvar animationOpts = opts.animation;\n\t\tvar centerX = (chartArea.left + chartArea.right) / 2;\n\t\tvar centerY = (chartArea.top + chartArea.bottom) / 2;\n\t\tvar startAngle = opts.rotation; // non reset case handled later\n\t\tvar endAngle = opts.rotation; // non reset case handled later\n\t\tvar dataset = me.getDataset();\n\t\tvar circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2.0 * Math.PI));\n\t\tvar innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;\n\t\tvar outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;\n\t\tvar options = arc._options || {};\n\n\t\thelpers$1.extend(arc, {\n\t\t\t// Utility\n\t\t\t_datasetIndex: me.index,\n\t\t\t_index: index,\n\n\t\t\t// Desired view properties\n\t\t\t_model: {\n\t\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\t\tborderColor: options.borderColor,\n\t\t\t\tborderWidth: options.borderWidth,\n\t\t\t\tborderAlign: options.borderAlign,\n\t\t\t\tx: centerX + chart.offsetX,\n\t\t\t\ty: centerY + chart.offsetY,\n\t\t\t\tstartAngle: startAngle,\n\t\t\t\tendAngle: endAngle,\n\t\t\t\tcircumference: circumference,\n\t\t\t\touterRadius: outerRadius,\n\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\tlabel: helpers$1.valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])\n\t\t\t}\n\t\t});\n\n\t\tvar model = arc._model;\n\n\t\t// Set correct angles if not resetting\n\t\tif (!reset || !animationOpts.animateRotate) {\n\t\t\tif (index === 0) {\n\t\t\t\tmodel.startAngle = opts.rotation;\n\t\t\t} else {\n\t\t\t\tmodel.startAngle = me.getMeta().data[index - 1]._model.endAngle;\n\t\t\t}\n\n\t\t\tmodel.endAngle = model.startAngle + model.circumference;\n\t\t}\n\n\t\tarc.pivot();\n\t},\n\n\tcalculateTotal: function() {\n\t\tvar dataset = this.getDataset();\n\t\tvar meta = this.getMeta();\n\t\tvar total = 0;\n\t\tvar value;\n\n\t\thelpers$1.each(meta.data, function(element, index) {\n\t\t\tvalue = dataset.data[index];\n\t\t\tif (!isNaN(value) && !element.hidden) {\n\t\t\t\ttotal += Math.abs(value);\n\t\t\t}\n\t\t});\n\n\t\t/* if (total === 0) {\n\t\t\ttotal = NaN;\n\t\t}*/\n\n\t\treturn total;\n\t},\n\n\tcalculateCircumference: function(value) {\n\t\tvar total = this.getMeta().total;\n\t\tif (total > 0 && !isNaN(value)) {\n\t\t\treturn (Math.PI * 2.0) * (Math.abs(value) / total);\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// gets the max border or hover width to properly scale pie charts\n\tgetMaxBorderWidth: function(arcs) {\n\t\tvar me = this;\n\t\tvar max = 0;\n\t\tvar chart = me.chart;\n\t\tvar i, ilen, meta, arc, controller, options, borderWidth, hoverWidth;\n\n\t\tif (!arcs) {\n\t\t\t// Find the outmost visible dataset\n\t\t\tfor (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n\t\t\t\tif (chart.isDatasetVisible(i)) {\n\t\t\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\t\t\tarcs = meta.data;\n\t\t\t\t\tif (i !== me.index) {\n\t\t\t\t\t\tcontroller = meta.controller;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!arcs) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tfor (i = 0, ilen = arcs.length; i < ilen; ++i) {\n\t\t\tarc = arcs[i];\n\t\t\toptions = controller ? controller._resolveElementOptions(arc, i) : arc._options;\n\t\t\tif (options.borderAlign !== 'inner') {\n\t\t\t\tborderWidth = options.borderWidth;\n\t\t\t\thoverWidth = options.hoverBorderWidth;\n\n\t\t\t\tmax = borderWidth > max ? borderWidth : max;\n\t\t\t\tmax = hoverWidth > max ? hoverWidth : max;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t},\n\n\t/**\n\t * @protected\n\t */\n\tsetHoverStyle: function(arc) {\n\t\tvar model = arc._model;\n\t\tvar options = arc._options;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\n\t\tarc.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth,\n\t\t};\n\n\t\tmodel.backgroundColor = valueOrDefault$4(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n\t\tmodel.borderColor = valueOrDefault$4(options.hoverBorderColor, getHoverColor(options.borderColor));\n\t\tmodel.borderWidth = valueOrDefault$4(options.hoverBorderWidth, options.borderWidth);\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveElementOptions: function(arc, index) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar dataset = me.getDataset();\n\t\tvar custom = arc.custom || {};\n\t\tvar options = chart.options.elements.arc;\n\t\tvar values = {};\n\t\tvar i, ilen, key;\n\n\t\t// Scriptable options\n\t\tvar context = {\n\t\t\tchart: chart,\n\t\t\tdataIndex: index,\n\t\t\tdataset: dataset,\n\t\t\tdatasetIndex: me.index\n\t\t};\n\n\t\tvar keys = [\n\t\t\t'backgroundColor',\n\t\t\t'borderColor',\n\t\t\t'borderWidth',\n\t\t\t'borderAlign',\n\t\t\t'hoverBackgroundColor',\n\t\t\t'hoverBorderColor',\n\t\t\t'hoverBorderWidth',\n\t\t];\n\n\t\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\t\tkey = keys[i];\n\t\t\tvalues[key] = resolve$3([\n\t\t\t\tcustom[key],\n\t\t\t\tdataset[key],\n\t\t\t\toptions[key]\n\t\t\t], context, index);\n\t\t}\n\n\t\treturn values;\n\t},\n\n\t/**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n\t_getRingWeightOffset: function(datasetIndex) {\n\t\tvar ringWeightOffset = 0;\n\n\t\tfor (var i = 0; i < datasetIndex; ++i) {\n\t\t\tif (this.chart.isDatasetVisible(i)) {\n\t\t\t\tringWeightOffset += this._getRingWeight(i);\n\t\t\t}\n\t\t}\n\n\t\treturn ringWeightOffset;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getRingWeight: function(dataSetIndex) {\n\t\treturn Math.max(valueOrDefault$4(this.chart.data.datasets[dataSetIndex].weight, 1), 0);\n\t},\n\n\t/**\n\t * Returns the sum of all visibile data set weights.  This value can be 0.\n\t * @private\n\t */\n\t_getVisibleDatasetWeightTotal: function() {\n\t\treturn this._getRingWeightOffset(this.chart.data.datasets.length);\n\t}\n});\n\ncore_defaults._set('horizontalBar', {\n\thover: {\n\t\tmode: 'index',\n\t\taxis: 'y'\n\t},\n\n\tscales: {\n\t\txAxes: [{\n\t\t\ttype: 'linear',\n\t\t\tposition: 'bottom'\n\t\t}],\n\n\t\tyAxes: [{\n\t\t\ttype: 'category',\n\t\t\tposition: 'left',\n\t\t\tcategoryPercentage: 0.8,\n\t\t\tbarPercentage: 0.9,\n\t\t\toffset: true,\n\t\t\tgridLines: {\n\t\t\t\toffsetGridLines: true\n\t\t\t}\n\t\t}]\n\t},\n\n\telements: {\n\t\trectangle: {\n\t\t\tborderSkipped: 'left'\n\t\t}\n\t},\n\n\ttooltips: {\n\t\tmode: 'index',\n\t\taxis: 'y'\n\t}\n});\n\nvar controller_horizontalBar = controller_bar.extend({\n\t/**\n\t * @private\n\t */\n\t_getValueScaleId: function() {\n\t\treturn this.getMeta().xAxisID;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getIndexScaleId: function() {\n\t\treturn this.getMeta().yAxisID;\n\t}\n});\n\nvar valueOrDefault$5 = helpers$1.valueOrDefault;\nvar resolve$4 = helpers$1.options.resolve;\nvar isPointInArea = helpers$1.canvas._isPointInArea;\n\ncore_defaults._set('line', {\n\tshowLines: true,\n\tspanGaps: false,\n\n\thover: {\n\t\tmode: 'label'\n\t},\n\n\tscales: {\n\t\txAxes: [{\n\t\t\ttype: 'category',\n\t\t\tid: 'x-axis-0'\n\t\t}],\n\t\tyAxes: [{\n\t\t\ttype: 'linear',\n\t\t\tid: 'y-axis-0'\n\t\t}]\n\t}\n});\n\nfunction lineEnabled(dataset, options) {\n\treturn valueOrDefault$5(dataset.showLine, options.showLines);\n}\n\nvar controller_line = core_datasetController.extend({\n\n\tdatasetElementType: elements.Line,\n\n\tdataElementType: elements.Point,\n\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar line = meta.dataset;\n\t\tvar points = meta.data || [];\n\t\tvar scale = me.getScaleForId(meta.yAxisID);\n\t\tvar dataset = me.getDataset();\n\t\tvar showLine = lineEnabled(dataset, me.chart.options);\n\t\tvar i, ilen;\n\n\t\t// Update Line\n\t\tif (showLine) {\n\t\t\t// Compatibility: If the properties are defined with only the old name, use those values\n\t\t\tif ((dataset.tension !== undefined) && (dataset.lineTension === undefined)) {\n\t\t\t\tdataset.lineTension = dataset.tension;\n\t\t\t}\n\n\t\t\t// Utility\n\t\t\tline._scale = scale;\n\t\t\tline._datasetIndex = me.index;\n\t\t\t// Data\n\t\t\tline._children = points;\n\t\t\t// Model\n\t\t\tline._model = me._resolveLineOptions(line);\n\n\t\t\tline.pivot();\n\t\t}\n\n\t\t// Update Points\n\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\tme.updateElement(points[i], i, reset);\n\t\t}\n\n\t\tif (showLine && line._model.tension !== 0) {\n\t\t\tme.updateBezierControlPoints();\n\t\t}\n\n\t\t// Now pivot the point for animation\n\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\tpoints[i].pivot();\n\t\t}\n\t},\n\n\tupdateElement: function(point, index, reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar custom = point.custom || {};\n\t\tvar dataset = me.getDataset();\n\t\tvar datasetIndex = me.index;\n\t\tvar value = dataset.data[index];\n\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\tvar lineModel = meta.dataset._model;\n\t\tvar x, y;\n\n\t\tvar options = me._resolvePointOptions(point, index);\n\n\t\tx = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex);\n\t\ty = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);\n\n\t\t// Utility\n\t\tpoint._xScale = xScale;\n\t\tpoint._yScale = yScale;\n\t\tpoint._options = options;\n\t\tpoint._datasetIndex = datasetIndex;\n\t\tpoint._index = index;\n\n\t\t// Desired view properties\n\t\tpoint._model = {\n\t\t\tx: x,\n\t\t\ty: y,\n\t\t\tskip: custom.skip || isNaN(x) || isNaN(y),\n\t\t\t// Appearance\n\t\t\tradius: options.radius,\n\t\t\tpointStyle: options.pointStyle,\n\t\t\trotation: options.rotation,\n\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\tborderColor: options.borderColor,\n\t\t\tborderWidth: options.borderWidth,\n\t\t\ttension: valueOrDefault$5(custom.tension, lineModel ? lineModel.tension : 0),\n\t\t\tsteppedLine: lineModel ? lineModel.steppedLine : false,\n\t\t\t// Tooltip\n\t\t\thitRadius: options.hitRadius\n\t\t};\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolvePointOptions: function(element, index) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar dataset = chart.data.datasets[me.index];\n\t\tvar custom = element.custom || {};\n\t\tvar options = chart.options.elements.point;\n\t\tvar values = {};\n\t\tvar i, ilen, key;\n\n\t\t// Scriptable options\n\t\tvar context = {\n\t\t\tchart: chart,\n\t\t\tdataIndex: index,\n\t\t\tdataset: dataset,\n\t\t\tdatasetIndex: me.index\n\t\t};\n\n\t\tvar ELEMENT_OPTIONS = {\n\t\t\tbackgroundColor: 'pointBackgroundColor',\n\t\t\tborderColor: 'pointBorderColor',\n\t\t\tborderWidth: 'pointBorderWidth',\n\t\t\thitRadius: 'pointHitRadius',\n\t\t\thoverBackgroundColor: 'pointHoverBackgroundColor',\n\t\t\thoverBorderColor: 'pointHoverBorderColor',\n\t\t\thoverBorderWidth: 'pointHoverBorderWidth',\n\t\t\thoverRadius: 'pointHoverRadius',\n\t\t\tpointStyle: 'pointStyle',\n\t\t\tradius: 'pointRadius',\n\t\t\trotation: 'pointRotation'\n\t\t};\n\t\tvar keys = Object.keys(ELEMENT_OPTIONS);\n\n\t\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\t\tkey = keys[i];\n\t\t\tvalues[key] = resolve$4([\n\t\t\t\tcustom[key],\n\t\t\t\tdataset[ELEMENT_OPTIONS[key]],\n\t\t\t\tdataset[key],\n\t\t\t\toptions[key]\n\t\t\t], context, index);\n\t\t}\n\n\t\treturn values;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveLineOptions: function(element) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar dataset = chart.data.datasets[me.index];\n\t\tvar custom = element.custom || {};\n\t\tvar options = chart.options;\n\t\tvar elementOptions = options.elements.line;\n\t\tvar values = {};\n\t\tvar i, ilen, key;\n\n\t\tvar keys = [\n\t\t\t'backgroundColor',\n\t\t\t'borderWidth',\n\t\t\t'borderColor',\n\t\t\t'borderCapStyle',\n\t\t\t'borderDash',\n\t\t\t'borderDashOffset',\n\t\t\t'borderJoinStyle',\n\t\t\t'fill',\n\t\t\t'cubicInterpolationMode'\n\t\t];\n\n\t\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\t\tkey = keys[i];\n\t\t\tvalues[key] = resolve$4([\n\t\t\t\tcustom[key],\n\t\t\t\tdataset[key],\n\t\t\t\telementOptions[key]\n\t\t\t]);\n\t\t}\n\n\t\t// The default behavior of lines is to break at null values, according\n\t\t// to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158\n\t\t// This option gives lines the ability to span gaps\n\t\tvalues.spanGaps = valueOrDefault$5(dataset.spanGaps, options.spanGaps);\n\t\tvalues.tension = valueOrDefault$5(dataset.lineTension, elementOptions.tension);\n\t\tvalues.steppedLine = resolve$4([custom.steppedLine, dataset.steppedLine, elementOptions.stepped]);\n\n\t\treturn values;\n\t},\n\n\tcalculatePointY: function(value, index, datasetIndex) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar meta = me.getMeta();\n\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\tvar sumPos = 0;\n\t\tvar sumNeg = 0;\n\t\tvar i, ds, dsMeta;\n\n\t\tif (yScale.options.stacked) {\n\t\t\tfor (i = 0; i < datasetIndex; i++) {\n\t\t\t\tds = chart.data.datasets[i];\n\t\t\t\tdsMeta = chart.getDatasetMeta(i);\n\t\t\t\tif (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i)) {\n\t\t\t\t\tvar stackedRightValue = Number(yScale.getRightValue(ds.data[index]));\n\t\t\t\t\tif (stackedRightValue < 0) {\n\t\t\t\t\t\tsumNeg += stackedRightValue || 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsumPos += stackedRightValue || 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar rightValue = Number(yScale.getRightValue(value));\n\t\t\tif (rightValue < 0) {\n\t\t\t\treturn yScale.getPixelForValue(sumNeg + rightValue);\n\t\t\t}\n\t\t\treturn yScale.getPixelForValue(sumPos + rightValue);\n\t\t}\n\n\t\treturn yScale.getPixelForValue(value);\n\t},\n\n\tupdateBezierControlPoints: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar meta = me.getMeta();\n\t\tvar lineModel = meta.dataset._model;\n\t\tvar area = chart.chartArea;\n\t\tvar points = meta.data || [];\n\t\tvar i, ilen, model, controlPoints;\n\n\t\t// Only consider points that are drawn in case the spanGaps option is used\n\t\tif (lineModel.spanGaps) {\n\t\t\tpoints = points.filter(function(pt) {\n\t\t\t\treturn !pt._model.skip;\n\t\t\t});\n\t\t}\n\n\t\tfunction capControlPoint(pt, min, max) {\n\t\t\treturn Math.max(Math.min(pt, max), min);\n\t\t}\n\n\t\tif (lineModel.cubicInterpolationMode === 'monotone') {\n\t\t\thelpers$1.splineCurveMonotone(points);\n\t\t} else {\n\t\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\t\tmodel = points[i]._model;\n\t\t\t\tcontrolPoints = helpers$1.splineCurve(\n\t\t\t\t\thelpers$1.previousItem(points, i)._model,\n\t\t\t\t\tmodel,\n\t\t\t\t\thelpers$1.nextItem(points, i)._model,\n\t\t\t\t\tlineModel.tension\n\t\t\t\t);\n\t\t\t\tmodel.controlPointPreviousX = controlPoints.previous.x;\n\t\t\t\tmodel.controlPointPreviousY = controlPoints.previous.y;\n\t\t\t\tmodel.controlPointNextX = controlPoints.next.x;\n\t\t\t\tmodel.controlPointNextY = controlPoints.next.y;\n\t\t\t}\n\t\t}\n\n\t\tif (chart.options.elements.line.capBezierPoints) {\n\t\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\t\tmodel = points[i]._model;\n\t\t\t\tif (isPointInArea(model, area)) {\n\t\t\t\t\tif (i > 0 && isPointInArea(points[i - 1]._model, area)) {\n\t\t\t\t\t\tmodel.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);\n\t\t\t\t\t\tmodel.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);\n\t\t\t\t\t}\n\t\t\t\t\tif (i < points.length - 1 && isPointInArea(points[i + 1]._model, area)) {\n\t\t\t\t\t\tmodel.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);\n\t\t\t\t\t\tmodel.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tdraw: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar meta = me.getMeta();\n\t\tvar points = meta.data || [];\n\t\tvar area = chart.chartArea;\n\t\tvar ilen = points.length;\n\t\tvar halfBorderWidth;\n\t\tvar i = 0;\n\n\t\tif (lineEnabled(me.getDataset(), chart.options)) {\n\t\t\thalfBorderWidth = (meta.dataset._model.borderWidth || 0) / 2;\n\n\t\t\thelpers$1.canvas.clipArea(chart.ctx, {\n\t\t\t\tleft: area.left,\n\t\t\t\tright: area.right,\n\t\t\t\ttop: area.top - halfBorderWidth,\n\t\t\t\tbottom: area.bottom + halfBorderWidth\n\t\t\t});\n\n\t\t\tmeta.dataset.draw();\n\n\t\t\thelpers$1.canvas.unclipArea(chart.ctx);\n\t\t}\n\n\t\t// Draw the points\n\t\tfor (; i < ilen; ++i) {\n\t\t\tpoints[i].draw(area);\n\t\t}\n\t},\n\n\t/**\n\t * @protected\n\t */\n\tsetHoverStyle: function(point) {\n\t\tvar model = point._model;\n\t\tvar options = point._options;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\n\t\tpoint.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth,\n\t\t\tradius: model.radius\n\t\t};\n\n\t\tmodel.backgroundColor = valueOrDefault$5(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n\t\tmodel.borderColor = valueOrDefault$5(options.hoverBorderColor, getHoverColor(options.borderColor));\n\t\tmodel.borderWidth = valueOrDefault$5(options.hoverBorderWidth, options.borderWidth);\n\t\tmodel.radius = valueOrDefault$5(options.hoverRadius, options.radius);\n\t},\n});\n\nvar resolve$5 = helpers$1.options.resolve;\n\ncore_defaults._set('polarArea', {\n\tscale: {\n\t\ttype: 'radialLinear',\n\t\tangleLines: {\n\t\t\tdisplay: false\n\t\t},\n\t\tgridLines: {\n\t\t\tcircular: true\n\t\t},\n\t\tpointLabels: {\n\t\t\tdisplay: false\n\t\t},\n\t\tticks: {\n\t\t\tbeginAtZero: true\n\t\t}\n\t},\n\n\t// Boolean - Whether to animate the rotation of the chart\n\tanimation: {\n\t\tanimateRotate: true,\n\t\tanimateScale: true\n\t},\n\n\tstartAngle: -0.5 * Math.PI,\n\tlegendCallback: function(chart) {\n\t\tvar text = [];\n\t\ttext.push('<ul class=\"' + chart.id + '-legend\">');\n\n\t\tvar data = chart.data;\n\t\tvar datasets = data.datasets;\n\t\tvar labels = data.labels;\n\n\t\tif (datasets.length) {\n\t\t\tfor (var i = 0; i < datasets[0].data.length; ++i) {\n\t\t\t\ttext.push('<li><span style=\"background-color:' + datasets[0].backgroundColor[i] + '\"></span>');\n\t\t\t\tif (labels[i]) {\n\t\t\t\t\ttext.push(labels[i]);\n\t\t\t\t}\n\t\t\t\ttext.push('</li>');\n\t\t\t}\n\t\t}\n\n\t\ttext.push('</ul>');\n\t\treturn text.join('');\n\t},\n\tlegend: {\n\t\tlabels: {\n\t\t\tgenerateLabels: function(chart) {\n\t\t\t\tvar data = chart.data;\n\t\t\t\tif (data.labels.length && data.datasets.length) {\n\t\t\t\t\treturn data.labels.map(function(label, i) {\n\t\t\t\t\t\tvar meta = chart.getDatasetMeta(0);\n\t\t\t\t\t\tvar ds = data.datasets[0];\n\t\t\t\t\t\tvar arc = meta.data[i];\n\t\t\t\t\t\tvar custom = arc.custom || {};\n\t\t\t\t\t\tvar arcOpts = chart.options.elements.arc;\n\t\t\t\t\t\tvar fill = resolve$5([custom.backgroundColor, ds.backgroundColor, arcOpts.backgroundColor], undefined, i);\n\t\t\t\t\t\tvar stroke = resolve$5([custom.borderColor, ds.borderColor, arcOpts.borderColor], undefined, i);\n\t\t\t\t\t\tvar bw = resolve$5([custom.borderWidth, ds.borderWidth, arcOpts.borderWidth], undefined, i);\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttext: label,\n\t\t\t\t\t\t\tfillStyle: fill,\n\t\t\t\t\t\t\tstrokeStyle: stroke,\n\t\t\t\t\t\t\tlineWidth: bw,\n\t\t\t\t\t\t\thidden: isNaN(ds.data[i]) || meta.data[i].hidden,\n\n\t\t\t\t\t\t\t// Extra data used for toggling the correct item\n\t\t\t\t\t\t\tindex: i\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t}\n\t\t},\n\n\t\tonClick: function(e, legendItem) {\n\t\t\tvar index = legendItem.index;\n\t\t\tvar chart = this.chart;\n\t\t\tvar i, ilen, meta;\n\n\t\t\tfor (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n\t\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\t\tmeta.data[index].hidden = !meta.data[index].hidden;\n\t\t\t}\n\n\t\t\tchart.update();\n\t\t}\n\t},\n\n\t// Need to override these to give a nice default\n\ttooltips: {\n\t\tcallbacks: {\n\t\t\ttitle: function() {\n\t\t\t\treturn '';\n\t\t\t},\n\t\t\tlabel: function(item, data) {\n\t\t\t\treturn data.labels[item.index] + ': ' + item.yLabel;\n\t\t\t}\n\t\t}\n\t}\n});\n\nvar controller_polarArea = core_datasetController.extend({\n\n\tdataElementType: elements.Arc,\n\n\tlinkScales: helpers$1.noop,\n\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar dataset = me.getDataset();\n\t\tvar meta = me.getMeta();\n\t\tvar start = me.chart.options.startAngle || 0;\n\t\tvar starts = me._starts = [];\n\t\tvar angles = me._angles = [];\n\t\tvar arcs = meta.data;\n\t\tvar i, ilen, angle;\n\n\t\tme._updateRadius();\n\n\t\tmeta.count = me.countVisibleElements();\n\n\t\tfor (i = 0, ilen = dataset.data.length; i < ilen; i++) {\n\t\t\tstarts[i] = start;\n\t\t\tangle = me._computeAngle(i);\n\t\t\tangles[i] = angle;\n\t\t\tstart += angle;\n\t\t}\n\n\t\tfor (i = 0, ilen = arcs.length; i < ilen; ++i) {\n\t\t\tarcs[i]._options = me._resolveElementOptions(arcs[i], i);\n\t\t\tme.updateElement(arcs[i], i, reset);\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_updateRadius: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar chartArea = chart.chartArea;\n\t\tvar opts = chart.options;\n\t\tvar minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n\t\tchart.outerRadius = Math.max(minSize / 2, 0);\n\t\tchart.innerRadius = Math.max(opts.cutoutPercentage ? (chart.outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n\t\tchart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();\n\n\t\tme.outerRadius = chart.outerRadius - (chart.radiusLength * me.index);\n\t\tme.innerRadius = me.outerRadius - chart.radiusLength;\n\t},\n\n\tupdateElement: function(arc, index, reset) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar dataset = me.getDataset();\n\t\tvar opts = chart.options;\n\t\tvar animationOpts = opts.animation;\n\t\tvar scale = chart.scale;\n\t\tvar labels = chart.data.labels;\n\n\t\tvar centerX = scale.xCenter;\n\t\tvar centerY = scale.yCenter;\n\n\t\t// var negHalfPI = -0.5 * Math.PI;\n\t\tvar datasetStartAngle = opts.startAngle;\n\t\tvar distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);\n\t\tvar startAngle = me._starts[index];\n\t\tvar endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);\n\n\t\tvar resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);\n\t\tvar options = arc._options || {};\n\n\t\thelpers$1.extend(arc, {\n\t\t\t// Utility\n\t\t\t_datasetIndex: me.index,\n\t\t\t_index: index,\n\t\t\t_scale: scale,\n\n\t\t\t// Desired view properties\n\t\t\t_model: {\n\t\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\t\tborderColor: options.borderColor,\n\t\t\t\tborderWidth: options.borderWidth,\n\t\t\t\tborderAlign: options.borderAlign,\n\t\t\t\tx: centerX,\n\t\t\t\ty: centerY,\n\t\t\t\tinnerRadius: 0,\n\t\t\t\touterRadius: reset ? resetRadius : distance,\n\t\t\t\tstartAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,\n\t\t\t\tendAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,\n\t\t\t\tlabel: helpers$1.valueAtIndexOrDefault(labels, index, labels[index])\n\t\t\t}\n\t\t});\n\n\t\tarc.pivot();\n\t},\n\n\tcountVisibleElements: function() {\n\t\tvar dataset = this.getDataset();\n\t\tvar meta = this.getMeta();\n\t\tvar count = 0;\n\n\t\thelpers$1.each(meta.data, function(element, index) {\n\t\t\tif (!isNaN(dataset.data[index]) && !element.hidden) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t});\n\n\t\treturn count;\n\t},\n\n\t/**\n\t * @protected\n\t */\n\tsetHoverStyle: function(arc) {\n\t\tvar model = arc._model;\n\t\tvar options = arc._options;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\t\tvar valueOrDefault = helpers$1.valueOrDefault;\n\n\t\tarc.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth,\n\t\t};\n\n\t\tmodel.backgroundColor = valueOrDefault(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n\t\tmodel.borderColor = valueOrDefault(options.hoverBorderColor, getHoverColor(options.borderColor));\n\t\tmodel.borderWidth = valueOrDefault(options.hoverBorderWidth, options.borderWidth);\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveElementOptions: function(arc, index) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar dataset = me.getDataset();\n\t\tvar custom = arc.custom || {};\n\t\tvar options = chart.options.elements.arc;\n\t\tvar values = {};\n\t\tvar i, ilen, key;\n\n\t\t// Scriptable options\n\t\tvar context = {\n\t\t\tchart: chart,\n\t\t\tdataIndex: index,\n\t\t\tdataset: dataset,\n\t\t\tdatasetIndex: me.index\n\t\t};\n\n\t\tvar keys = [\n\t\t\t'backgroundColor',\n\t\t\t'borderColor',\n\t\t\t'borderWidth',\n\t\t\t'borderAlign',\n\t\t\t'hoverBackgroundColor',\n\t\t\t'hoverBorderColor',\n\t\t\t'hoverBorderWidth',\n\t\t];\n\n\t\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\t\tkey = keys[i];\n\t\t\tvalues[key] = resolve$5([\n\t\t\t\tcustom[key],\n\t\t\t\tdataset[key],\n\t\t\t\toptions[key]\n\t\t\t], context, index);\n\t\t}\n\n\t\treturn values;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_computeAngle: function(index) {\n\t\tvar me = this;\n\t\tvar count = this.getMeta().count;\n\t\tvar dataset = me.getDataset();\n\t\tvar meta = me.getMeta();\n\n\t\tif (isNaN(dataset.data[index]) || meta.data[index].hidden) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Scriptable options\n\t\tvar context = {\n\t\t\tchart: me.chart,\n\t\t\tdataIndex: index,\n\t\t\tdataset: dataset,\n\t\t\tdatasetIndex: me.index\n\t\t};\n\n\t\treturn resolve$5([\n\t\t\tme.chart.options.elements.arc.angle,\n\t\t\t(2 * Math.PI) / count\n\t\t], context, index);\n\t}\n});\n\ncore_defaults._set('pie', helpers$1.clone(core_defaults.doughnut));\ncore_defaults._set('pie', {\n\tcutoutPercentage: 0\n});\n\n// Pie charts are Doughnut chart with different defaults\nvar controller_pie = controller_doughnut;\n\nvar valueOrDefault$6 = helpers$1.valueOrDefault;\nvar resolve$6 = helpers$1.options.resolve;\n\ncore_defaults._set('radar', {\n\tscale: {\n\t\ttype: 'radialLinear'\n\t},\n\telements: {\n\t\tline: {\n\t\t\ttension: 0 // no bezier in radar\n\t\t}\n\t}\n});\n\nvar controller_radar = core_datasetController.extend({\n\n\tdatasetElementType: elements.Line,\n\n\tdataElementType: elements.Point,\n\n\tlinkScales: helpers$1.noop,\n\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar line = meta.dataset;\n\t\tvar points = meta.data || [];\n\t\tvar scale = me.chart.scale;\n\t\tvar dataset = me.getDataset();\n\t\tvar i, ilen;\n\n\t\t// Compatibility: If the properties are defined with only the old name, use those values\n\t\tif ((dataset.tension !== undefined) && (dataset.lineTension === undefined)) {\n\t\t\tdataset.lineTension = dataset.tension;\n\t\t}\n\n\t\t// Utility\n\t\tline._scale = scale;\n\t\tline._datasetIndex = me.index;\n\t\t// Data\n\t\tline._children = points;\n\t\tline._loop = true;\n\t\t// Model\n\t\tline._model = me._resolveLineOptions(line);\n\n\t\tline.pivot();\n\n\t\t// Update Points\n\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\tme.updateElement(points[i], i, reset);\n\t\t}\n\n\t\t// Update bezier control points\n\t\tme.updateBezierControlPoints();\n\n\t\t// Now pivot the point for animation\n\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\tpoints[i].pivot();\n\t\t}\n\t},\n\n\tupdateElement: function(point, index, reset) {\n\t\tvar me = this;\n\t\tvar custom = point.custom || {};\n\t\tvar dataset = me.getDataset();\n\t\tvar scale = me.chart.scale;\n\t\tvar pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);\n\t\tvar options = me._resolvePointOptions(point, index);\n\t\tvar lineModel = me.getMeta().dataset._model;\n\t\tvar x = reset ? scale.xCenter : pointPosition.x;\n\t\tvar y = reset ? scale.yCenter : pointPosition.y;\n\n\t\t// Utility\n\t\tpoint._scale = scale;\n\t\tpoint._options = options;\n\t\tpoint._datasetIndex = me.index;\n\t\tpoint._index = index;\n\n\t\t// Desired view properties\n\t\tpoint._model = {\n\t\t\tx: x, // value not used in dataset scale, but we want a consistent API between scales\n\t\t\ty: y,\n\t\t\tskip: custom.skip || isNaN(x) || isNaN(y),\n\t\t\t// Appearance\n\t\t\tradius: options.radius,\n\t\t\tpointStyle: options.pointStyle,\n\t\t\trotation: options.rotation,\n\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\tborderColor: options.borderColor,\n\t\t\tborderWidth: options.borderWidth,\n\t\t\ttension: valueOrDefault$6(custom.tension, lineModel ? lineModel.tension : 0),\n\n\t\t\t// Tooltip\n\t\t\thitRadius: options.hitRadius\n\t\t};\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolvePointOptions: function(element, index) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar dataset = chart.data.datasets[me.index];\n\t\tvar custom = element.custom || {};\n\t\tvar options = chart.options.elements.point;\n\t\tvar values = {};\n\t\tvar i, ilen, key;\n\n\t\t// Scriptable options\n\t\tvar context = {\n\t\t\tchart: chart,\n\t\t\tdataIndex: index,\n\t\t\tdataset: dataset,\n\t\t\tdatasetIndex: me.index\n\t\t};\n\n\t\tvar ELEMENT_OPTIONS = {\n\t\t\tbackgroundColor: 'pointBackgroundColor',\n\t\t\tborderColor: 'pointBorderColor',\n\t\t\tborderWidth: 'pointBorderWidth',\n\t\t\thitRadius: 'pointHitRadius',\n\t\t\thoverBackgroundColor: 'pointHoverBackgroundColor',\n\t\t\thoverBorderColor: 'pointHoverBorderColor',\n\t\t\thoverBorderWidth: 'pointHoverBorderWidth',\n\t\t\thoverRadius: 'pointHoverRadius',\n\t\t\tpointStyle: 'pointStyle',\n\t\t\tradius: 'pointRadius',\n\t\t\trotation: 'pointRotation'\n\t\t};\n\t\tvar keys = Object.keys(ELEMENT_OPTIONS);\n\n\t\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\t\tkey = keys[i];\n\t\t\tvalues[key] = resolve$6([\n\t\t\t\tcustom[key],\n\t\t\t\tdataset[ELEMENT_OPTIONS[key]],\n\t\t\t\tdataset[key],\n\t\t\t\toptions[key]\n\t\t\t], context, index);\n\t\t}\n\n\t\treturn values;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveLineOptions: function(element) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar dataset = chart.data.datasets[me.index];\n\t\tvar custom = element.custom || {};\n\t\tvar options = chart.options.elements.line;\n\t\tvar values = {};\n\t\tvar i, ilen, key;\n\n\t\tvar keys = [\n\t\t\t'backgroundColor',\n\t\t\t'borderWidth',\n\t\t\t'borderColor',\n\t\t\t'borderCapStyle',\n\t\t\t'borderDash',\n\t\t\t'borderDashOffset',\n\t\t\t'borderJoinStyle',\n\t\t\t'fill'\n\t\t];\n\n\t\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\t\tkey = keys[i];\n\t\t\tvalues[key] = resolve$6([\n\t\t\t\tcustom[key],\n\t\t\t\tdataset[key],\n\t\t\t\toptions[key]\n\t\t\t]);\n\t\t}\n\n\t\tvalues.tension = valueOrDefault$6(dataset.lineTension, options.tension);\n\n\t\treturn values;\n\t},\n\n\tupdateBezierControlPoints: function() {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar area = me.chart.chartArea;\n\t\tvar points = meta.data || [];\n\t\tvar i, ilen, model, controlPoints;\n\n\t\tfunction capControlPoint(pt, min, max) {\n\t\t\treturn Math.max(Math.min(pt, max), min);\n\t\t}\n\n\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\tmodel = points[i]._model;\n\t\t\tcontrolPoints = helpers$1.splineCurve(\n\t\t\t\thelpers$1.previousItem(points, i, true)._model,\n\t\t\t\tmodel,\n\t\t\t\thelpers$1.nextItem(points, i, true)._model,\n\t\t\t\tmodel.tension\n\t\t\t);\n\n\t\t\t// Prevent the bezier going outside of the bounds of the graph\n\t\t\tmodel.controlPointPreviousX = capControlPoint(controlPoints.previous.x, area.left, area.right);\n\t\t\tmodel.controlPointPreviousY = capControlPoint(controlPoints.previous.y, area.top, area.bottom);\n\t\t\tmodel.controlPointNextX = capControlPoint(controlPoints.next.x, area.left, area.right);\n\t\t\tmodel.controlPointNextY = capControlPoint(controlPoints.next.y, area.top, area.bottom);\n\t\t}\n\t},\n\n\tsetHoverStyle: function(point) {\n\t\tvar model = point._model;\n\t\tvar options = point._options;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\n\t\tpoint.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth,\n\t\t\tradius: model.radius\n\t\t};\n\n\t\tmodel.backgroundColor = valueOrDefault$6(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n\t\tmodel.borderColor = valueOrDefault$6(options.hoverBorderColor, getHoverColor(options.borderColor));\n\t\tmodel.borderWidth = valueOrDefault$6(options.hoverBorderWidth, options.borderWidth);\n\t\tmodel.radius = valueOrDefault$6(options.hoverRadius, options.radius);\n\t}\n});\n\ncore_defaults._set('scatter', {\n\thover: {\n\t\tmode: 'single'\n\t},\n\n\tscales: {\n\t\txAxes: [{\n\t\t\tid: 'x-axis-1',    // need an ID so datasets can reference the scale\n\t\t\ttype: 'linear',    // scatter should not use a category axis\n\t\t\tposition: 'bottom'\n\t\t}],\n\t\tyAxes: [{\n\t\t\tid: 'y-axis-1',\n\t\t\ttype: 'linear',\n\t\t\tposition: 'left'\n\t\t}]\n\t},\n\n\tshowLines: false,\n\n\ttooltips: {\n\t\tcallbacks: {\n\t\t\ttitle: function() {\n\t\t\t\treturn '';     // doesn't make sense for scatter since data are formatted as a point\n\t\t\t},\n\t\t\tlabel: function(item) {\n\t\t\t\treturn '(' + item.xLabel + ', ' + item.yLabel + ')';\n\t\t\t}\n\t\t}\n\t}\n});\n\n// Scatter charts use line controllers\nvar controller_scatter = controller_line;\n\n// NOTE export a map in which the key represents the controller type, not\n// the class, and so must be CamelCase in order to be correctly retrieved\n// by the controller in core.controller.js (`controllers[meta.type]`).\n\nvar controllers = {\n\tbar: controller_bar,\n\tbubble: controller_bubble,\n\tdoughnut: controller_doughnut,\n\thorizontalBar: controller_horizontalBar,\n\tline: controller_line,\n\tpolarArea: controller_polarArea,\n\tpie: controller_pie,\n\tradar: controller_radar,\n\tscatter: controller_scatter\n};\n\n/**\n * Helper function to get relative position for an event\n * @param {Event|IEvent} event - The event to get the position for\n * @param {Chart} chart - The chart\n * @returns {object} the event position\n */\nfunction getRelativePosition(e, chart) {\n\tif (e.native) {\n\t\treturn {\n\t\t\tx: e.x,\n\t\t\ty: e.y\n\t\t};\n\t}\n\n\treturn helpers$1.getRelativePosition(e, chart);\n}\n\n/**\n * Helper function to traverse all of the visible elements in the chart\n * @param {Chart} chart - the chart\n * @param {function} handler - the callback to execute for each visible item\n */\nfunction parseVisibleItems(chart, handler) {\n\tvar datasets = chart.data.datasets;\n\tvar meta, i, j, ilen, jlen;\n\n\tfor (i = 0, ilen = datasets.length; i < ilen; ++i) {\n\t\tif (!chart.isDatasetVisible(i)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tmeta = chart.getDatasetMeta(i);\n\t\tfor (j = 0, jlen = meta.data.length; j < jlen; ++j) {\n\t\t\tvar element = meta.data[j];\n\t\t\tif (!element._view.skip) {\n\t\t\t\thandler(element);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {ChartElement[]} items - elements to filter\n * @param {object} position - the point to be nearest to\n * @return {ChartElement[]} the nearest items\n */\nfunction getIntersectItems(chart, position) {\n\tvar elements = [];\n\n\tparseVisibleItems(chart, function(element) {\n\t\tif (element.inRange(position.x, position.y)) {\n\t\t\telements.push(element);\n\t\t}\n\t});\n\n\treturn elements;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in teh chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {object} position - the point to be nearest to\n * @param {boolean} intersect - if true, only consider items that intersect the position\n * @param {function} distanceMetric - function to provide the distance between points\n * @return {ChartElement[]} the nearest items\n */\nfunction getNearestItems(chart, position, intersect, distanceMetric) {\n\tvar minDistance = Number.POSITIVE_INFINITY;\n\tvar nearestItems = [];\n\n\tparseVisibleItems(chart, function(element) {\n\t\tif (intersect && !element.inRange(position.x, position.y)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar center = element.getCenterPoint();\n\t\tvar distance = distanceMetric(position, center);\n\t\tif (distance < minDistance) {\n\t\t\tnearestItems = [element];\n\t\t\tminDistance = distance;\n\t\t} else if (distance === minDistance) {\n\t\t\t// Can have multiple items at the same distance in which case we sort by size\n\t\t\tnearestItems.push(element);\n\t\t}\n\t});\n\n\treturn nearestItems;\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy\n */\nfunction getDistanceMetricForAxis(axis) {\n\tvar useX = axis.indexOf('x') !== -1;\n\tvar useY = axis.indexOf('y') !== -1;\n\n\treturn function(pt1, pt2) {\n\t\tvar deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n\t\tvar deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n\t\treturn Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n\t};\n}\n\nfunction indexMode(chart, e, options) {\n\tvar position = getRelativePosition(e, chart);\n\t// Default axis for index mode is 'x' to match old behaviour\n\toptions.axis = options.axis || 'x';\n\tvar distanceMetric = getDistanceMetricForAxis(options.axis);\n\tvar items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);\n\tvar elements = [];\n\n\tif (!items.length) {\n\t\treturn [];\n\t}\n\n\tchart.data.datasets.forEach(function(dataset, datasetIndex) {\n\t\tif (chart.isDatasetVisible(datasetIndex)) {\n\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\tvar element = meta.data[items[0]._index];\n\n\t\t\t// don't count items that are skipped (null data)\n\t\t\tif (element && !element._view.skip) {\n\t\t\t\telements.push(element);\n\t\t\t}\n\t\t}\n\t});\n\n\treturn elements;\n}\n\n/**\n * @interface IInteractionOptions\n */\n/**\n * If true, only consider items that intersect the point\n * @name IInterfaceOptions#boolean\n * @type Boolean\n */\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nvar core_interaction = {\n\t// Helper function for different modes\n\tmodes: {\n\t\tsingle: function(chart, e) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\tvar elements = [];\n\n\t\t\tparseVisibleItems(chart, function(element) {\n\t\t\t\tif (element.inRange(position.x, position.y)) {\n\t\t\t\t\telements.push(element);\n\t\t\t\t\treturn elements;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn elements.slice(0, 1);\n\t\t},\n\n\t\t/**\n\t\t * @function Chart.Interaction.modes.label\n\t\t * @deprecated since version 2.4.0\n\t\t * @todo remove at version 3\n\t\t * @private\n\t\t */\n\t\tlabel: indexMode,\n\n\t\t/**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use during interaction\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\tindex: indexMode,\n\n\t\t/**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use during interaction\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\tdataset: function(chart, e, options) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\toptions.axis = options.axis || 'xy';\n\t\t\tvar distanceMetric = getDistanceMetricForAxis(options.axis);\n\t\t\tvar items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);\n\n\t\t\tif (items.length > 0) {\n\t\t\t\titems = chart.getDatasetMeta(items[0]._datasetIndex).data;\n\t\t\t}\n\n\t\t\treturn items;\n\t\t},\n\n\t\t/**\n\t\t * @function Chart.Interaction.modes.x-axis\n\t\t * @deprecated since version 2.4.0. Use index mode and intersect == true\n\t\t * @todo remove at version 3\n\t\t * @private\n\t\t */\n\t\t'x-axis': function(chart, e) {\n\t\t\treturn indexMode(chart, e, {intersect: false});\n\t\t},\n\n\t\t/**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\tpoint: function(chart, e) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\treturn getIntersectItems(chart, position);\n\t\t},\n\n\t\t/**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\tnearest: function(chart, e, options) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\toptions.axis = options.axis || 'xy';\n\t\t\tvar distanceMetric = getDistanceMetricForAxis(options.axis);\n\t\t\treturn getNearestItems(chart, position, options.intersect, distanceMetric);\n\t\t},\n\n\t\t/**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\tx: function(chart, e, options) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\tvar items = [];\n\t\t\tvar intersectsItem = false;\n\n\t\t\tparseVisibleItems(chart, function(element) {\n\t\t\t\tif (element.inXRange(position.x)) {\n\t\t\t\t\titems.push(element);\n\t\t\t\t}\n\n\t\t\t\tif (element.inRange(position.x, position.y)) {\n\t\t\t\t\tintersectsItem = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// If we want to trigger on an intersect and we don't have any items\n\t\t\t// that intersect the position, return nothing\n\t\t\tif (options.intersect && !intersectsItem) {\n\t\t\t\titems = [];\n\t\t\t}\n\t\t\treturn items;\n\t\t},\n\n\t\t/**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\ty: function(chart, e, options) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\tvar items = [];\n\t\t\tvar intersectsItem = false;\n\n\t\t\tparseVisibleItems(chart, function(element) {\n\t\t\t\tif (element.inYRange(position.y)) {\n\t\t\t\t\titems.push(element);\n\t\t\t\t}\n\n\t\t\t\tif (element.inRange(position.x, position.y)) {\n\t\t\t\t\tintersectsItem = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// If we want to trigger on an intersect and we don't have any items\n\t\t\t// that intersect the position, return nothing\n\t\t\tif (options.intersect && !intersectsItem) {\n\t\t\t\titems = [];\n\t\t\t}\n\t\t\treturn items;\n\t\t}\n\t}\n};\n\nfunction filterByPosition(array, position) {\n\treturn helpers$1.where(array, function(v) {\n\t\treturn v.position === position;\n\t});\n}\n\nfunction sortByWeight(array, reverse) {\n\tarray.forEach(function(v, i) {\n\t\tv._tmpIndex_ = i;\n\t\treturn v;\n\t});\n\tarray.sort(function(a, b) {\n\t\tvar v0 = reverse ? b : a;\n\t\tvar v1 = reverse ? a : b;\n\t\treturn v0.weight === v1.weight ?\n\t\t\tv0._tmpIndex_ - v1._tmpIndex_ :\n\t\t\tv0.weight - v1.weight;\n\t});\n\tarray.forEach(function(v) {\n\t\tdelete v._tmpIndex_;\n\t});\n}\n\nfunction findMaxPadding(boxes) {\n\tvar top = 0;\n\tvar left = 0;\n\tvar bottom = 0;\n\tvar right = 0;\n\thelpers$1.each(boxes, function(box) {\n\t\tif (box.getPadding) {\n\t\t\tvar boxPadding = box.getPadding();\n\t\t\ttop = Math.max(top, boxPadding.top);\n\t\t\tleft = Math.max(left, boxPadding.left);\n\t\t\tbottom = Math.max(bottom, boxPadding.bottom);\n\t\t\tright = Math.max(right, boxPadding.right);\n\t\t}\n\t});\n\treturn {\n\t\ttop: top,\n\t\tleft: left,\n\t\tbottom: bottom,\n\t\tright: right\n\t};\n}\n\nfunction addSizeByPosition(boxes, size) {\n\thelpers$1.each(boxes, function(box) {\n\t\tsize[box.position] += box.isHorizontal() ? box.height : box.width;\n\t});\n}\n\ncore_defaults._set('global', {\n\tlayout: {\n\t\tpadding: {\n\t\t\ttop: 0,\n\t\t\tright: 0,\n\t\t\tbottom: 0,\n\t\t\tleft: 0\n\t\t}\n\t}\n});\n\n/**\n * @interface ILayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} getPadding -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nvar core_layouts = {\n\tdefaults: {},\n\n\t/**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {ILayoutItem} item - the item to add to be layed out\n\t */\n\taddBox: function(chart, item) {\n\t\tif (!chart.boxes) {\n\t\t\tchart.boxes = [];\n\t\t}\n\n\t\t// initialize item with default values\n\t\titem.fullWidth = item.fullWidth || false;\n\t\titem.position = item.position || 'top';\n\t\titem.weight = item.weight || 0;\n\n\t\tchart.boxes.push(item);\n\t},\n\n\t/**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {ILayoutItem} layoutItem - the item to remove from the layout\n\t */\n\tremoveBox: function(chart, layoutItem) {\n\t\tvar index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n\t\tif (index !== -1) {\n\t\t\tchart.boxes.splice(index, 1);\n\t\t}\n\t},\n\n\t/**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {ILayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n\tconfigure: function(chart, item, options) {\n\t\tvar props = ['fullWidth', 'position', 'weight'];\n\t\tvar ilen = props.length;\n\t\tvar i = 0;\n\t\tvar prop;\n\n\t\tfor (; i < ilen; ++i) {\n\t\t\tprop = props[i];\n\t\t\tif (options.hasOwnProperty(prop)) {\n\t\t\t\titem[prop] = options[prop];\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n\t */\n\tupdate: function(chart, width, height) {\n\t\tif (!chart) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar layoutOptions = chart.options.layout || {};\n\t\tvar padding = helpers$1.options.toPadding(layoutOptions.padding);\n\t\tvar leftPadding = padding.left;\n\t\tvar rightPadding = padding.right;\n\t\tvar topPadding = padding.top;\n\t\tvar bottomPadding = padding.bottom;\n\n\t\tvar leftBoxes = filterByPosition(chart.boxes, 'left');\n\t\tvar rightBoxes = filterByPosition(chart.boxes, 'right');\n\t\tvar topBoxes = filterByPosition(chart.boxes, 'top');\n\t\tvar bottomBoxes = filterByPosition(chart.boxes, 'bottom');\n\t\tvar chartAreaBoxes = filterByPosition(chart.boxes, 'chartArea');\n\n\t\t// Sort boxes by weight. A higher weight is further away from the chart area\n\t\tsortByWeight(leftBoxes, true);\n\t\tsortByWeight(rightBoxes, false);\n\t\tsortByWeight(topBoxes, true);\n\t\tsortByWeight(bottomBoxes, false);\n\n\t\tvar verticalBoxes = leftBoxes.concat(rightBoxes);\n\t\tvar horizontalBoxes = topBoxes.concat(bottomBoxes);\n\t\tvar outerBoxes = verticalBoxes.concat(horizontalBoxes);\n\n\t\t// Essentially we now have any number of boxes on each of the 4 sides.\n\t\t// Our canvas looks like the following.\n\t\t// The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n\t\t// B1 is the bottom axis\n\t\t// There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n\t\t// These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n\t\t// an error will be thrown.\n\t\t//\n\t\t// |----------------------------------------------------|\n\t\t// |                  T1 (Full Width)                   |\n\t\t// |----------------------------------------------------|\n\t\t// |    |    |                 T2                  |    |\n\t\t// |    |----|-------------------------------------|----|\n\t\t// |    |    | C1 |                           | C2 |    |\n\t\t// |    |    |----|                           |----|    |\n\t\t// |    |    |                                     |    |\n\t\t// | L1 | L2 |           ChartArea (C0)            | R1 |\n\t\t// |    |    |                                     |    |\n\t\t// |    |    |----|                           |----|    |\n\t\t// |    |    | C3 |                           | C4 |    |\n\t\t// |    |----|-------------------------------------|----|\n\t\t// |    |    |                 B1                  |    |\n\t\t// |----------------------------------------------------|\n\t\t// |                  B2 (Full Width)                   |\n\t\t// |----------------------------------------------------|\n\t\t//\n\t\t// What we do to find the best sizing, we do the following\n\t\t// 1. Determine the minimum size of the chart area.\n\t\t// 2. Split the remaining width equally between each vertical axis\n\t\t// 3. Split the remaining height equally between each horizontal axis\n\t\t// 4. Give each layout the maximum size it can be. The layout will return it's minimum size\n\t\t// 5. Adjust the sizes of each axis based on it's minimum reported size.\n\t\t// 6. Refit each axis\n\t\t// 7. Position each axis in the final location\n\t\t// 8. Tell the chart the final location of the chart area\n\t\t// 9. Tell any axes that overlay the chart area the positions of the chart area\n\n\t\t// Step 1\n\t\tvar chartWidth = width - leftPadding - rightPadding;\n\t\tvar chartHeight = height - topPadding - bottomPadding;\n\t\tvar chartAreaWidth = chartWidth / 2; // min 50%\n\n\t\t// Step 2\n\t\tvar verticalBoxWidth = (width - chartAreaWidth) / verticalBoxes.length;\n\n\t\t// Step 3\n\t\t// TODO re-limit horizontal axis height (this limit has affected only padding calculation since PR 1837)\n\t\t// var horizontalBoxHeight = (height - chartAreaHeight) / horizontalBoxes.length;\n\n\t\t// Step 4\n\t\tvar maxChartAreaWidth = chartWidth;\n\t\tvar maxChartAreaHeight = chartHeight;\n\t\tvar outerBoxSizes = {top: topPadding, left: leftPadding, bottom: bottomPadding, right: rightPadding};\n\t\tvar minBoxSizes = [];\n\t\tvar maxPadding;\n\n\t\tfunction getMinimumBoxSize(box) {\n\t\t\tvar minSize;\n\t\t\tvar isHorizontal = box.isHorizontal();\n\n\t\t\tif (isHorizontal) {\n\t\t\t\tminSize = box.update(box.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2);\n\t\t\t\tmaxChartAreaHeight -= minSize.height;\n\t\t\t} else {\n\t\t\t\tminSize = box.update(verticalBoxWidth, maxChartAreaHeight);\n\t\t\t\tmaxChartAreaWidth -= minSize.width;\n\t\t\t}\n\n\t\t\tminBoxSizes.push({\n\t\t\t\thorizontal: isHorizontal,\n\t\t\t\twidth: minSize.width,\n\t\t\t\tbox: box,\n\t\t\t});\n\t\t}\n\n\t\thelpers$1.each(outerBoxes, getMinimumBoxSize);\n\n\t\t// If a horizontal box has padding, we move the left boxes over to avoid ugly charts (see issue #2478)\n\t\tmaxPadding = findMaxPadding(outerBoxes);\n\n\t\t// At this point, maxChartAreaHeight and maxChartAreaWidth are the size the chart area could\n\t\t// be if the axes are drawn at their minimum sizes.\n\t\t// Steps 5 & 6\n\n\t\t// Function to fit a box\n\t\tfunction fitBox(box) {\n\t\t\tvar minBoxSize = helpers$1.findNextWhere(minBoxSizes, function(minBox) {\n\t\t\t\treturn minBox.box === box;\n\t\t\t});\n\n\t\t\tif (minBoxSize) {\n\t\t\t\tif (minBoxSize.horizontal) {\n\t\t\t\t\tvar scaleMargin = {\n\t\t\t\t\t\tleft: Math.max(outerBoxSizes.left, maxPadding.left),\n\t\t\t\t\t\tright: Math.max(outerBoxSizes.right, maxPadding.right),\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tbottom: 0\n\t\t\t\t\t};\n\n\t\t\t\t\t// Don't use min size here because of label rotation. When the labels are rotated, their rotation highly depends\n\t\t\t\t\t// on the margin. Sometimes they need to increase in size slightly\n\t\t\t\t\tbox.update(box.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);\n\t\t\t\t} else {\n\t\t\t\t\tbox.update(minBoxSize.width, maxChartAreaHeight);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Update, and calculate the left and right margins for the horizontal boxes\n\t\thelpers$1.each(verticalBoxes, fitBox);\n\t\taddSizeByPosition(verticalBoxes, outerBoxSizes);\n\n\t\t// Set the Left and Right margins for the horizontal boxes\n\t\thelpers$1.each(horizontalBoxes, fitBox);\n\t\taddSizeByPosition(horizontalBoxes, outerBoxSizes);\n\n\t\tfunction finalFitVerticalBox(box) {\n\t\t\tvar minBoxSize = helpers$1.findNextWhere(minBoxSizes, function(minSize) {\n\t\t\t\treturn minSize.box === box;\n\t\t\t});\n\n\t\t\tvar scaleMargin = {\n\t\t\t\tleft: 0,\n\t\t\t\tright: 0,\n\t\t\t\ttop: outerBoxSizes.top,\n\t\t\t\tbottom: outerBoxSizes.bottom\n\t\t\t};\n\n\t\t\tif (minBoxSize) {\n\t\t\t\tbox.update(minBoxSize.width, maxChartAreaHeight, scaleMargin);\n\t\t\t}\n\t\t}\n\n\t\t// Let the left layout know the final margin\n\t\thelpers$1.each(verticalBoxes, finalFitVerticalBox);\n\n\t\t// Recalculate because the size of each layout might have changed slightly due to the margins (label rotation for instance)\n\t\touterBoxSizes = {top: topPadding, left: leftPadding, bottom: bottomPadding, right: rightPadding};\n\t\taddSizeByPosition(outerBoxes, outerBoxSizes);\n\n\t\t// We may be adding some padding to account for rotated x axis labels\n\t\tvar leftPaddingAddition = Math.max(maxPadding.left - outerBoxSizes.left, 0);\n\t\touterBoxSizes.left += leftPaddingAddition;\n\t\touterBoxSizes.right += Math.max(maxPadding.right - outerBoxSizes.right, 0);\n\n\t\tvar topPaddingAddition = Math.max(maxPadding.top - outerBoxSizes.top, 0);\n\t\touterBoxSizes.top += topPaddingAddition;\n\t\touterBoxSizes.bottom += Math.max(maxPadding.bottom - outerBoxSizes.bottom, 0);\n\n\t\t// Figure out if our chart area changed. This would occur if the dataset layout label rotation\n\t\t// changed due to the application of the margins in step 6. Since we can only get bigger, this is safe to do\n\t\t// without calling `fit` again\n\t\tvar newMaxChartAreaHeight = height - outerBoxSizes.top - outerBoxSizes.bottom;\n\t\tvar newMaxChartAreaWidth = width - outerBoxSizes.left - outerBoxSizes.right;\n\n\t\tif (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {\n\t\t\thelpers$1.each(verticalBoxes, function(box) {\n\t\t\t\tbox.height = newMaxChartAreaHeight;\n\t\t\t});\n\n\t\t\thelpers$1.each(horizontalBoxes, function(box) {\n\t\t\t\tif (!box.fullWidth) {\n\t\t\t\t\tbox.width = newMaxChartAreaWidth;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tmaxChartAreaHeight = newMaxChartAreaHeight;\n\t\t\tmaxChartAreaWidth = newMaxChartAreaWidth;\n\t\t}\n\n\t\t// Step 7 - Position the boxes\n\t\tvar left = leftPadding + leftPaddingAddition;\n\t\tvar top = topPadding + topPaddingAddition;\n\n\t\tfunction placeBox(box) {\n\t\t\tif (box.isHorizontal()) {\n\t\t\t\tbox.left = box.fullWidth ? leftPadding : outerBoxSizes.left;\n\t\t\t\tbox.right = box.fullWidth ? width - rightPadding : outerBoxSizes.left + maxChartAreaWidth;\n\t\t\t\tbox.top = top;\n\t\t\t\tbox.bottom = top + box.height;\n\n\t\t\t\t// Move to next point\n\t\t\t\ttop = box.bottom;\n\n\t\t\t} else {\n\n\t\t\t\tbox.left = left;\n\t\t\t\tbox.right = left + box.width;\n\t\t\t\tbox.top = outerBoxSizes.top;\n\t\t\t\tbox.bottom = outerBoxSizes.top + maxChartAreaHeight;\n\n\t\t\t\t// Move to next point\n\t\t\t\tleft = box.right;\n\t\t\t}\n\t\t}\n\n\t\thelpers$1.each(leftBoxes.concat(topBoxes), placeBox);\n\n\t\t// Account for chart width and height\n\t\tleft += maxChartAreaWidth;\n\t\ttop += maxChartAreaHeight;\n\n\t\thelpers$1.each(rightBoxes, placeBox);\n\t\thelpers$1.each(bottomBoxes, placeBox);\n\n\t\t// Step 8\n\t\tchart.chartArea = {\n\t\t\tleft: outerBoxSizes.left,\n\t\t\ttop: outerBoxSizes.top,\n\t\t\tright: outerBoxSizes.left + maxChartAreaWidth,\n\t\t\tbottom: outerBoxSizes.top + maxChartAreaHeight\n\t\t};\n\n\t\t// Step 9\n\t\thelpers$1.each(chartAreaBoxes, function(box) {\n\t\t\tbox.left = chart.chartArea.left;\n\t\t\tbox.top = chart.chartArea.top;\n\t\t\tbox.right = chart.chartArea.right;\n\t\t\tbox.bottom = chart.chartArea.bottom;\n\n\t\t\tbox.update(maxChartAreaWidth, maxChartAreaHeight);\n\t\t});\n\t}\n};\n\n/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nvar platform_basic = {\n\tacquireContext: function(item) {\n\t\tif (item && item.canvas) {\n\t\t\t// Support for any object associated to a canvas (including a context2d)\n\t\t\titem = item.canvas;\n\t\t}\n\n\t\treturn item && item.getContext('2d') || null;\n\t}\n};\n\nvar platform_dom = \"/*\\n * DOM element rendering detection\\n * https://davidwalsh.name/detect-node-insertion\\n */\\n@keyframes chartjs-render-animation {\\n\\tfrom { opacity: 0.99; }\\n\\tto { opacity: 1; }\\n}\\n\\n.chartjs-render-monitor {\\n\\tanimation: chartjs-render-animation 0.001s;\\n}\\n\\n/*\\n * DOM element resizing detection\\n * https://github.com/marcj/css-element-queries\\n */\\n.chartjs-size-monitor,\\n.chartjs-size-monitor-expand,\\n.chartjs-size-monitor-shrink {\\n\\tposition: absolute;\\n\\tdirection: ltr;\\n\\tleft: 0;\\n\\ttop: 0;\\n\\tright: 0;\\n\\tbottom: 0;\\n\\toverflow: hidden;\\n\\tpointer-events: none;\\n\\tvisibility: hidden;\\n\\tz-index: -1;\\n}\\n\\n.chartjs-size-monitor-expand > div {\\n\\tposition: absolute;\\n\\twidth: 1000000px;\\n\\theight: 1000000px;\\n\\tleft: 0;\\n\\ttop: 0;\\n}\\n\\n.chartjs-size-monitor-shrink > div {\\n\\tposition: absolute;\\n\\twidth: 200%;\\n\\theight: 200%;\\n\\tleft: 0;\\n\\ttop: 0;\\n}\\n\";\n\nvar platform_dom$1 = /*#__PURE__*/Object.freeze({\ndefault: platform_dom\n});\n\nfunction getCjsExportFromNamespace (n) {\n\treturn n && n.default || n;\n}\n\nvar stylesheet = getCjsExportFromNamespace(platform_dom$1);\n\nvar EXPANDO_KEY = '$chartjs';\nvar CSS_PREFIX = 'chartjs-';\nvar CSS_SIZE_MONITOR = CSS_PREFIX + 'size-monitor';\nvar CSS_RENDER_MONITOR = CSS_PREFIX + 'render-monitor';\nvar CSS_RENDER_ANIMATION = CSS_PREFIX + 'render-animation';\nvar ANIMATION_START_EVENTS = ['animationstart', 'webkitAnimationStart'];\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nvar EVENT_TYPES = {\n\ttouchstart: 'mousedown',\n\ttouchmove: 'mousemove',\n\ttouchend: 'mouseup',\n\tpointerenter: 'mouseenter',\n\tpointerdown: 'mousedown',\n\tpointermove: 'mousemove',\n\tpointerup: 'mouseup',\n\tpointerleave: 'mouseout',\n\tpointerout: 'mouseout'\n};\n\n/**\n * The \"used\" size is the final value of a dimension property after all calculations have\n * been performed. This method uses the computed style of `element` but returns undefined\n * if the computed style is not expressed in pixels. That can happen in some cases where\n * `element` has a size relative to its parent and this last one is not yet displayed,\n * for example because of `display: none` on a parent node.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n * @returns {number} Size in pixels or undefined if unknown.\n */\nfunction readUsedSize(element, property) {\n\tvar value = helpers$1.getStyle(element, property);\n\tvar matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n\treturn matches ? Number(matches[1]) : undefined;\n}\n\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n */\nfunction initCanvas(canvas, config) {\n\tvar style = canvas.style;\n\n\t// NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n\t// returns null or '' if no explicit value has been set to the canvas attribute.\n\tvar renderHeight = canvas.getAttribute('height');\n\tvar renderWidth = canvas.getAttribute('width');\n\n\t// Chart.js modifies some canvas values that we want to restore on destroy\n\tcanvas[EXPANDO_KEY] = {\n\t\tinitial: {\n\t\t\theight: renderHeight,\n\t\t\twidth: renderWidth,\n\t\t\tstyle: {\n\t\t\t\tdisplay: style.display,\n\t\t\t\theight: style.height,\n\t\t\t\twidth: style.width\n\t\t\t}\n\t\t}\n\t};\n\n\t// Force canvas to display as block to avoid extra space caused by inline\n\t// elements, which would interfere with the responsive resize process.\n\t// https://github.com/chartjs/Chart.js/issues/2538\n\tstyle.display = style.display || 'block';\n\n\tif (renderWidth === null || renderWidth === '') {\n\t\tvar displayWidth = readUsedSize(canvas, 'width');\n\t\tif (displayWidth !== undefined) {\n\t\t\tcanvas.width = displayWidth;\n\t\t}\n\t}\n\n\tif (renderHeight === null || renderHeight === '') {\n\t\tif (canvas.style.height === '') {\n\t\t\t// If no explicit render height and style height, let's apply the aspect ratio,\n\t\t\t// which one can be specified by the user but also by charts as default option\n\t\t\t// (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n\t\t\tcanvas.height = canvas.width / (config.options.aspectRatio || 2);\n\t\t} else {\n\t\t\tvar displayHeight = readUsedSize(canvas, 'height');\n\t\t\tif (displayWidth !== undefined) {\n\t\t\t\tcanvas.height = displayHeight;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn canvas;\n}\n\n/**\n * Detects support for options object argument in addEventListener.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n * @private\n */\nvar supportsEventListenerOptions = (function() {\n\tvar supports = false;\n\ttry {\n\t\tvar options = Object.defineProperty({}, 'passive', {\n\t\t\t// eslint-disable-next-line getter-return\n\t\t\tget: function() {\n\t\t\t\tsupports = true;\n\t\t\t}\n\t\t});\n\t\twindow.addEventListener('e', null, options);\n\t} catch (e) {\n\t\t// continue regardless of error\n\t}\n\treturn supports;\n}());\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nvar eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n\tnode.addEventListener(type, listener, eventListenerOptions);\n}\n\nfunction removeListener(node, type, listener) {\n\tnode.removeEventListener(type, listener, eventListenerOptions);\n}\n\nfunction createEvent(type, chart, x, y, nativeEvent) {\n\treturn {\n\t\ttype: type,\n\t\tchart: chart,\n\t\tnative: nativeEvent || null,\n\t\tx: x !== undefined ? x : null,\n\t\ty: y !== undefined ? y : null,\n\t};\n}\n\nfunction fromNativeEvent(event, chart) {\n\tvar type = EVENT_TYPES[event.type] || event.type;\n\tvar pos = helpers$1.getRelativePosition(event, chart);\n\treturn createEvent(type, chart, pos.x, pos.y, event);\n}\n\nfunction throttled(fn, thisArg) {\n\tvar ticking = false;\n\tvar args = [];\n\n\treturn function() {\n\t\targs = Array.prototype.slice.call(arguments);\n\t\tthisArg = thisArg || this;\n\n\t\tif (!ticking) {\n\t\t\tticking = true;\n\t\t\thelpers$1.requestAnimFrame.call(window, function() {\n\t\t\t\tticking = false;\n\t\t\t\tfn.apply(thisArg, args);\n\t\t\t});\n\t\t}\n\t};\n}\n\nfunction createDiv(cls) {\n\tvar el = document.createElement('div');\n\tel.className = cls || '';\n\treturn el;\n}\n\n// Implementation based on https://github.com/marcj/css-element-queries\nfunction createResizer(handler) {\n\tvar maxSize = 1000000;\n\n\t// NOTE(SB) Don't use innerHTML because it could be considered unsafe.\n\t// https://github.com/chartjs/Chart.js/issues/5902\n\tvar resizer = createDiv(CSS_SIZE_MONITOR);\n\tvar expand = createDiv(CSS_SIZE_MONITOR + '-expand');\n\tvar shrink = createDiv(CSS_SIZE_MONITOR + '-shrink');\n\n\texpand.appendChild(createDiv());\n\tshrink.appendChild(createDiv());\n\n\tresizer.appendChild(expand);\n\tresizer.appendChild(shrink);\n\tresizer._reset = function() {\n\t\texpand.scrollLeft = maxSize;\n\t\texpand.scrollTop = maxSize;\n\t\tshrink.scrollLeft = maxSize;\n\t\tshrink.scrollTop = maxSize;\n\t};\n\n\tvar onScroll = function() {\n\t\tresizer._reset();\n\t\thandler();\n\t};\n\n\taddListener(expand, 'scroll', onScroll.bind(expand, 'expand'));\n\taddListener(shrink, 'scroll', onScroll.bind(shrink, 'shrink'));\n\n\treturn resizer;\n}\n\n// https://davidwalsh.name/detect-node-insertion\nfunction watchForRender(node, handler) {\n\tvar expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});\n\tvar proxy = expando.renderProxy = function(e) {\n\t\tif (e.animationName === CSS_RENDER_ANIMATION) {\n\t\t\thandler();\n\t\t}\n\t};\n\n\thelpers$1.each(ANIMATION_START_EVENTS, function(type) {\n\t\taddListener(node, type, proxy);\n\t});\n\n\t// #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class\n\t// is removed then added back immediately (same animation frame?). Accessing the\n\t// `offsetParent` property will force a reflow and re-evaluate the CSS animation.\n\t// https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics\n\t// https://github.com/chartjs/Chart.js/issues/4737\n\texpando.reflow = !!node.offsetParent;\n\n\tnode.classList.add(CSS_RENDER_MONITOR);\n}\n\nfunction unwatchForRender(node) {\n\tvar expando = node[EXPANDO_KEY] || {};\n\tvar proxy = expando.renderProxy;\n\n\tif (proxy) {\n\t\thelpers$1.each(ANIMATION_START_EVENTS, function(type) {\n\t\t\tremoveListener(node, type, proxy);\n\t\t});\n\n\t\tdelete expando.renderProxy;\n\t}\n\n\tnode.classList.remove(CSS_RENDER_MONITOR);\n}\n\nfunction addResizeListener(node, listener, chart) {\n\tvar expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});\n\n\t// Let's keep track of this added resizer and thus avoid DOM query when removing it.\n\tvar resizer = expando.resizer = createResizer(throttled(function() {\n\t\tif (expando.resizer) {\n\t\t\tvar container = chart.options.maintainAspectRatio && node.parentNode;\n\t\t\tvar w = container ? container.clientWidth : 0;\n\t\t\tlistener(createEvent('resize', chart));\n\t\t\tif (container && container.clientWidth < w && chart.canvas) {\n\t\t\t\t// If the container size shrank during chart resize, let's assume\n\t\t\t\t// scrollbar appeared. So we resize again with the scrollbar visible -\n\t\t\t\t// effectively making chart smaller and the scrollbar hidden again.\n\t\t\t\t// Because we are inside `throttled`, and currently `ticking`, scroll\n\t\t\t\t// events are ignored during this whole 2 resize process.\n\t\t\t\t// If we assumed wrong and something else happened, we are resizing\n\t\t\t\t// twice in a frame (potential performance issue)\n\t\t\t\tlistener(createEvent('resize', chart));\n\t\t\t}\n\t\t}\n\t}));\n\n\t// The resizer needs to be attached to the node parent, so we first need to be\n\t// sure that `node` is attached to the DOM before injecting the resizer element.\n\twatchForRender(node, function() {\n\t\tif (expando.resizer) {\n\t\t\tvar container = node.parentNode;\n\t\t\tif (container && container !== resizer.parentNode) {\n\t\t\t\tcontainer.insertBefore(resizer, container.firstChild);\n\t\t\t}\n\n\t\t\t// The container size might have changed, let's reset the resizer state.\n\t\t\tresizer._reset();\n\t\t}\n\t});\n}\n\nfunction removeResizeListener(node) {\n\tvar expando = node[EXPANDO_KEY] || {};\n\tvar resizer = expando.resizer;\n\n\tdelete expando.resizer;\n\tunwatchForRender(node);\n\n\tif (resizer && resizer.parentNode) {\n\t\tresizer.parentNode.removeChild(resizer);\n\t}\n}\n\nfunction injectCSS(platform, css) {\n\t// https://stackoverflow.com/q/3922139\n\tvar style = platform._style || document.createElement('style');\n\tif (!platform._style) {\n\t\tplatform._style = style;\n\t\tcss = '/* Chart.js */\\n' + css;\n\t\tstyle.setAttribute('type', 'text/css');\n\t\tdocument.getElementsByTagName('head')[0].appendChild(style);\n\t}\n\n\tstyle.appendChild(document.createTextNode(css));\n}\n\nvar platform_dom$2 = {\n\t/**\n\t * When `true`, prevents the automatic injection of the stylesheet required to\n\t * correctly detect when the chart is added to the DOM and then resized. This\n\t * switch has been added to allow external stylesheet (`dist/Chart(.min)?.js`)\n\t * to be manually imported to make this library compatible with any CSP.\n\t * See https://github.com/chartjs/Chart.js/issues/5208\n\t */\n\tdisableCSSInjection: false,\n\n\t/**\n\t * This property holds whether this platform is enabled for the current environment.\n\t * Currently used by platform.js to select the proper implementation.\n\t * @private\n\t */\n\t_enabled: typeof window !== 'undefined' && typeof document !== 'undefined',\n\n\t/**\n\t * @private\n\t */\n\t_ensureLoaded: function() {\n\t\tif (this._loaded) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._loaded = true;\n\n\t\t// https://github.com/chartjs/Chart.js/issues/5208\n\t\tif (!this.disableCSSInjection) {\n\t\t\tinjectCSS(this, stylesheet);\n\t\t}\n\t},\n\n\tacquireContext: function(item, config) {\n\t\tif (typeof item === 'string') {\n\t\t\titem = document.getElementById(item);\n\t\t} else if (item.length) {\n\t\t\t// Support for array based queries (such as jQuery)\n\t\t\titem = item[0];\n\t\t}\n\n\t\tif (item && item.canvas) {\n\t\t\t// Support for any object associated to a canvas (including a context2d)\n\t\t\titem = item.canvas;\n\t\t}\n\n\t\t// To prevent canvas fingerprinting, some add-ons undefine the getContext\n\t\t// method, for example: https://github.com/kkapsner/CanvasBlocker\n\t\t// https://github.com/chartjs/Chart.js/issues/2807\n\t\tvar context = item && item.getContext && item.getContext('2d');\n\n\t\t// Load platform resources on first chart creation, to make possible to change\n\t\t// platform options after importing the library (e.g. `disableCSSInjection`).\n\t\tthis._ensureLoaded();\n\n\t\t// `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is\n\t\t// inside an iframe or when running in a protected environment. We could guess the\n\t\t// types from their toString() value but let's keep things flexible and assume it's\n\t\t// a sufficient condition if the item has a context2D which has item as `canvas`.\n\t\t// https://github.com/chartjs/Chart.js/issues/3887\n\t\t// https://github.com/chartjs/Chart.js/issues/4102\n\t\t// https://github.com/chartjs/Chart.js/issues/4152\n\t\tif (context && context.canvas === item) {\n\t\t\tinitCanvas(item, config);\n\t\t\treturn context;\n\t\t}\n\n\t\treturn null;\n\t},\n\n\treleaseContext: function(context) {\n\t\tvar canvas = context.canvas;\n\t\tif (!canvas[EXPANDO_KEY]) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar initial = canvas[EXPANDO_KEY].initial;\n\t\t['height', 'width'].forEach(function(prop) {\n\t\t\tvar value = initial[prop];\n\t\t\tif (helpers$1.isNullOrUndef(value)) {\n\t\t\t\tcanvas.removeAttribute(prop);\n\t\t\t} else {\n\t\t\t\tcanvas.setAttribute(prop, value);\n\t\t\t}\n\t\t});\n\n\t\thelpers$1.each(initial.style || {}, function(value, key) {\n\t\t\tcanvas.style[key] = value;\n\t\t});\n\n\t\t// The canvas render size might have been changed (and thus the state stack discarded),\n\t\t// we can't use save() and restore() to restore the initial state. So make sure that at\n\t\t// least the canvas context is reset to the default state by setting the canvas width.\n\t\t// https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n\t\t// eslint-disable-next-line no-self-assign\n\t\tcanvas.width = canvas.width;\n\n\t\tdelete canvas[EXPANDO_KEY];\n\t},\n\n\taddEventListener: function(chart, type, listener) {\n\t\tvar canvas = chart.canvas;\n\t\tif (type === 'resize') {\n\t\t\t// Note: the resize event is not supported on all browsers.\n\t\t\taddResizeListener(canvas, listener, chart);\n\t\t\treturn;\n\t\t}\n\n\t\tvar expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});\n\t\tvar proxies = expando.proxies || (expando.proxies = {});\n\t\tvar proxy = proxies[chart.id + '_' + type] = function(event) {\n\t\t\tlistener(fromNativeEvent(event, chart));\n\t\t};\n\n\t\taddListener(canvas, type, proxy);\n\t},\n\n\tremoveEventListener: function(chart, type, listener) {\n\t\tvar canvas = chart.canvas;\n\t\tif (type === 'resize') {\n\t\t\t// Note: the resize event is not supported on all browsers.\n\t\t\tremoveResizeListener(canvas);\n\t\t\treturn;\n\t\t}\n\n\t\tvar expando = listener[EXPANDO_KEY] || {};\n\t\tvar proxies = expando.proxies || {};\n\t\tvar proxy = proxies[chart.id + '_' + type];\n\t\tif (!proxy) {\n\t\t\treturn;\n\t\t}\n\n\t\tremoveListener(canvas, type, proxy);\n\t}\n};\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use EventTarget.addEventListener instead.\n * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+\n * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n * @function Chart.helpers.addEvent\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers$1.addEvent = addListener;\n\n/**\n * Provided for backward compatibility, use EventTarget.removeEventListener instead.\n * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+\n * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\n * @function Chart.helpers.removeEvent\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers$1.removeEvent = removeListener;\n\n// @TODO Make possible to select another platform at build time.\nvar implementation = platform_dom$2._enabled ? platform_dom$2 : platform_basic;\n\n/**\n * @namespace Chart.platform\n * @see https://chartjs.gitbooks.io/proposals/content/Platform.html\n * @since 2.4.0\n */\nvar platform = helpers$1.extend({\n\t/**\n\t * @since 2.7.0\n\t */\n\tinitialize: function() {},\n\n\t/**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {*} item - The native item from which to acquire context (platform specific)\n\t * @param {object} options - The chart options\n\t * @returns {CanvasRenderingContext2D} context2d instance\n\t */\n\tacquireContext: function() {},\n\n\t/**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n\treleaseContext: function() {},\n\n\t/**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link IEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link IEvent} interface) when an event of the specified type occurs.\n\t */\n\taddEventListener: function() {},\n\n\t/**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link IEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n\tremoveEventListener: function() {}\n\n}, implementation);\n\ncore_defaults._set('global', {\n\tplugins: {}\n});\n\n/**\n * The plugin service singleton\n * @namespace Chart.plugins\n * @since 2.1.0\n */\nvar core_plugins = {\n\t/**\n\t * Globally registered plugins.\n\t * @private\n\t */\n\t_plugins: [],\n\n\t/**\n\t * This identifier is used to invalidate the descriptors cache attached to each chart\n\t * when a global plugin is registered or unregistered. In this case, the cache ID is\n\t * incremented and descriptors are regenerated during following API calls.\n\t * @private\n\t */\n\t_cacheId: 0,\n\n\t/**\n\t * Registers the given plugin(s) if not already registered.\n\t * @param {IPlugin[]|IPlugin} plugins plugin instance(s).\n\t */\n\tregister: function(plugins) {\n\t\tvar p = this._plugins;\n\t\t([]).concat(plugins).forEach(function(plugin) {\n\t\t\tif (p.indexOf(plugin) === -1) {\n\t\t\t\tp.push(plugin);\n\t\t\t}\n\t\t});\n\n\t\tthis._cacheId++;\n\t},\n\n\t/**\n\t * Unregisters the given plugin(s) only if registered.\n\t * @param {IPlugin[]|IPlugin} plugins plugin instance(s).\n\t */\n\tunregister: function(plugins) {\n\t\tvar p = this._plugins;\n\t\t([]).concat(plugins).forEach(function(plugin) {\n\t\t\tvar idx = p.indexOf(plugin);\n\t\t\tif (idx !== -1) {\n\t\t\t\tp.splice(idx, 1);\n\t\t\t}\n\t\t});\n\n\t\tthis._cacheId++;\n\t},\n\n\t/**\n\t * Remove all registered plugins.\n\t * @since 2.1.5\n\t */\n\tclear: function() {\n\t\tthis._plugins = [];\n\t\tthis._cacheId++;\n\t},\n\n\t/**\n\t * Returns the number of registered plugins?\n\t * @returns {number}\n\t * @since 2.1.5\n\t */\n\tcount: function() {\n\t\treturn this._plugins.length;\n\t},\n\n\t/**\n\t * Returns all registered plugin instances.\n\t * @returns {IPlugin[]} array of plugin objects.\n\t * @since 2.1.5\n\t */\n\tgetAll: function() {\n\t\treturn this._plugins;\n\t},\n\n\t/**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Array} [args] - Extra arguments to apply to the hook call.\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n\tnotify: function(chart, hook, args) {\n\t\tvar descriptors = this.descriptors(chart);\n\t\tvar ilen = descriptors.length;\n\t\tvar i, descriptor, plugin, params, method;\n\n\t\tfor (i = 0; i < ilen; ++i) {\n\t\t\tdescriptor = descriptors[i];\n\t\t\tplugin = descriptor.plugin;\n\t\t\tmethod = plugin[hook];\n\t\t\tif (typeof method === 'function') {\n\t\t\t\tparams = [chart].concat(args || []);\n\t\t\t\tparams.push(descriptor.options);\n\t\t\t\tif (method.apply(plugin, params) === false) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * Returns descriptors of enabled plugins for the given chart.\n\t * @returns {object[]} [{ plugin, options }]\n\t * @private\n\t */\n\tdescriptors: function(chart) {\n\t\tvar cache = chart.$plugins || (chart.$plugins = {});\n\t\tif (cache.id === this._cacheId) {\n\t\t\treturn cache.descriptors;\n\t\t}\n\n\t\tvar plugins = [];\n\t\tvar descriptors = [];\n\t\tvar config = (chart && chart.config) || {};\n\t\tvar options = (config.options && config.options.plugins) || {};\n\n\t\tthis._plugins.concat(config.plugins || []).forEach(function(plugin) {\n\t\t\tvar idx = plugins.indexOf(plugin);\n\t\t\tif (idx !== -1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar id = plugin.id;\n\t\t\tvar opts = options[id];\n\t\t\tif (opts === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (opts === true) {\n\t\t\t\topts = helpers$1.clone(core_defaults.global.plugins[id]);\n\t\t\t}\n\n\t\t\tplugins.push(plugin);\n\t\t\tdescriptors.push({\n\t\t\t\tplugin: plugin,\n\t\t\t\toptions: opts || {}\n\t\t\t});\n\t\t});\n\n\t\tcache.descriptors = descriptors;\n\t\tcache.id = this._cacheId;\n\t\treturn descriptors;\n\t},\n\n\t/**\n\t * Invalidates cache for the given chart: descriptors hold a reference on plugin option,\n\t * but in some cases, this reference can be changed by the user when updating options.\n\t * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n\t * @private\n\t */\n\t_invalidate: function(chart) {\n\t\tdelete chart.$plugins;\n\t}\n};\n\nvar core_scaleService = {\n\t// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then\n\t// use the new chart options to grab the correct scale\n\tconstructors: {},\n\t// Use a registration function so that we can move to an ES6 map when we no longer need to support\n\t// old browsers\n\n\t// Scale config defaults\n\tdefaults: {},\n\tregisterScaleType: function(type, scaleConstructor, scaleDefaults) {\n\t\tthis.constructors[type] = scaleConstructor;\n\t\tthis.defaults[type] = helpers$1.clone(scaleDefaults);\n\t},\n\tgetScaleConstructor: function(type) {\n\t\treturn this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;\n\t},\n\tgetScaleDefaults: function(type) {\n\t\t// Return the scale defaults merged with the global settings so that we always use the latest ones\n\t\treturn this.defaults.hasOwnProperty(type) ? helpers$1.merge({}, [core_defaults.scale, this.defaults[type]]) : {};\n\t},\n\tupdateScaleDefaults: function(type, additions) {\n\t\tvar me = this;\n\t\tif (me.defaults.hasOwnProperty(type)) {\n\t\t\tme.defaults[type] = helpers$1.extend(me.defaults[type], additions);\n\t\t}\n\t},\n\taddScalesToLayout: function(chart) {\n\t\t// Adds each scale to the chart.boxes array to be sized accordingly\n\t\thelpers$1.each(chart.scales, function(scale) {\n\t\t\t// Set ILayoutItem parameters for backwards compatibility\n\t\t\tscale.fullWidth = scale.options.fullWidth;\n\t\t\tscale.position = scale.options.position;\n\t\t\tscale.weight = scale.options.weight;\n\t\t\tcore_layouts.addBox(chart, scale);\n\t\t});\n\t}\n};\n\nvar valueOrDefault$7 = helpers$1.valueOrDefault;\n\ncore_defaults._set('global', {\n\ttooltips: {\n\t\tenabled: true,\n\t\tcustom: null,\n\t\tmode: 'nearest',\n\t\tposition: 'average',\n\t\tintersect: true,\n\t\tbackgroundColor: 'rgba(0,0,0,0.8)',\n\t\ttitleFontStyle: 'bold',\n\t\ttitleSpacing: 2,\n\t\ttitleMarginBottom: 6,\n\t\ttitleFontColor: '#fff',\n\t\ttitleAlign: 'left',\n\t\tbodySpacing: 2,\n\t\tbodyFontColor: '#fff',\n\t\tbodyAlign: 'left',\n\t\tfooterFontStyle: 'bold',\n\t\tfooterSpacing: 2,\n\t\tfooterMarginTop: 6,\n\t\tfooterFontColor: '#fff',\n\t\tfooterAlign: 'left',\n\t\tyPadding: 6,\n\t\txPadding: 6,\n\t\tcaretPadding: 2,\n\t\tcaretSize: 5,\n\t\tcornerRadius: 6,\n\t\tmultiKeyBackground: '#fff',\n\t\tdisplayColors: true,\n\t\tborderColor: 'rgba(0,0,0,0)',\n\t\tborderWidth: 0,\n\t\tcallbacks: {\n\t\t\t// Args are: (tooltipItems, data)\n\t\t\tbeforeTitle: helpers$1.noop,\n\t\t\ttitle: function(tooltipItems, data) {\n\t\t\t\tvar title = '';\n\t\t\t\tvar labels = data.labels;\n\t\t\t\tvar labelCount = labels ? labels.length : 0;\n\n\t\t\t\tif (tooltipItems.length > 0) {\n\t\t\t\t\tvar item = tooltipItems[0];\n\t\t\t\t\tif (item.label) {\n\t\t\t\t\t\ttitle = item.label;\n\t\t\t\t\t} else if (item.xLabel) {\n\t\t\t\t\t\ttitle = item.xLabel;\n\t\t\t\t\t} else if (labelCount > 0 && item.index < labelCount) {\n\t\t\t\t\t\ttitle = labels[item.index];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn title;\n\t\t\t},\n\t\t\tafterTitle: helpers$1.noop,\n\n\t\t\t// Args are: (tooltipItems, data)\n\t\t\tbeforeBody: helpers$1.noop,\n\n\t\t\t// Args are: (tooltipItem, data)\n\t\t\tbeforeLabel: helpers$1.noop,\n\t\t\tlabel: function(tooltipItem, data) {\n\t\t\t\tvar label = data.datasets[tooltipItem.datasetIndex].label || '';\n\n\t\t\t\tif (label) {\n\t\t\t\t\tlabel += ': ';\n\t\t\t\t}\n\t\t\t\tif (!helpers$1.isNullOrUndef(tooltipItem.value)) {\n\t\t\t\t\tlabel += tooltipItem.value;\n\t\t\t\t} else {\n\t\t\t\t\tlabel += tooltipItem.yLabel;\n\t\t\t\t}\n\t\t\t\treturn label;\n\t\t\t},\n\t\t\tlabelColor: function(tooltipItem, chart) {\n\t\t\t\tvar meta = chart.getDatasetMeta(tooltipItem.datasetIndex);\n\t\t\t\tvar activeElement = meta.data[tooltipItem.index];\n\t\t\t\tvar view = activeElement._view;\n\t\t\t\treturn {\n\t\t\t\t\tborderColor: view.borderColor,\n\t\t\t\t\tbackgroundColor: view.backgroundColor\n\t\t\t\t};\n\t\t\t},\n\t\t\tlabelTextColor: function() {\n\t\t\t\treturn this._options.bodyFontColor;\n\t\t\t},\n\t\t\tafterLabel: helpers$1.noop,\n\n\t\t\t// Args are: (tooltipItems, data)\n\t\t\tafterBody: helpers$1.noop,\n\n\t\t\t// Args are: (tooltipItems, data)\n\t\t\tbeforeFooter: helpers$1.noop,\n\t\t\tfooter: helpers$1.noop,\n\t\t\tafterFooter: helpers$1.noop\n\t\t}\n\t}\n});\n\nvar positioners = {\n\t/**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t * @function Chart.Tooltip.positioners.average\n\t * @param elements {ChartElement[]} the elements being displayed in the tooltip\n\t * @returns {object} tooltip position\n\t */\n\taverage: function(elements) {\n\t\tif (!elements.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar i, len;\n\t\tvar x = 0;\n\t\tvar y = 0;\n\t\tvar count = 0;\n\n\t\tfor (i = 0, len = elements.length; i < len; ++i) {\n\t\t\tvar el = elements[i];\n\t\t\tif (el && el.hasValue()) {\n\t\t\t\tvar pos = el.tooltipPosition();\n\t\t\t\tx += pos.x;\n\t\t\t\ty += pos.y;\n\t\t\t\t++count;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tx: x / count,\n\t\t\ty: y / count\n\t\t};\n\t},\n\n\t/**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t * @function Chart.Tooltip.positioners.nearest\n\t * @param elements {Chart.Element[]} the tooltip elements\n\t * @param eventPosition {object} the position of the event in canvas coordinates\n\t * @returns {object} the tooltip position\n\t */\n\tnearest: function(elements, eventPosition) {\n\t\tvar x = eventPosition.x;\n\t\tvar y = eventPosition.y;\n\t\tvar minDistance = Number.POSITIVE_INFINITY;\n\t\tvar i, len, nearestElement;\n\n\t\tfor (i = 0, len = elements.length; i < len; ++i) {\n\t\t\tvar el = elements[i];\n\t\t\tif (el && el.hasValue()) {\n\t\t\t\tvar center = el.getCenterPoint();\n\t\t\t\tvar d = helpers$1.distanceBetweenPoints(eventPosition, center);\n\n\t\t\t\tif (d < minDistance) {\n\t\t\t\t\tminDistance = d;\n\t\t\t\t\tnearestElement = el;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (nearestElement) {\n\t\t\tvar tp = nearestElement.tooltipPosition();\n\t\t\tx = tp.x;\n\t\t\ty = tp.y;\n\t\t}\n\n\t\treturn {\n\t\t\tx: x,\n\t\t\ty: y\n\t\t};\n\t}\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n\tif (toPush) {\n\t\tif (helpers$1.isArray(toPush)) {\n\t\t\t// base = base.concat(toPush);\n\t\t\tArray.prototype.push.apply(base, toPush);\n\t\t} else {\n\t\t\tbase.push(toPush);\n\t\t}\n\t}\n\n\treturn base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {string} value - The value to split by newline.\n * @returns {string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n\tif ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n\t\treturn str.split('\\n');\n\t}\n\treturn str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param element - the chart element (point, arc, bar) to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(element) {\n\tvar xScale = element._xScale;\n\tvar yScale = element._yScale || element._scale; // handle radar || polarArea charts\n\tvar index = element._index;\n\tvar datasetIndex = element._datasetIndex;\n\tvar controller = element._chart.getDatasetMeta(datasetIndex).controller;\n\tvar indexScale = controller._getIndexScale();\n\tvar valueScale = controller._getValueScale();\n\n\treturn {\n\t\txLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',\n\t\tyLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',\n\t\tlabel: indexScale ? '' + indexScale.getLabelForIndex(index, datasetIndex) : '',\n\t\tvalue: valueScale ? '' + valueScale.getLabelForIndex(index, datasetIndex) : '',\n\t\tindex: index,\n\t\tdatasetIndex: datasetIndex,\n\t\tx: element._model.x,\n\t\ty: element._model.y\n\t};\n}\n\n/**\n * Helper to get the reset model for the tooltip\n * @param tooltipOpts {object} the tooltip options\n */\nfunction getBaseModel(tooltipOpts) {\n\tvar globalDefaults = core_defaults.global;\n\n\treturn {\n\t\t// Positioning\n\t\txPadding: tooltipOpts.xPadding,\n\t\tyPadding: tooltipOpts.yPadding,\n\t\txAlign: tooltipOpts.xAlign,\n\t\tyAlign: tooltipOpts.yAlign,\n\n\t\t// Body\n\t\tbodyFontColor: tooltipOpts.bodyFontColor,\n\t\t_bodyFontFamily: valueOrDefault$7(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),\n\t\t_bodyFontStyle: valueOrDefault$7(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),\n\t\t_bodyAlign: tooltipOpts.bodyAlign,\n\t\tbodyFontSize: valueOrDefault$7(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),\n\t\tbodySpacing: tooltipOpts.bodySpacing,\n\n\t\t// Title\n\t\ttitleFontColor: tooltipOpts.titleFontColor,\n\t\t_titleFontFamily: valueOrDefault$7(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),\n\t\t_titleFontStyle: valueOrDefault$7(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),\n\t\ttitleFontSize: valueOrDefault$7(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),\n\t\t_titleAlign: tooltipOpts.titleAlign,\n\t\ttitleSpacing: tooltipOpts.titleSpacing,\n\t\ttitleMarginBottom: tooltipOpts.titleMarginBottom,\n\n\t\t// Footer\n\t\tfooterFontColor: tooltipOpts.footerFontColor,\n\t\t_footerFontFamily: valueOrDefault$7(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),\n\t\t_footerFontStyle: valueOrDefault$7(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),\n\t\tfooterFontSize: valueOrDefault$7(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),\n\t\t_footerAlign: tooltipOpts.footerAlign,\n\t\tfooterSpacing: tooltipOpts.footerSpacing,\n\t\tfooterMarginTop: tooltipOpts.footerMarginTop,\n\n\t\t// Appearance\n\t\tcaretSize: tooltipOpts.caretSize,\n\t\tcornerRadius: tooltipOpts.cornerRadius,\n\t\tbackgroundColor: tooltipOpts.backgroundColor,\n\t\topacity: 0,\n\t\tlegendColorBackground: tooltipOpts.multiKeyBackground,\n\t\tdisplayColors: tooltipOpts.displayColors,\n\t\tborderColor: tooltipOpts.borderColor,\n\t\tborderWidth: tooltipOpts.borderWidth\n\t};\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, model) {\n\tvar ctx = tooltip._chart.ctx;\n\n\tvar height = model.yPadding * 2; // Tooltip Padding\n\tvar width = 0;\n\n\t// Count of all lines in the body\n\tvar body = model.body;\n\tvar combinedBodyLength = body.reduce(function(count, bodyItem) {\n\t\treturn count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;\n\t}, 0);\n\tcombinedBodyLength += model.beforeBody.length + model.afterBody.length;\n\n\tvar titleLineCount = model.title.length;\n\tvar footerLineCount = model.footer.length;\n\tvar titleFontSize = model.titleFontSize;\n\tvar bodyFontSize = model.bodyFontSize;\n\tvar footerFontSize = model.footerFontSize;\n\n\theight += titleLineCount * titleFontSize; // Title Lines\n\theight += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing\n\theight += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin\n\theight += combinedBodyLength * bodyFontSize; // Body Lines\n\theight += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing\n\theight += footerLineCount ? model.footerMarginTop : 0; // Footer Margin\n\theight += footerLineCount * (footerFontSize); // Footer Lines\n\theight += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing\n\n\t// Title width\n\tvar widthPadding = 0;\n\tvar maxLineWidth = function(line) {\n\t\twidth = Math.max(width, ctx.measureText(line).width + widthPadding);\n\t};\n\n\tctx.font = helpers$1.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);\n\thelpers$1.each(model.title, maxLineWidth);\n\n\t// Body width\n\tctx.font = helpers$1.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);\n\thelpers$1.each(model.beforeBody.concat(model.afterBody), maxLineWidth);\n\n\t// Body lines may include some extra width due to the color box\n\twidthPadding = model.displayColors ? (bodyFontSize + 2) : 0;\n\thelpers$1.each(body, function(bodyItem) {\n\t\thelpers$1.each(bodyItem.before, maxLineWidth);\n\t\thelpers$1.each(bodyItem.lines, maxLineWidth);\n\t\thelpers$1.each(bodyItem.after, maxLineWidth);\n\t});\n\n\t// Reset back to 0\n\twidthPadding = 0;\n\n\t// Footer width\n\tctx.font = helpers$1.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);\n\thelpers$1.each(model.footer, maxLineWidth);\n\n\t// Add padding\n\twidth += 2 * model.xPadding;\n\n\treturn {\n\t\twidth: width,\n\t\theight: height\n\t};\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(tooltip, size) {\n\tvar model = tooltip._model;\n\tvar chart = tooltip._chart;\n\tvar chartArea = tooltip._chart.chartArea;\n\tvar xAlign = 'center';\n\tvar yAlign = 'center';\n\n\tif (model.y < size.height) {\n\t\tyAlign = 'top';\n\t} else if (model.y > (chart.height - size.height)) {\n\t\tyAlign = 'bottom';\n\t}\n\n\tvar lf, rf; // functions to determine left, right alignment\n\tvar olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart\n\tvar yf; // function to get the y alignment if the tooltip goes outside of the left or right edges\n\tvar midX = (chartArea.left + chartArea.right) / 2;\n\tvar midY = (chartArea.top + chartArea.bottom) / 2;\n\n\tif (yAlign === 'center') {\n\t\tlf = function(x) {\n\t\t\treturn x <= midX;\n\t\t};\n\t\trf = function(x) {\n\t\t\treturn x > midX;\n\t\t};\n\t} else {\n\t\tlf = function(x) {\n\t\t\treturn x <= (size.width / 2);\n\t\t};\n\t\trf = function(x) {\n\t\t\treturn x >= (chart.width - (size.width / 2));\n\t\t};\n\t}\n\n\tolf = function(x) {\n\t\treturn x + size.width + model.caretSize + model.caretPadding > chart.width;\n\t};\n\torf = function(x) {\n\t\treturn x - size.width - model.caretSize - model.caretPadding < 0;\n\t};\n\tyf = function(y) {\n\t\treturn y <= midY ? 'top' : 'bottom';\n\t};\n\n\tif (lf(model.x)) {\n\t\txAlign = 'left';\n\n\t\t// Is tooltip too wide and goes over the right side of the chart.?\n\t\tif (olf(model.x)) {\n\t\t\txAlign = 'center';\n\t\t\tyAlign = yf(model.y);\n\t\t}\n\t} else if (rf(model.x)) {\n\t\txAlign = 'right';\n\n\t\t// Is tooltip too wide and goes outside left edge of canvas?\n\t\tif (orf(model.x)) {\n\t\t\txAlign = 'center';\n\t\t\tyAlign = yf(model.y);\n\t\t}\n\t}\n\n\tvar opts = tooltip._options;\n\treturn {\n\t\txAlign: opts.xAlign ? opts.xAlign : xAlign,\n\t\tyAlign: opts.yAlign ? opts.yAlign : yAlign\n\t};\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(vm, size, alignment, chart) {\n\t// Background Position\n\tvar x = vm.x;\n\tvar y = vm.y;\n\n\tvar caretSize = vm.caretSize;\n\tvar caretPadding = vm.caretPadding;\n\tvar cornerRadius = vm.cornerRadius;\n\tvar xAlign = alignment.xAlign;\n\tvar yAlign = alignment.yAlign;\n\tvar paddingAndSize = caretSize + caretPadding;\n\tvar radiusAndPadding = cornerRadius + caretPadding;\n\n\tif (xAlign === 'right') {\n\t\tx -= size.width;\n\t} else if (xAlign === 'center') {\n\t\tx -= (size.width / 2);\n\t\tif (x + size.width > chart.width) {\n\t\t\tx = chart.width - size.width;\n\t\t}\n\t\tif (x < 0) {\n\t\t\tx = 0;\n\t\t}\n\t}\n\n\tif (yAlign === 'top') {\n\t\ty += paddingAndSize;\n\t} else if (yAlign === 'bottom') {\n\t\ty -= size.height + paddingAndSize;\n\t} else {\n\t\ty -= (size.height / 2);\n\t}\n\n\tif (yAlign === 'center') {\n\t\tif (xAlign === 'left') {\n\t\t\tx += paddingAndSize;\n\t\t} else if (xAlign === 'right') {\n\t\t\tx -= paddingAndSize;\n\t\t}\n\t} else if (xAlign === 'left') {\n\t\tx -= radiusAndPadding;\n\t} else if (xAlign === 'right') {\n\t\tx += radiusAndPadding;\n\t}\n\n\treturn {\n\t\tx: x,\n\t\ty: y\n\t};\n}\n\nfunction getAlignedX(vm, align) {\n\treturn align === 'center'\n\t\t? vm.x + vm.width / 2\n\t\t: align === 'right'\n\t\t\t? vm.x + vm.width - vm.xPadding\n\t\t\t: vm.x + vm.xPadding;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n\treturn pushOrConcat([], splitNewlines(callback));\n}\n\nvar exports$3 = core_element.extend({\n\tinitialize: function() {\n\t\tthis._model = getBaseModel(this._options);\n\t\tthis._lastActive = [];\n\t},\n\n\t// Get the title\n\t// Args are: (tooltipItem, data)\n\tgetTitle: function() {\n\t\tvar me = this;\n\t\tvar opts = me._options;\n\t\tvar callbacks = opts.callbacks;\n\n\t\tvar beforeTitle = callbacks.beforeTitle.apply(me, arguments);\n\t\tvar title = callbacks.title.apply(me, arguments);\n\t\tvar afterTitle = callbacks.afterTitle.apply(me, arguments);\n\n\t\tvar lines = [];\n\t\tlines = pushOrConcat(lines, splitNewlines(beforeTitle));\n\t\tlines = pushOrConcat(lines, splitNewlines(title));\n\t\tlines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n\t\treturn lines;\n\t},\n\n\t// Args are: (tooltipItem, data)\n\tgetBeforeBody: function() {\n\t\treturn getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));\n\t},\n\n\t// Args are: (tooltipItem, data)\n\tgetBody: function(tooltipItems, data) {\n\t\tvar me = this;\n\t\tvar callbacks = me._options.callbacks;\n\t\tvar bodyItems = [];\n\n\t\thelpers$1.each(tooltipItems, function(tooltipItem) {\n\t\t\tvar bodyItem = {\n\t\t\t\tbefore: [],\n\t\t\t\tlines: [],\n\t\t\t\tafter: []\n\t\t\t};\n\t\t\tpushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));\n\t\t\tpushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));\n\t\t\tpushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));\n\n\t\t\tbodyItems.push(bodyItem);\n\t\t});\n\n\t\treturn bodyItems;\n\t},\n\n\t// Args are: (tooltipItem, data)\n\tgetAfterBody: function() {\n\t\treturn getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));\n\t},\n\n\t// Get the footer and beforeFooter and afterFooter lines\n\t// Args are: (tooltipItem, data)\n\tgetFooter: function() {\n\t\tvar me = this;\n\t\tvar callbacks = me._options.callbacks;\n\n\t\tvar beforeFooter = callbacks.beforeFooter.apply(me, arguments);\n\t\tvar footer = callbacks.footer.apply(me, arguments);\n\t\tvar afterFooter = callbacks.afterFooter.apply(me, arguments);\n\n\t\tvar lines = [];\n\t\tlines = pushOrConcat(lines, splitNewlines(beforeFooter));\n\t\tlines = pushOrConcat(lines, splitNewlines(footer));\n\t\tlines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n\t\treturn lines;\n\t},\n\n\tupdate: function(changed) {\n\t\tvar me = this;\n\t\tvar opts = me._options;\n\n\t\t// Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition\n\t\t// that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time\n\t\t// which breaks any animations.\n\t\tvar existingModel = me._model;\n\t\tvar model = me._model = getBaseModel(opts);\n\t\tvar active = me._active;\n\n\t\tvar data = me._data;\n\n\t\t// In the case where active.length === 0 we need to keep these at existing values for good animations\n\t\tvar alignment = {\n\t\t\txAlign: existingModel.xAlign,\n\t\t\tyAlign: existingModel.yAlign\n\t\t};\n\t\tvar backgroundPoint = {\n\t\t\tx: existingModel.x,\n\t\t\ty: existingModel.y\n\t\t};\n\t\tvar tooltipSize = {\n\t\t\twidth: existingModel.width,\n\t\t\theight: existingModel.height\n\t\t};\n\t\tvar tooltipPosition = {\n\t\t\tx: existingModel.caretX,\n\t\t\ty: existingModel.caretY\n\t\t};\n\n\t\tvar i, len;\n\n\t\tif (active.length) {\n\t\t\tmodel.opacity = 1;\n\n\t\t\tvar labelColors = [];\n\t\t\tvar labelTextColors = [];\n\t\t\ttooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);\n\n\t\t\tvar tooltipItems = [];\n\t\t\tfor (i = 0, len = active.length; i < len; ++i) {\n\t\t\t\ttooltipItems.push(createTooltipItem(active[i]));\n\t\t\t}\n\n\t\t\t// If the user provided a filter function, use it to modify the tooltip items\n\t\t\tif (opts.filter) {\n\t\t\t\ttooltipItems = tooltipItems.filter(function(a) {\n\t\t\t\t\treturn opts.filter(a, data);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// If the user provided a sorting function, use it to modify the tooltip items\n\t\t\tif (opts.itemSort) {\n\t\t\t\ttooltipItems = tooltipItems.sort(function(a, b) {\n\t\t\t\t\treturn opts.itemSort(a, b, data);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Determine colors for boxes\n\t\t\thelpers$1.each(tooltipItems, function(tooltipItem) {\n\t\t\t\tlabelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));\n\t\t\t\tlabelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));\n\t\t\t});\n\n\n\t\t\t// Build the Text Lines\n\t\t\tmodel.title = me.getTitle(tooltipItems, data);\n\t\t\tmodel.beforeBody = me.getBeforeBody(tooltipItems, data);\n\t\t\tmodel.body = me.getBody(tooltipItems, data);\n\t\t\tmodel.afterBody = me.getAfterBody(tooltipItems, data);\n\t\t\tmodel.footer = me.getFooter(tooltipItems, data);\n\n\t\t\t// Initial positioning and colors\n\t\t\tmodel.x = tooltipPosition.x;\n\t\t\tmodel.y = tooltipPosition.y;\n\t\t\tmodel.caretPadding = opts.caretPadding;\n\t\t\tmodel.labelColors = labelColors;\n\t\t\tmodel.labelTextColors = labelTextColors;\n\n\t\t\t// data points\n\t\t\tmodel.dataPoints = tooltipItems;\n\n\t\t\t// We need to determine alignment of the tooltip\n\t\t\ttooltipSize = getTooltipSize(this, model);\n\t\t\talignment = determineAlignment(this, tooltipSize);\n\t\t\t// Final Size and Position\n\t\t\tbackgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);\n\t\t} else {\n\t\t\tmodel.opacity = 0;\n\t\t}\n\n\t\tmodel.xAlign = alignment.xAlign;\n\t\tmodel.yAlign = alignment.yAlign;\n\t\tmodel.x = backgroundPoint.x;\n\t\tmodel.y = backgroundPoint.y;\n\t\tmodel.width = tooltipSize.width;\n\t\tmodel.height = tooltipSize.height;\n\n\t\t// Point where the caret on the tooltip points to\n\t\tmodel.caretX = tooltipPosition.x;\n\t\tmodel.caretY = tooltipPosition.y;\n\n\t\tme._model = model;\n\n\t\tif (changed && opts.custom) {\n\t\t\topts.custom.call(me, model);\n\t\t}\n\n\t\treturn me;\n\t},\n\n\tdrawCaret: function(tooltipPoint, size) {\n\t\tvar ctx = this._chart.ctx;\n\t\tvar vm = this._view;\n\t\tvar caretPosition = this.getCaretPosition(tooltipPoint, size, vm);\n\n\t\tctx.lineTo(caretPosition.x1, caretPosition.y1);\n\t\tctx.lineTo(caretPosition.x2, caretPosition.y2);\n\t\tctx.lineTo(caretPosition.x3, caretPosition.y3);\n\t},\n\tgetCaretPosition: function(tooltipPoint, size, vm) {\n\t\tvar x1, x2, x3, y1, y2, y3;\n\t\tvar caretSize = vm.caretSize;\n\t\tvar cornerRadius = vm.cornerRadius;\n\t\tvar xAlign = vm.xAlign;\n\t\tvar yAlign = vm.yAlign;\n\t\tvar ptX = tooltipPoint.x;\n\t\tvar ptY = tooltipPoint.y;\n\t\tvar width = size.width;\n\t\tvar height = size.height;\n\n\t\tif (yAlign === 'center') {\n\t\t\ty2 = ptY + (height / 2);\n\n\t\t\tif (xAlign === 'left') {\n\t\t\t\tx1 = ptX;\n\t\t\t\tx2 = x1 - caretSize;\n\t\t\t\tx3 = x1;\n\n\t\t\t\ty1 = y2 + caretSize;\n\t\t\t\ty3 = y2 - caretSize;\n\t\t\t} else {\n\t\t\t\tx1 = ptX + width;\n\t\t\t\tx2 = x1 + caretSize;\n\t\t\t\tx3 = x1;\n\n\t\t\t\ty1 = y2 - caretSize;\n\t\t\t\ty3 = y2 + caretSize;\n\t\t\t}\n\t\t} else {\n\t\t\tif (xAlign === 'left') {\n\t\t\t\tx2 = ptX + cornerRadius + (caretSize);\n\t\t\t\tx1 = x2 - caretSize;\n\t\t\t\tx3 = x2 + caretSize;\n\t\t\t} else if (xAlign === 'right') {\n\t\t\t\tx2 = ptX + width - cornerRadius - caretSize;\n\t\t\t\tx1 = x2 - caretSize;\n\t\t\t\tx3 = x2 + caretSize;\n\t\t\t} else {\n\t\t\t\tx2 = vm.caretX;\n\t\t\t\tx1 = x2 - caretSize;\n\t\t\t\tx3 = x2 + caretSize;\n\t\t\t}\n\t\t\tif (yAlign === 'top') {\n\t\t\t\ty1 = ptY;\n\t\t\t\ty2 = y1 - caretSize;\n\t\t\t\ty3 = y1;\n\t\t\t} else {\n\t\t\t\ty1 = ptY + height;\n\t\t\t\ty2 = y1 + caretSize;\n\t\t\t\ty3 = y1;\n\t\t\t\t// invert drawing order\n\t\t\t\tvar tmp = x3;\n\t\t\t\tx3 = x1;\n\t\t\t\tx1 = tmp;\n\t\t\t}\n\t\t}\n\t\treturn {x1: x1, x2: x2, x3: x3, y1: y1, y2: y2, y3: y3};\n\t},\n\n\tdrawTitle: function(pt, vm, ctx) {\n\t\tvar title = vm.title;\n\n\t\tif (title.length) {\n\t\t\tpt.x = getAlignedX(vm, vm._titleAlign);\n\n\t\t\tctx.textAlign = vm._titleAlign;\n\t\t\tctx.textBaseline = 'top';\n\n\t\t\tvar titleFontSize = vm.titleFontSize;\n\t\t\tvar titleSpacing = vm.titleSpacing;\n\n\t\t\tctx.fillStyle = vm.titleFontColor;\n\t\t\tctx.font = helpers$1.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);\n\n\t\t\tvar i, len;\n\t\t\tfor (i = 0, len = title.length; i < len; ++i) {\n\t\t\t\tctx.fillText(title[i], pt.x, pt.y);\n\t\t\t\tpt.y += titleFontSize + titleSpacing; // Line Height and spacing\n\n\t\t\t\tif (i + 1 === title.length) {\n\t\t\t\t\tpt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tdrawBody: function(pt, vm, ctx) {\n\t\tvar bodyFontSize = vm.bodyFontSize;\n\t\tvar bodySpacing = vm.bodySpacing;\n\t\tvar bodyAlign = vm._bodyAlign;\n\t\tvar body = vm.body;\n\t\tvar drawColorBoxes = vm.displayColors;\n\t\tvar labelColors = vm.labelColors;\n\t\tvar xLinePadding = 0;\n\t\tvar colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;\n\t\tvar textColor;\n\n\t\tctx.textAlign = bodyAlign;\n\t\tctx.textBaseline = 'top';\n\t\tctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);\n\n\t\tpt.x = getAlignedX(vm, bodyAlign);\n\n\t\t// Before Body\n\t\tvar fillLineOfText = function(line) {\n\t\t\tctx.fillText(line, pt.x + xLinePadding, pt.y);\n\t\t\tpt.y += bodyFontSize + bodySpacing;\n\t\t};\n\n\t\t// Before body lines\n\t\tctx.fillStyle = vm.bodyFontColor;\n\t\thelpers$1.each(vm.beforeBody, fillLineOfText);\n\n\t\txLinePadding = drawColorBoxes && bodyAlign !== 'right'\n\t\t\t? bodyAlign === 'center' ? (bodyFontSize / 2 + 1) : (bodyFontSize + 2)\n\t\t\t: 0;\n\n\t\t// Draw body lines now\n\t\thelpers$1.each(body, function(bodyItem, i) {\n\t\t\ttextColor = vm.labelTextColors[i];\n\t\t\tctx.fillStyle = textColor;\n\t\t\thelpers$1.each(bodyItem.before, fillLineOfText);\n\n\t\t\thelpers$1.each(bodyItem.lines, function(line) {\n\t\t\t\t// Draw Legend-like boxes if needed\n\t\t\t\tif (drawColorBoxes) {\n\t\t\t\t\t// Fill a white rect so that colours merge nicely if the opacity is < 1\n\t\t\t\t\tctx.fillStyle = vm.legendColorBackground;\n\t\t\t\t\tctx.fillRect(colorX, pt.y, bodyFontSize, bodyFontSize);\n\n\t\t\t\t\t// Border\n\t\t\t\t\tctx.lineWidth = 1;\n\t\t\t\t\tctx.strokeStyle = labelColors[i].borderColor;\n\t\t\t\t\tctx.strokeRect(colorX, pt.y, bodyFontSize, bodyFontSize);\n\n\t\t\t\t\t// Inner square\n\t\t\t\t\tctx.fillStyle = labelColors[i].backgroundColor;\n\t\t\t\t\tctx.fillRect(colorX + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);\n\t\t\t\t\tctx.fillStyle = textColor;\n\t\t\t\t}\n\n\t\t\t\tfillLineOfText(line);\n\t\t\t});\n\n\t\t\thelpers$1.each(bodyItem.after, fillLineOfText);\n\t\t});\n\n\t\t// Reset back to 0 for after body\n\t\txLinePadding = 0;\n\n\t\t// After body lines\n\t\thelpers$1.each(vm.afterBody, fillLineOfText);\n\t\tpt.y -= bodySpacing; // Remove last body spacing\n\t},\n\n\tdrawFooter: function(pt, vm, ctx) {\n\t\tvar footer = vm.footer;\n\n\t\tif (footer.length) {\n\t\t\tpt.x = getAlignedX(vm, vm._footerAlign);\n\t\t\tpt.y += vm.footerMarginTop;\n\n\t\t\tctx.textAlign = vm._footerAlign;\n\t\t\tctx.textBaseline = 'top';\n\n\t\t\tctx.fillStyle = vm.footerFontColor;\n\t\t\tctx.font = helpers$1.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);\n\n\t\t\thelpers$1.each(footer, function(line) {\n\t\t\t\tctx.fillText(line, pt.x, pt.y);\n\t\t\t\tpt.y += vm.footerFontSize + vm.footerSpacing;\n\t\t\t});\n\t\t}\n\t},\n\n\tdrawBackground: function(pt, vm, ctx, tooltipSize) {\n\t\tctx.fillStyle = vm.backgroundColor;\n\t\tctx.strokeStyle = vm.borderColor;\n\t\tctx.lineWidth = vm.borderWidth;\n\t\tvar xAlign = vm.xAlign;\n\t\tvar yAlign = vm.yAlign;\n\t\tvar x = pt.x;\n\t\tvar y = pt.y;\n\t\tvar width = tooltipSize.width;\n\t\tvar height = tooltipSize.height;\n\t\tvar radius = vm.cornerRadius;\n\n\t\tctx.beginPath();\n\t\tctx.moveTo(x + radius, y);\n\t\tif (yAlign === 'top') {\n\t\t\tthis.drawCaret(pt, tooltipSize);\n\t\t}\n\t\tctx.lineTo(x + width - radius, y);\n\t\tctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n\t\tif (yAlign === 'center' && xAlign === 'right') {\n\t\t\tthis.drawCaret(pt, tooltipSize);\n\t\t}\n\t\tctx.lineTo(x + width, y + height - radius);\n\t\tctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n\t\tif (yAlign === 'bottom') {\n\t\t\tthis.drawCaret(pt, tooltipSize);\n\t\t}\n\t\tctx.lineTo(x + radius, y + height);\n\t\tctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n\t\tif (yAlign === 'center' && xAlign === 'left') {\n\t\t\tthis.drawCaret(pt, tooltipSize);\n\t\t}\n\t\tctx.lineTo(x, y + radius);\n\t\tctx.quadraticCurveTo(x, y, x + radius, y);\n\t\tctx.closePath();\n\n\t\tctx.fill();\n\n\t\tif (vm.borderWidth > 0) {\n\t\t\tctx.stroke();\n\t\t}\n\t},\n\n\tdraw: function() {\n\t\tvar ctx = this._chart.ctx;\n\t\tvar vm = this._view;\n\n\t\tif (vm.opacity === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar tooltipSize = {\n\t\t\twidth: vm.width,\n\t\t\theight: vm.height\n\t\t};\n\t\tvar pt = {\n\t\t\tx: vm.x,\n\t\t\ty: vm.y\n\t\t};\n\n\t\t// IE11/Edge does not like very small opacities, so snap to 0\n\t\tvar opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;\n\n\t\t// Truthy/falsey value for empty tooltip\n\t\tvar hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;\n\n\t\tif (this._options.enabled && hasTooltipContent) {\n\t\t\tctx.save();\n\t\t\tctx.globalAlpha = opacity;\n\n\t\t\t// Draw Background\n\t\t\tthis.drawBackground(pt, vm, ctx, tooltipSize);\n\n\t\t\t// Draw Title, Body, and Footer\n\t\t\tpt.y += vm.yPadding;\n\n\t\t\t// Titles\n\t\t\tthis.drawTitle(pt, vm, ctx);\n\n\t\t\t// Body\n\t\t\tthis.drawBody(pt, vm, ctx);\n\n\t\t\t// Footer\n\t\t\tthis.drawFooter(pt, vm, ctx);\n\n\t\t\tctx.restore();\n\t\t}\n\t},\n\n\t/**\n\t * Handle an event\n\t * @private\n\t * @param {IEvent} event - The event to handle\n\t * @returns {boolean} true if the tooltip changed\n\t */\n\thandleEvent: function(e) {\n\t\tvar me = this;\n\t\tvar options = me._options;\n\t\tvar changed = false;\n\n\t\tme._lastActive = me._lastActive || [];\n\n\t\t// Find Active Elements for tooltips\n\t\tif (e.type === 'mouseout') {\n\t\t\tme._active = [];\n\t\t} else {\n\t\t\tme._active = me._chart.getElementsAtEventForMode(e, options.mode, options);\n\t\t}\n\n\t\t// Remember Last Actives\n\t\tchanged = !helpers$1.arrayEquals(me._active, me._lastActive);\n\n\t\t// Only handle target event on tooltip change\n\t\tif (changed) {\n\t\t\tme._lastActive = me._active;\n\n\t\t\tif (options.enabled || options.custom) {\n\t\t\t\tme._eventPosition = {\n\t\t\t\t\tx: e.x,\n\t\t\t\t\ty: e.y\n\t\t\t\t};\n\n\t\t\t\tme.update(true);\n\t\t\t\tme.pivot();\n\t\t\t}\n\t\t}\n\n\t\treturn changed;\n\t}\n});\n\n/**\n * @namespace Chart.Tooltip.positioners\n */\nvar positioners_1 = positioners;\n\nvar core_tooltip = exports$3;\ncore_tooltip.positioners = positioners_1;\n\nvar valueOrDefault$8 = helpers$1.valueOrDefault;\n\ncore_defaults._set('global', {\n\telements: {},\n\tevents: [\n\t\t'mousemove',\n\t\t'mouseout',\n\t\t'click',\n\t\t'touchstart',\n\t\t'touchmove'\n\t],\n\thover: {\n\t\tonHover: null,\n\t\tmode: 'nearest',\n\t\tintersect: true,\n\t\tanimationDuration: 400\n\t},\n\tonClick: null,\n\tmaintainAspectRatio: true,\n\tresponsive: true,\n\tresponsiveAnimationDuration: 0\n});\n\n/**\n * Recursively merge the given config objects representing the `scales` option\n * by incorporating scale defaults in `xAxes` and `yAxes` array items, then\n * returns a deep copy of the result, thus doesn't alter inputs.\n */\nfunction mergeScaleConfig(/* config objects ... */) {\n\treturn helpers$1.merge({}, [].slice.call(arguments), {\n\t\tmerger: function(key, target, source, options) {\n\t\t\tif (key === 'xAxes' || key === 'yAxes') {\n\t\t\t\tvar slen = source[key].length;\n\t\t\t\tvar i, type, scale;\n\n\t\t\t\tif (!target[key]) {\n\t\t\t\t\ttarget[key] = [];\n\t\t\t\t}\n\n\t\t\t\tfor (i = 0; i < slen; ++i) {\n\t\t\t\t\tscale = source[key][i];\n\t\t\t\t\ttype = valueOrDefault$8(scale.type, key === 'xAxes' ? 'category' : 'linear');\n\n\t\t\t\t\tif (i >= target[key].length) {\n\t\t\t\t\t\ttarget[key].push({});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!target[key][i].type || (scale.type && scale.type !== target[key][i].type)) {\n\t\t\t\t\t\t// new/untyped scale or type changed: let's apply the new defaults\n\t\t\t\t\t\t// then merge source scale to correctly overwrite the defaults.\n\t\t\t\t\t\thelpers$1.merge(target[key][i], [core_scaleService.getScaleDefaults(type), scale]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// scales type are the same\n\t\t\t\t\t\thelpers$1.merge(target[key][i], scale);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thelpers$1._merger(key, target, source, options);\n\t\t\t}\n\t\t}\n\t});\n}\n\n/**\n * Recursively merge the given config objects as the root options by handling\n * default scale options for the `scales` and `scale` properties, then returns\n * a deep copy of the result, thus doesn't alter inputs.\n */\nfunction mergeConfig(/* config objects ... */) {\n\treturn helpers$1.merge({}, [].slice.call(arguments), {\n\t\tmerger: function(key, target, source, options) {\n\t\t\tvar tval = target[key] || {};\n\t\t\tvar sval = source[key];\n\n\t\t\tif (key === 'scales') {\n\t\t\t\t// scale config merging is complex. Add our own function here for that\n\t\t\t\ttarget[key] = mergeScaleConfig(tval, sval);\n\t\t\t} else if (key === 'scale') {\n\t\t\t\t// used in polar area & radar charts since there is only one scale\n\t\t\t\ttarget[key] = helpers$1.merge(tval, [core_scaleService.getScaleDefaults(sval.type), sval]);\n\t\t\t} else {\n\t\t\t\thelpers$1._merger(key, target, source, options);\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction initConfig(config) {\n\tconfig = config || {};\n\n\t// Do NOT use mergeConfig for the data object because this method merges arrays\n\t// and so would change references to labels and datasets, preventing data updates.\n\tvar data = config.data = config.data || {};\n\tdata.datasets = data.datasets || [];\n\tdata.labels = data.labels || [];\n\n\tconfig.options = mergeConfig(\n\t\tcore_defaults.global,\n\t\tcore_defaults[config.type],\n\t\tconfig.options || {});\n\n\treturn config;\n}\n\nfunction updateConfig(chart) {\n\tvar newOptions = chart.options;\n\n\thelpers$1.each(chart.scales, function(scale) {\n\t\tcore_layouts.removeBox(chart, scale);\n\t});\n\n\tnewOptions = mergeConfig(\n\t\tcore_defaults.global,\n\t\tcore_defaults[chart.config.type],\n\t\tnewOptions);\n\n\tchart.options = chart.config.options = newOptions;\n\tchart.ensureScalesHaveIDs();\n\tchart.buildOrUpdateScales();\n\n\t// Tooltip\n\tchart.tooltip._options = newOptions.tooltips;\n\tchart.tooltip.initialize();\n}\n\nfunction positionIsHorizontal(position) {\n\treturn position === 'top' || position === 'bottom';\n}\n\nvar Chart = function(item, config) {\n\tthis.construct(item, config);\n\treturn this;\n};\n\nhelpers$1.extend(Chart.prototype, /** @lends Chart */ {\n\t/**\n\t * @private\n\t */\n\tconstruct: function(item, config) {\n\t\tvar me = this;\n\n\t\tconfig = initConfig(config);\n\n\t\tvar context = platform.acquireContext(item, config);\n\t\tvar canvas = context && context.canvas;\n\t\tvar height = canvas && canvas.height;\n\t\tvar width = canvas && canvas.width;\n\n\t\tme.id = helpers$1.uid();\n\t\tme.ctx = context;\n\t\tme.canvas = canvas;\n\t\tme.config = config;\n\t\tme.width = width;\n\t\tme.height = height;\n\t\tme.aspectRatio = height ? width / height : null;\n\t\tme.options = config.options;\n\t\tme._bufferedRender = false;\n\n\t\t/**\n\t\t * Provided for backward compatibility, Chart and Chart.Controller have been merged,\n\t\t * the \"instance\" still need to be defined since it might be called from plugins.\n\t\t * @prop Chart#chart\n\t\t * @deprecated since version 2.6.0\n\t\t * @todo remove at version 3\n\t\t * @private\n\t\t */\n\t\tme.chart = me;\n\t\tme.controller = me; // chart.chart.controller #inception\n\n\t\t// Add the chart instance to the global namespace\n\t\tChart.instances[me.id] = me;\n\n\t\t// Define alias to the config data: `chart.data === chart.config.data`\n\t\tObject.defineProperty(me, 'data', {\n\t\t\tget: function() {\n\t\t\t\treturn me.config.data;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tme.config.data = value;\n\t\t\t}\n\t\t});\n\n\t\tif (!context || !canvas) {\n\t\t\t// The given item is not a compatible context2d element, let's return before finalizing\n\t\t\t// the chart initialization but after setting basic chart / controller properties that\n\t\t\t// can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n\t\t\t// https://github.com/chartjs/Chart.js/issues/2807\n\t\t\tconsole.error(\"Failed to create chart: can't acquire context from the given item\");\n\t\t\treturn;\n\t\t}\n\n\t\tme.initialize();\n\t\tme.update();\n\t},\n\n\t/**\n\t * @private\n\t */\n\tinitialize: function() {\n\t\tvar me = this;\n\n\t\t// Before init plugin notification\n\t\tcore_plugins.notify(me, 'beforeInit');\n\n\t\thelpers$1.retinaScale(me, me.options.devicePixelRatio);\n\n\t\tme.bindEvents();\n\n\t\tif (me.options.responsive) {\n\t\t\t// Initial resize before chart draws (must be silent to preserve initial animations).\n\t\t\tme.resize(true);\n\t\t}\n\n\t\t// Make sure scales have IDs and are built before we build any controllers.\n\t\tme.ensureScalesHaveIDs();\n\t\tme.buildOrUpdateScales();\n\t\tme.initToolTip();\n\n\t\t// After init plugin notification\n\t\tcore_plugins.notify(me, 'afterInit');\n\n\t\treturn me;\n\t},\n\n\tclear: function() {\n\t\thelpers$1.canvas.clear(this);\n\t\treturn this;\n\t},\n\n\tstop: function() {\n\t\t// Stops any current animation loop occurring\n\t\tcore_animations.cancelAnimation(this);\n\t\treturn this;\n\t},\n\n\tresize: function(silent) {\n\t\tvar me = this;\n\t\tvar options = me.options;\n\t\tvar canvas = me.canvas;\n\t\tvar aspectRatio = (options.maintainAspectRatio && me.aspectRatio) || null;\n\n\t\t// the canvas render width and height will be casted to integers so make sure that\n\t\t// the canvas display style uses the same integer values to avoid blurring effect.\n\n\t\t// Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collapsed\n\t\tvar newWidth = Math.max(0, Math.floor(helpers$1.getMaximumWidth(canvas)));\n\t\tvar newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers$1.getMaximumHeight(canvas)));\n\n\t\tif (me.width === newWidth && me.height === newHeight) {\n\t\t\treturn;\n\t\t}\n\n\t\tcanvas.width = me.width = newWidth;\n\t\tcanvas.height = me.height = newHeight;\n\t\tcanvas.style.width = newWidth + 'px';\n\t\tcanvas.style.height = newHeight + 'px';\n\n\t\thelpers$1.retinaScale(me, options.devicePixelRatio);\n\n\t\tif (!silent) {\n\t\t\t// Notify any plugins about the resize\n\t\t\tvar newSize = {width: newWidth, height: newHeight};\n\t\t\tcore_plugins.notify(me, 'resize', [newSize]);\n\n\t\t\t// Notify of resize\n\t\t\tif (options.onResize) {\n\t\t\t\toptions.onResize(me, newSize);\n\t\t\t}\n\n\t\t\tme.stop();\n\t\t\tme.update({\n\t\t\t\tduration: options.responsiveAnimationDuration\n\t\t\t});\n\t\t}\n\t},\n\n\tensureScalesHaveIDs: function() {\n\t\tvar options = this.options;\n\t\tvar scalesOptions = options.scales || {};\n\t\tvar scaleOptions = options.scale;\n\n\t\thelpers$1.each(scalesOptions.xAxes, function(xAxisOptions, index) {\n\t\t\txAxisOptions.id = xAxisOptions.id || ('x-axis-' + index);\n\t\t});\n\n\t\thelpers$1.each(scalesOptions.yAxes, function(yAxisOptions, index) {\n\t\t\tyAxisOptions.id = yAxisOptions.id || ('y-axis-' + index);\n\t\t});\n\n\t\tif (scaleOptions) {\n\t\t\tscaleOptions.id = scaleOptions.id || 'scale';\n\t\t}\n\t},\n\n\t/**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n\tbuildOrUpdateScales: function() {\n\t\tvar me = this;\n\t\tvar options = me.options;\n\t\tvar scales = me.scales || {};\n\t\tvar items = [];\n\t\tvar updated = Object.keys(scales).reduce(function(obj, id) {\n\t\t\tobj[id] = false;\n\t\t\treturn obj;\n\t\t}, {});\n\n\t\tif (options.scales) {\n\t\t\titems = items.concat(\n\t\t\t\t(options.scales.xAxes || []).map(function(xAxisOptions) {\n\t\t\t\t\treturn {options: xAxisOptions, dtype: 'category', dposition: 'bottom'};\n\t\t\t\t}),\n\t\t\t\t(options.scales.yAxes || []).map(function(yAxisOptions) {\n\t\t\t\t\treturn {options: yAxisOptions, dtype: 'linear', dposition: 'left'};\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\n\t\tif (options.scale) {\n\t\t\titems.push({\n\t\t\t\toptions: options.scale,\n\t\t\t\tdtype: 'radialLinear',\n\t\t\t\tisDefault: true,\n\t\t\t\tdposition: 'chartArea'\n\t\t\t});\n\t\t}\n\n\t\thelpers$1.each(items, function(item) {\n\t\t\tvar scaleOptions = item.options;\n\t\t\tvar id = scaleOptions.id;\n\t\t\tvar scaleType = valueOrDefault$8(scaleOptions.type, item.dtype);\n\n\t\t\tif (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {\n\t\t\t\tscaleOptions.position = item.dposition;\n\t\t\t}\n\n\t\t\tupdated[id] = true;\n\t\t\tvar scale = null;\n\t\t\tif (id in scales && scales[id].type === scaleType) {\n\t\t\t\tscale = scales[id];\n\t\t\t\tscale.options = scaleOptions;\n\t\t\t\tscale.ctx = me.ctx;\n\t\t\t\tscale.chart = me;\n\t\t\t} else {\n\t\t\t\tvar scaleClass = core_scaleService.getScaleConstructor(scaleType);\n\t\t\t\tif (!scaleClass) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tscale = new scaleClass({\n\t\t\t\t\tid: id,\n\t\t\t\t\ttype: scaleType,\n\t\t\t\t\toptions: scaleOptions,\n\t\t\t\t\tctx: me.ctx,\n\t\t\t\t\tchart: me\n\t\t\t\t});\n\t\t\t\tscales[scale.id] = scale;\n\t\t\t}\n\n\t\t\tscale.mergeTicksOptions();\n\n\t\t\t// TODO(SB): I think we should be able to remove this custom case (options.scale)\n\t\t\t// and consider it as a regular scale part of the \"scales\"\" map only! This would\n\t\t\t// make the logic easier and remove some useless? custom code.\n\t\t\tif (item.isDefault) {\n\t\t\t\tme.scale = scale;\n\t\t\t}\n\t\t});\n\t\t// clear up discarded scales\n\t\thelpers$1.each(updated, function(hasUpdated, id) {\n\t\t\tif (!hasUpdated) {\n\t\t\t\tdelete scales[id];\n\t\t\t}\n\t\t});\n\n\t\tme.scales = scales;\n\n\t\tcore_scaleService.addScalesToLayout(this);\n\t},\n\n\tbuildOrUpdateControllers: function() {\n\t\tvar me = this;\n\t\tvar newControllers = [];\n\n\t\thelpers$1.each(me.data.datasets, function(dataset, datasetIndex) {\n\t\t\tvar meta = me.getDatasetMeta(datasetIndex);\n\t\t\tvar type = dataset.type || me.config.type;\n\n\t\t\tif (meta.type && meta.type !== type) {\n\t\t\t\tme.destroyDatasetMeta(datasetIndex);\n\t\t\t\tmeta = me.getDatasetMeta(datasetIndex);\n\t\t\t}\n\t\t\tmeta.type = type;\n\n\t\t\tif (meta.controller) {\n\t\t\t\tmeta.controller.updateIndex(datasetIndex);\n\t\t\t\tmeta.controller.linkScales();\n\t\t\t} else {\n\t\t\t\tvar ControllerClass = controllers[meta.type];\n\t\t\t\tif (ControllerClass === undefined) {\n\t\t\t\t\tthrow new Error('\"' + meta.type + '\" is not a chart type.');\n\t\t\t\t}\n\n\t\t\t\tmeta.controller = new ControllerClass(me, datasetIndex);\n\t\t\t\tnewControllers.push(meta.controller);\n\t\t\t}\n\t\t}, me);\n\n\t\treturn newControllers;\n\t},\n\n\t/**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n\tresetElements: function() {\n\t\tvar me = this;\n\t\thelpers$1.each(me.data.datasets, function(dataset, datasetIndex) {\n\t\t\tme.getDatasetMeta(datasetIndex).controller.reset();\n\t\t}, me);\n\t},\n\n\t/**\n\t* Resets the chart back to it's state before the initial animation\n\t*/\n\treset: function() {\n\t\tthis.resetElements();\n\t\tthis.tooltip.initialize();\n\t},\n\n\tupdate: function(config) {\n\t\tvar me = this;\n\n\t\tif (!config || typeof config !== 'object') {\n\t\t\t// backwards compatibility\n\t\t\tconfig = {\n\t\t\t\tduration: config,\n\t\t\t\tlazy: arguments[1]\n\t\t\t};\n\t\t}\n\n\t\tupdateConfig(me);\n\n\t\t// plugins options references might have change, let's invalidate the cache\n\t\t// https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n\t\tcore_plugins._invalidate(me);\n\n\t\tif (core_plugins.notify(me, 'beforeUpdate') === false) {\n\t\t\treturn;\n\t\t}\n\n\t\t// In case the entire data object changed\n\t\tme.tooltip._data = me.data;\n\n\t\t// Make sure dataset controllers are updated and new controllers are reset\n\t\tvar newControllers = me.buildOrUpdateControllers();\n\n\t\t// Make sure all dataset controllers have correct meta data counts\n\t\thelpers$1.each(me.data.datasets, function(dataset, datasetIndex) {\n\t\t\tme.getDatasetMeta(datasetIndex).controller.buildOrUpdateElements();\n\t\t}, me);\n\n\t\tme.updateLayout();\n\n\t\t// Can only reset the new controllers after the scales have been updated\n\t\tif (me.options.animation && me.options.animation.duration) {\n\t\t\thelpers$1.each(newControllers, function(controller) {\n\t\t\t\tcontroller.reset();\n\t\t\t});\n\t\t}\n\n\t\tme.updateDatasets();\n\n\t\t// Need to reset tooltip in case it is displayed with elements that are removed\n\t\t// after update.\n\t\tme.tooltip.initialize();\n\n\t\t// Last active contains items that were previously in the tooltip.\n\t\t// When we reset the tooltip, we need to clear it\n\t\tme.lastActive = [];\n\n\t\t// Do this before render so that any plugins that need final scale updates can use it\n\t\tcore_plugins.notify(me, 'afterUpdate');\n\n\t\tif (me._bufferedRender) {\n\t\t\tme._bufferedRequest = {\n\t\t\t\tduration: config.duration,\n\t\t\t\teasing: config.easing,\n\t\t\t\tlazy: config.lazy\n\t\t\t};\n\t\t} else {\n\t\t\tme.render(config);\n\t\t}\n\t},\n\n\t/**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n\tupdateLayout: function() {\n\t\tvar me = this;\n\n\t\tif (core_plugins.notify(me, 'beforeLayout') === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tcore_layouts.update(this, this.width, this.height);\n\n\t\t/**\n\t\t * Provided for backward compatibility, use `afterLayout` instead.\n\t\t * @method IPlugin#afterScaleUpdate\n\t\t * @deprecated since version 2.5.0\n\t\t * @todo remove at version 3\n\t\t * @private\n\t\t */\n\t\tcore_plugins.notify(me, 'afterScaleUpdate');\n\t\tcore_plugins.notify(me, 'afterLayout');\n\t},\n\n\t/**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n\tupdateDatasets: function() {\n\t\tvar me = this;\n\n\t\tif (core_plugins.notify(me, 'beforeDatasetsUpdate') === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n\t\t\tme.updateDataset(i);\n\t\t}\n\n\t\tcore_plugins.notify(me, 'afterDatasetsUpdate');\n\t},\n\n\t/**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n\tupdateDataset: function(index) {\n\t\tvar me = this;\n\t\tvar meta = me.getDatasetMeta(index);\n\t\tvar args = {\n\t\t\tmeta: meta,\n\t\t\tindex: index\n\t\t};\n\n\t\tif (core_plugins.notify(me, 'beforeDatasetUpdate', [args]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tmeta.controller.update();\n\n\t\tcore_plugins.notify(me, 'afterDatasetUpdate', [args]);\n\t},\n\n\trender: function(config) {\n\t\tvar me = this;\n\n\t\tif (!config || typeof config !== 'object') {\n\t\t\t// backwards compatibility\n\t\t\tconfig = {\n\t\t\t\tduration: config,\n\t\t\t\tlazy: arguments[1]\n\t\t\t};\n\t\t}\n\n\t\tvar animationOptions = me.options.animation;\n\t\tvar duration = valueOrDefault$8(config.duration, animationOptions && animationOptions.duration);\n\t\tvar lazy = config.lazy;\n\n\t\tif (core_plugins.notify(me, 'beforeRender') === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar onComplete = function(animation) {\n\t\t\tcore_plugins.notify(me, 'afterRender');\n\t\t\thelpers$1.callback(animationOptions && animationOptions.onComplete, [animation], me);\n\t\t};\n\n\t\tif (animationOptions && duration) {\n\t\t\tvar animation = new core_animation({\n\t\t\t\tnumSteps: duration / 16.66, // 60 fps\n\t\t\t\teasing: config.easing || animationOptions.easing,\n\n\t\t\t\trender: function(chart, animationObject) {\n\t\t\t\t\tvar easingFunction = helpers$1.easing.effects[animationObject.easing];\n\t\t\t\t\tvar currentStep = animationObject.currentStep;\n\t\t\t\t\tvar stepDecimal = currentStep / animationObject.numSteps;\n\n\t\t\t\t\tchart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);\n\t\t\t\t},\n\n\t\t\t\tonAnimationProgress: animationOptions.onProgress,\n\t\t\t\tonAnimationComplete: onComplete\n\t\t\t});\n\n\t\t\tcore_animations.addAnimation(me, animation, duration, lazy);\n\t\t} else {\n\t\t\tme.draw();\n\n\t\t\t// See https://github.com/chartjs/Chart.js/issues/3781\n\t\t\tonComplete(new core_animation({numSteps: 0, chart: me}));\n\t\t}\n\n\t\treturn me;\n\t},\n\n\tdraw: function(easingValue) {\n\t\tvar me = this;\n\n\t\tme.clear();\n\n\t\tif (helpers$1.isNullOrUndef(easingValue)) {\n\t\t\teasingValue = 1;\n\t\t}\n\n\t\tme.transition(easingValue);\n\n\t\tif (me.width <= 0 || me.height <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (core_plugins.notify(me, 'beforeDraw', [easingValue]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Draw all the scales\n\t\thelpers$1.each(me.boxes, function(box) {\n\t\t\tbox.draw(me.chartArea);\n\t\t}, me);\n\n\t\tme.drawDatasets(easingValue);\n\t\tme._drawTooltip(easingValue);\n\n\t\tcore_plugins.notify(me, 'afterDraw', [easingValue]);\n\t},\n\n\t/**\n\t * @private\n\t */\n\ttransition: function(easingValue) {\n\t\tvar me = this;\n\n\t\tfor (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {\n\t\t\tif (me.isDatasetVisible(i)) {\n\t\t\t\tme.getDatasetMeta(i).controller.transition(easingValue);\n\t\t\t}\n\t\t}\n\n\t\tme.tooltip.transition(easingValue);\n\t},\n\n\t/**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n\tdrawDatasets: function(easingValue) {\n\t\tvar me = this;\n\n\t\tif (core_plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Draw datasets reversed to support proper line stacking\n\t\tfor (var i = (me.data.datasets || []).length - 1; i >= 0; --i) {\n\t\t\tif (me.isDatasetVisible(i)) {\n\t\t\t\tme.drawDataset(i, easingValue);\n\t\t\t}\n\t\t}\n\n\t\tcore_plugins.notify(me, 'afterDatasetsDraw', [easingValue]);\n\t},\n\n\t/**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n\tdrawDataset: function(index, easingValue) {\n\t\tvar me = this;\n\t\tvar meta = me.getDatasetMeta(index);\n\t\tvar args = {\n\t\t\tmeta: meta,\n\t\t\tindex: index,\n\t\t\teasingValue: easingValue\n\t\t};\n\n\t\tif (core_plugins.notify(me, 'beforeDatasetDraw', [args]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tmeta.controller.draw(easingValue);\n\n\t\tcore_plugins.notify(me, 'afterDatasetDraw', [args]);\n\t},\n\n\t/**\n\t * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`\n\t * hook, in which case, plugins will not be called on `afterTooltipDraw`.\n\t * @private\n\t */\n\t_drawTooltip: function(easingValue) {\n\t\tvar me = this;\n\t\tvar tooltip = me.tooltip;\n\t\tvar args = {\n\t\t\ttooltip: tooltip,\n\t\t\teasingValue: easingValue\n\t\t};\n\n\t\tif (core_plugins.notify(me, 'beforeTooltipDraw', [args]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\ttooltip.draw();\n\n\t\tcore_plugins.notify(me, 'afterTooltipDraw', [args]);\n\t},\n\n\t/**\n\t * Get the single element that was clicked on\n\t * @return An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw\n\t */\n\tgetElementAtEvent: function(e) {\n\t\treturn core_interaction.modes.single(this, e);\n\t},\n\n\tgetElementsAtEvent: function(e) {\n\t\treturn core_interaction.modes.label(this, e, {intersect: true});\n\t},\n\n\tgetElementsAtXAxis: function(e) {\n\t\treturn core_interaction.modes['x-axis'](this, e, {intersect: true});\n\t},\n\n\tgetElementsAtEventForMode: function(e, mode, options) {\n\t\tvar method = core_interaction.modes[mode];\n\t\tif (typeof method === 'function') {\n\t\t\treturn method(this, e, options);\n\t\t}\n\n\t\treturn [];\n\t},\n\n\tgetDatasetAtEvent: function(e) {\n\t\treturn core_interaction.modes.dataset(this, e, {intersect: true});\n\t},\n\n\tgetDatasetMeta: function(datasetIndex) {\n\t\tvar me = this;\n\t\tvar dataset = me.data.datasets[datasetIndex];\n\t\tif (!dataset._meta) {\n\t\t\tdataset._meta = {};\n\t\t}\n\n\t\tvar meta = dataset._meta[me.id];\n\t\tif (!meta) {\n\t\t\tmeta = dataset._meta[me.id] = {\n\t\t\t\ttype: null,\n\t\t\t\tdata: [],\n\t\t\t\tdataset: null,\n\t\t\t\tcontroller: null,\n\t\t\t\thidden: null,\t\t\t// See isDatasetVisible() comment\n\t\t\t\txAxisID: null,\n\t\t\t\tyAxisID: null\n\t\t\t};\n\t\t}\n\n\t\treturn meta;\n\t},\n\n\tgetVisibleDatasetCount: function() {\n\t\tvar count = 0;\n\t\tfor (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n\t\t\tif (this.isDatasetVisible(i)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t},\n\n\tisDatasetVisible: function(datasetIndex) {\n\t\tvar meta = this.getDatasetMeta(datasetIndex);\n\n\t\t// meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n\t\t// the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n\t\treturn typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;\n\t},\n\n\tgenerateLegend: function() {\n\t\treturn this.options.legendCallback(this);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tdestroyDatasetMeta: function(datasetIndex) {\n\t\tvar id = this.id;\n\t\tvar dataset = this.data.datasets[datasetIndex];\n\t\tvar meta = dataset._meta && dataset._meta[id];\n\n\t\tif (meta) {\n\t\t\tmeta.controller.destroy();\n\t\t\tdelete dataset._meta[id];\n\t\t}\n\t},\n\n\tdestroy: function() {\n\t\tvar me = this;\n\t\tvar canvas = me.canvas;\n\t\tvar i, ilen;\n\n\t\tme.stop();\n\n\t\t// dataset controllers need to cleanup associated data\n\t\tfor (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n\t\t\tme.destroyDatasetMeta(i);\n\t\t}\n\n\t\tif (canvas) {\n\t\t\tme.unbindEvents();\n\t\t\thelpers$1.canvas.clear(me);\n\t\t\tplatform.releaseContext(me.ctx);\n\t\t\tme.canvas = null;\n\t\t\tme.ctx = null;\n\t\t}\n\n\t\tcore_plugins.notify(me, 'destroy');\n\n\t\tdelete Chart.instances[me.id];\n\t},\n\n\ttoBase64Image: function() {\n\t\treturn this.canvas.toDataURL.apply(this.canvas, arguments);\n\t},\n\n\tinitToolTip: function() {\n\t\tvar me = this;\n\t\tme.tooltip = new core_tooltip({\n\t\t\t_chart: me,\n\t\t\t_chartInstance: me, // deprecated, backward compatibility\n\t\t\t_data: me.data,\n\t\t\t_options: me.options.tooltips\n\t\t}, me);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tbindEvents: function() {\n\t\tvar me = this;\n\t\tvar listeners = me._listeners = {};\n\t\tvar listener = function() {\n\t\t\tme.eventHandler.apply(me, arguments);\n\t\t};\n\n\t\thelpers$1.each(me.options.events, function(type) {\n\t\t\tplatform.addEventListener(me, type, listener);\n\t\t\tlisteners[type] = listener;\n\t\t});\n\n\t\t// Elements used to detect size change should not be injected for non responsive charts.\n\t\t// See https://github.com/chartjs/Chart.js/issues/2210\n\t\tif (me.options.responsive) {\n\t\t\tlistener = function() {\n\t\t\t\tme.resize();\n\t\t\t};\n\n\t\t\tplatform.addEventListener(me, 'resize', listener);\n\t\t\tlisteners.resize = listener;\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\tunbindEvents: function() {\n\t\tvar me = this;\n\t\tvar listeners = me._listeners;\n\t\tif (!listeners) {\n\t\t\treturn;\n\t\t}\n\n\t\tdelete me._listeners;\n\t\thelpers$1.each(listeners, function(listener, type) {\n\t\t\tplatform.removeEventListener(me, type, listener);\n\t\t});\n\t},\n\n\tupdateHoverStyle: function(elements, mode, enabled) {\n\t\tvar method = enabled ? 'setHoverStyle' : 'removeHoverStyle';\n\t\tvar element, i, ilen;\n\n\t\tfor (i = 0, ilen = elements.length; i < ilen; ++i) {\n\t\t\telement = elements[i];\n\t\t\tif (element) {\n\t\t\t\tthis.getDatasetMeta(element._datasetIndex).controller[method](element);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\teventHandler: function(e) {\n\t\tvar me = this;\n\t\tvar tooltip = me.tooltip;\n\n\t\tif (core_plugins.notify(me, 'beforeEvent', [e]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Buffer any update calls so that renders do not occur\n\t\tme._bufferedRender = true;\n\t\tme._bufferedRequest = null;\n\n\t\tvar changed = me.handleEvent(e);\n\t\t// for smooth tooltip animations issue #4989\n\t\t// the tooltip should be the source of change\n\t\t// Animation check workaround:\n\t\t// tooltip._start will be null when tooltip isn't animating\n\t\tif (tooltip) {\n\t\t\tchanged = tooltip._start\n\t\t\t\t? tooltip.handleEvent(e)\n\t\t\t\t: changed | tooltip.handleEvent(e);\n\t\t}\n\n\t\tcore_plugins.notify(me, 'afterEvent', [e]);\n\n\t\tvar bufferedRequest = me._bufferedRequest;\n\t\tif (bufferedRequest) {\n\t\t\t// If we have an update that was triggered, we need to do a normal render\n\t\t\tme.render(bufferedRequest);\n\t\t} else if (changed && !me.animating) {\n\t\t\t// If entering, leaving, or changing elements, animate the change via pivot\n\t\t\tme.stop();\n\n\t\t\t// We only need to render at this point. Updating will cause scales to be\n\t\t\t// recomputed generating flicker & using more memory than necessary.\n\t\t\tme.render({\n\t\t\t\tduration: me.options.hover.animationDuration,\n\t\t\t\tlazy: true\n\t\t\t});\n\t\t}\n\n\t\tme._bufferedRender = false;\n\t\tme._bufferedRequest = null;\n\n\t\treturn me;\n\t},\n\n\t/**\n\t * Handle an event\n\t * @private\n\t * @param {IEvent} event the event to handle\n\t * @return {boolean} true if the chart needs to re-render\n\t */\n\thandleEvent: function(e) {\n\t\tvar me = this;\n\t\tvar options = me.options || {};\n\t\tvar hoverOptions = options.hover;\n\t\tvar changed = false;\n\n\t\tme.lastActive = me.lastActive || [];\n\n\t\t// Find Active Elements for hover and tooltips\n\t\tif (e.type === 'mouseout') {\n\t\t\tme.active = [];\n\t\t} else {\n\t\t\tme.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);\n\t\t}\n\n\t\t// Invoke onHover hook\n\t\t// Need to call with native event here to not break backwards compatibility\n\t\thelpers$1.callback(options.onHover || options.hover.onHover, [e.native, me.active], me);\n\n\t\tif (e.type === 'mouseup' || e.type === 'click') {\n\t\t\tif (options.onClick) {\n\t\t\t\t// Use e.native here for backwards compatibility\n\t\t\t\toptions.onClick.call(me, e.native, me.active);\n\t\t\t}\n\t\t}\n\n\t\t// Remove styling for last active (even if it may still be active)\n\t\tif (me.lastActive.length) {\n\t\t\tme.updateHoverStyle(me.lastActive, hoverOptions.mode, false);\n\t\t}\n\n\t\t// Built in hover styling\n\t\tif (me.active.length && hoverOptions.mode) {\n\t\t\tme.updateHoverStyle(me.active, hoverOptions.mode, true);\n\t\t}\n\n\t\tchanged = !helpers$1.arrayEquals(me.active, me.lastActive);\n\n\t\t// Remember Last Actives\n\t\tme.lastActive = me.active;\n\n\t\treturn changed;\n\t}\n});\n\n/**\n * NOTE(SB) We actually don't use this container anymore but we need to keep it\n * for backward compatibility. Though, it can still be useful for plugins that\n * would need to work on multiple charts?!\n */\nChart.instances = {};\n\nvar core_controller = Chart;\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart instead.\n * @class Chart.Controller\n * @deprecated since version 2.6\n * @todo remove at version 3\n * @private\n */\nChart.Controller = Chart;\n\n/**\n * Provided for backward compatibility, not available anymore.\n * @namespace Chart\n * @deprecated since version 2.8\n * @todo remove at version 3\n * @private\n */\nChart.types = {};\n\n/**\n * Provided for backward compatibility, not available anymore.\n * @namespace Chart.helpers.configMerge\n * @deprecated since version 2.8.0\n * @todo remove at version 3\n * @private\n */\nhelpers$1.configMerge = mergeConfig;\n\n/**\n * Provided for backward compatibility, not available anymore.\n * @namespace Chart.helpers.scaleMerge\n * @deprecated since version 2.8.0\n * @todo remove at version 3\n * @private\n */\nhelpers$1.scaleMerge = mergeScaleConfig;\n\nvar core_helpers = function() {\n\n\t// -- Basic js utility methods\n\n\thelpers$1.where = function(collection, filterCallback) {\n\t\tif (helpers$1.isArray(collection) && Array.prototype.filter) {\n\t\t\treturn collection.filter(filterCallback);\n\t\t}\n\t\tvar filtered = [];\n\n\t\thelpers$1.each(collection, function(item) {\n\t\t\tif (filterCallback(item)) {\n\t\t\t\tfiltered.push(item);\n\t\t\t}\n\t\t});\n\n\t\treturn filtered;\n\t};\n\thelpers$1.findIndex = Array.prototype.findIndex ?\n\t\tfunction(array, callback, scope) {\n\t\t\treturn array.findIndex(callback, scope);\n\t\t} :\n\t\tfunction(array, callback, scope) {\n\t\t\tscope = scope === undefined ? array : scope;\n\t\t\tfor (var i = 0, ilen = array.length; i < ilen; ++i) {\n\t\t\t\tif (callback.call(scope, array[i], i, array)) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t};\n\thelpers$1.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {\n\t\t// Default to start of the array\n\t\tif (helpers$1.isNullOrUndef(startIndex)) {\n\t\t\tstartIndex = -1;\n\t\t}\n\t\tfor (var i = startIndex + 1; i < arrayToSearch.length; i++) {\n\t\t\tvar currentItem = arrayToSearch[i];\n\t\t\tif (filterCallback(currentItem)) {\n\t\t\t\treturn currentItem;\n\t\t\t}\n\t\t}\n\t};\n\thelpers$1.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {\n\t\t// Default to end of the array\n\t\tif (helpers$1.isNullOrUndef(startIndex)) {\n\t\t\tstartIndex = arrayToSearch.length;\n\t\t}\n\t\tfor (var i = startIndex - 1; i >= 0; i--) {\n\t\t\tvar currentItem = arrayToSearch[i];\n\t\t\tif (filterCallback(currentItem)) {\n\t\t\t\treturn currentItem;\n\t\t\t}\n\t\t}\n\t};\n\n\t// -- Math methods\n\thelpers$1.isNumber = function(n) {\n\t\treturn !isNaN(parseFloat(n)) && isFinite(n);\n\t};\n\thelpers$1.almostEquals = function(x, y, epsilon) {\n\t\treturn Math.abs(x - y) < epsilon;\n\t};\n\thelpers$1.almostWhole = function(x, epsilon) {\n\t\tvar rounded = Math.round(x);\n\t\treturn (((rounded - epsilon) < x) && ((rounded + epsilon) > x));\n\t};\n\thelpers$1.max = function(array) {\n\t\treturn array.reduce(function(max, value) {\n\t\t\tif (!isNaN(value)) {\n\t\t\t\treturn Math.max(max, value);\n\t\t\t}\n\t\t\treturn max;\n\t\t}, Number.NEGATIVE_INFINITY);\n\t};\n\thelpers$1.min = function(array) {\n\t\treturn array.reduce(function(min, value) {\n\t\t\tif (!isNaN(value)) {\n\t\t\t\treturn Math.min(min, value);\n\t\t\t}\n\t\t\treturn min;\n\t\t}, Number.POSITIVE_INFINITY);\n\t};\n\thelpers$1.sign = Math.sign ?\n\t\tfunction(x) {\n\t\t\treturn Math.sign(x);\n\t\t} :\n\t\tfunction(x) {\n\t\t\tx = +x; // convert to a number\n\t\t\tif (x === 0 || isNaN(x)) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\treturn x > 0 ? 1 : -1;\n\t\t};\n\thelpers$1.log10 = Math.log10 ?\n\t\tfunction(x) {\n\t\t\treturn Math.log10(x);\n\t\t} :\n\t\tfunction(x) {\n\t\t\tvar exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.\n\t\t\t// Check for whole powers of 10,\n\t\t\t// which due to floating point rounding error should be corrected.\n\t\t\tvar powerOf10 = Math.round(exponent);\n\t\t\tvar isPowerOf10 = x === Math.pow(10, powerOf10);\n\n\t\t\treturn isPowerOf10 ? powerOf10 : exponent;\n\t\t};\n\thelpers$1.toRadians = function(degrees) {\n\t\treturn degrees * (Math.PI / 180);\n\t};\n\thelpers$1.toDegrees = function(radians) {\n\t\treturn radians * (180 / Math.PI);\n\t};\n\n\t/**\n\t * Returns the number of decimal places\n\t * i.e. the number of digits after the decimal point, of the value of this Number.\n\t * @param {number} x - A number.\n\t * @returns {number} The number of decimal places.\n\t * @private\n\t */\n\thelpers$1._decimalPlaces = function(x) {\n\t\tif (!helpers$1.isFinite(x)) {\n\t\t\treturn;\n\t\t}\n\t\tvar e = 1;\n\t\tvar p = 0;\n\t\twhile (Math.round(x * e) / e !== x) {\n\t\t\te *= 10;\n\t\t\tp++;\n\t\t}\n\t\treturn p;\n\t};\n\n\t// Gets the angle from vertical upright to the point about a centre.\n\thelpers$1.getAngleFromPoint = function(centrePoint, anglePoint) {\n\t\tvar distanceFromXCenter = anglePoint.x - centrePoint.x;\n\t\tvar distanceFromYCenter = anglePoint.y - centrePoint.y;\n\t\tvar radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n\n\t\tvar angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n\n\t\tif (angle < (-0.5 * Math.PI)) {\n\t\t\tangle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n\t\t}\n\n\t\treturn {\n\t\t\tangle: angle,\n\t\t\tdistance: radialDistanceFromCenter\n\t\t};\n\t};\n\thelpers$1.distanceBetweenPoints = function(pt1, pt2) {\n\t\treturn Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n\t};\n\n\t/**\n\t * Provided for backward compatibility, not available anymore\n\t * @function Chart.helpers.aliasPixel\n\t * @deprecated since version 2.8.0\n\t * @todo remove at version 3\n\t */\n\thelpers$1.aliasPixel = function(pixelWidth) {\n\t\treturn (pixelWidth % 2 === 0) ? 0 : 0.5;\n\t};\n\n\t/**\n\t * Returns the aligned pixel value to avoid anti-aliasing blur\n\t * @param {Chart} chart - The chart instance.\n\t * @param {number} pixel - A pixel value.\n\t * @param {number} width - The width of the element.\n\t * @returns {number} The aligned pixel value.\n\t * @private\n\t */\n\thelpers$1._alignPixel = function(chart, pixel, width) {\n\t\tvar devicePixelRatio = chart.currentDevicePixelRatio;\n\t\tvar halfWidth = width / 2;\n\t\treturn Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n\t};\n\n\thelpers$1.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {\n\t\t// Props to Rob Spencer at scaled innovation for his post on splining between points\n\t\t// http://scaledinnovation.com/analytics/splines/aboutSplines.html\n\n\t\t// This function must also respect \"skipped\" points\n\n\t\tvar previous = firstPoint.skip ? middlePoint : firstPoint;\n\t\tvar current = middlePoint;\n\t\tvar next = afterPoint.skip ? middlePoint : afterPoint;\n\n\t\tvar d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));\n\t\tvar d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));\n\n\t\tvar s01 = d01 / (d01 + d12);\n\t\tvar s12 = d12 / (d01 + d12);\n\n\t\t// If all points are the same, s01 & s02 will be inf\n\t\ts01 = isNaN(s01) ? 0 : s01;\n\t\ts12 = isNaN(s12) ? 0 : s12;\n\n\t\tvar fa = t * s01; // scaling factor for triangle Ta\n\t\tvar fb = t * s12;\n\n\t\treturn {\n\t\t\tprevious: {\n\t\t\t\tx: current.x - fa * (next.x - previous.x),\n\t\t\t\ty: current.y - fa * (next.y - previous.y)\n\t\t\t},\n\t\t\tnext: {\n\t\t\t\tx: current.x + fb * (next.x - previous.x),\n\t\t\t\ty: current.y + fb * (next.y - previous.y)\n\t\t\t}\n\t\t};\n\t};\n\thelpers$1.EPSILON = Number.EPSILON || 1e-14;\n\thelpers$1.splineCurveMonotone = function(points) {\n\t\t// This function calculates Bézier control points in a similar way than |splineCurve|,\n\t\t// but preserves monotonicity of the provided data and ensures no local extremums are added\n\t\t// between the dataset discrete points due to the interpolation.\n\t\t// See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n\n\t\tvar pointsWithTangents = (points || []).map(function(point) {\n\t\t\treturn {\n\t\t\t\tmodel: point._model,\n\t\t\t\tdeltaK: 0,\n\t\t\t\tmK: 0\n\t\t\t};\n\t\t});\n\n\t\t// Calculate slopes (deltaK) and initialize tangents (mK)\n\t\tvar pointsLen = pointsWithTangents.length;\n\t\tvar i, pointBefore, pointCurrent, pointAfter;\n\t\tfor (i = 0; i < pointsLen; ++i) {\n\t\t\tpointCurrent = pointsWithTangents[i];\n\t\t\tif (pointCurrent.model.skip) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tpointBefore = i > 0 ? pointsWithTangents[i - 1] : null;\n\t\t\tpointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;\n\t\t\tif (pointAfter && !pointAfter.model.skip) {\n\t\t\t\tvar slopeDeltaX = (pointAfter.model.x - pointCurrent.model.x);\n\n\t\t\t\t// In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n\t\t\t\tpointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;\n\t\t\t}\n\n\t\t\tif (!pointBefore || pointBefore.model.skip) {\n\t\t\t\tpointCurrent.mK = pointCurrent.deltaK;\n\t\t\t} else if (!pointAfter || pointAfter.model.skip) {\n\t\t\t\tpointCurrent.mK = pointBefore.deltaK;\n\t\t\t} else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {\n\t\t\t\tpointCurrent.mK = 0;\n\t\t\t} else {\n\t\t\t\tpointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;\n\t\t\t}\n\t\t}\n\n\t\t// Adjust tangents to ensure monotonic properties\n\t\tvar alphaK, betaK, tauK, squaredMagnitude;\n\t\tfor (i = 0; i < pointsLen - 1; ++i) {\n\t\t\tpointCurrent = pointsWithTangents[i];\n\t\t\tpointAfter = pointsWithTangents[i + 1];\n\t\t\tif (pointCurrent.model.skip || pointAfter.model.skip) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (helpers$1.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {\n\t\t\t\tpointCurrent.mK = pointAfter.mK = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\talphaK = pointCurrent.mK / pointCurrent.deltaK;\n\t\t\tbetaK = pointAfter.mK / pointCurrent.deltaK;\n\t\t\tsquaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n\t\t\tif (squaredMagnitude <= 9) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttauK = 3 / Math.sqrt(squaredMagnitude);\n\t\t\tpointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;\n\t\t\tpointAfter.mK = betaK * tauK * pointCurrent.deltaK;\n\t\t}\n\n\t\t// Compute control points\n\t\tvar deltaX;\n\t\tfor (i = 0; i < pointsLen; ++i) {\n\t\t\tpointCurrent = pointsWithTangents[i];\n\t\t\tif (pointCurrent.model.skip) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tpointBefore = i > 0 ? pointsWithTangents[i - 1] : null;\n\t\t\tpointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;\n\t\t\tif (pointBefore && !pointBefore.model.skip) {\n\t\t\t\tdeltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;\n\t\t\t\tpointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;\n\t\t\t\tpointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;\n\t\t\t}\n\t\t\tif (pointAfter && !pointAfter.model.skip) {\n\t\t\t\tdeltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;\n\t\t\t\tpointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;\n\t\t\t\tpointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;\n\t\t\t}\n\t\t}\n\t};\n\thelpers$1.nextItem = function(collection, index, loop) {\n\t\tif (loop) {\n\t\t\treturn index >= collection.length - 1 ? collection[0] : collection[index + 1];\n\t\t}\n\t\treturn index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];\n\t};\n\thelpers$1.previousItem = function(collection, index, loop) {\n\t\tif (loop) {\n\t\t\treturn index <= 0 ? collection[collection.length - 1] : collection[index - 1];\n\t\t}\n\t\treturn index <= 0 ? collection[0] : collection[index - 1];\n\t};\n\t// Implementation of the nice number algorithm used in determining where axis labels will go\n\thelpers$1.niceNum = function(range, round) {\n\t\tvar exponent = Math.floor(helpers$1.log10(range));\n\t\tvar fraction = range / Math.pow(10, exponent);\n\t\tvar niceFraction;\n\n\t\tif (round) {\n\t\t\tif (fraction < 1.5) {\n\t\t\t\tniceFraction = 1;\n\t\t\t} else if (fraction < 3) {\n\t\t\t\tniceFraction = 2;\n\t\t\t} else if (fraction < 7) {\n\t\t\t\tniceFraction = 5;\n\t\t\t} else {\n\t\t\t\tniceFraction = 10;\n\t\t\t}\n\t\t} else if (fraction <= 1.0) {\n\t\t\tniceFraction = 1;\n\t\t} else if (fraction <= 2) {\n\t\t\tniceFraction = 2;\n\t\t} else if (fraction <= 5) {\n\t\t\tniceFraction = 5;\n\t\t} else {\n\t\t\tniceFraction = 10;\n\t\t}\n\n\t\treturn niceFraction * Math.pow(10, exponent);\n\t};\n\t// Request animation polyfill - https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/\n\thelpers$1.requestAnimFrame = (function() {\n\t\tif (typeof window === 'undefined') {\n\t\t\treturn function(callback) {\n\t\t\t\tcallback();\n\t\t\t};\n\t\t}\n\t\treturn window.requestAnimationFrame ||\n\t\t\twindow.webkitRequestAnimationFrame ||\n\t\t\twindow.mozRequestAnimationFrame ||\n\t\t\twindow.oRequestAnimationFrame ||\n\t\t\twindow.msRequestAnimationFrame ||\n\t\t\tfunction(callback) {\n\t\t\t\treturn window.setTimeout(callback, 1000 / 60);\n\t\t\t};\n\t}());\n\t// -- DOM methods\n\thelpers$1.getRelativePosition = function(evt, chart) {\n\t\tvar mouseX, mouseY;\n\t\tvar e = evt.originalEvent || evt;\n\t\tvar canvas = evt.target || evt.srcElement;\n\t\tvar boundingRect = canvas.getBoundingClientRect();\n\n\t\tvar touches = e.touches;\n\t\tif (touches && touches.length > 0) {\n\t\t\tmouseX = touches[0].clientX;\n\t\t\tmouseY = touches[0].clientY;\n\n\t\t} else {\n\t\t\tmouseX = e.clientX;\n\t\t\tmouseY = e.clientY;\n\t\t}\n\n\t\t// Scale mouse coordinates into canvas coordinates\n\t\t// by following the pattern laid out by 'jerryj' in the comments of\n\t\t// https://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/\n\t\tvar paddingLeft = parseFloat(helpers$1.getStyle(canvas, 'padding-left'));\n\t\tvar paddingTop = parseFloat(helpers$1.getStyle(canvas, 'padding-top'));\n\t\tvar paddingRight = parseFloat(helpers$1.getStyle(canvas, 'padding-right'));\n\t\tvar paddingBottom = parseFloat(helpers$1.getStyle(canvas, 'padding-bottom'));\n\t\tvar width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;\n\t\tvar height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;\n\n\t\t// We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However\n\t\t// the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here\n\t\tmouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);\n\t\tmouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);\n\n\t\treturn {\n\t\t\tx: mouseX,\n\t\t\ty: mouseY\n\t\t};\n\n\t};\n\n\t// Private helper function to convert max-width/max-height values that may be percentages into a number\n\tfunction parseMaxStyle(styleValue, node, parentProperty) {\n\t\tvar valueInPixels;\n\t\tif (typeof styleValue === 'string') {\n\t\t\tvalueInPixels = parseInt(styleValue, 10);\n\n\t\t\tif (styleValue.indexOf('%') !== -1) {\n\t\t\t\t// percentage * size in dimension\n\t\t\t\tvalueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n\t\t\t}\n\t\t} else {\n\t\t\tvalueInPixels = styleValue;\n\t\t}\n\n\t\treturn valueInPixels;\n\t}\n\n\t/**\n\t * Returns if the given value contains an effective constraint.\n\t * @private\n\t */\n\tfunction isConstrainedValue(value) {\n\t\treturn value !== undefined && value !== null && value !== 'none';\n\t}\n\n\t/**\n\t * Returns the max width or height of the given DOM node in a cross-browser compatible fashion\n\t * @param {HTMLElement} domNode - the node to check the constraint on\n\t * @param {string} maxStyle - the style that defines the maximum for the direction we are using ('max-width' / 'max-height')\n\t * @param {string} percentageProperty - property of parent to use when calculating width as a percentage\n\t * @see {@link https://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser}\n\t */\n\tfunction getConstraintDimension(domNode, maxStyle, percentageProperty) {\n\t\tvar view = document.defaultView;\n\t\tvar parentNode = helpers$1._getParentNode(domNode);\n\t\tvar constrainedNode = view.getComputedStyle(domNode)[maxStyle];\n\t\tvar constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];\n\t\tvar hasCNode = isConstrainedValue(constrainedNode);\n\t\tvar hasCContainer = isConstrainedValue(constrainedContainer);\n\t\tvar infinity = Number.POSITIVE_INFINITY;\n\n\t\tif (hasCNode || hasCContainer) {\n\t\t\treturn Math.min(\n\t\t\t\thasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,\n\t\t\t\thasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);\n\t\t}\n\n\t\treturn 'none';\n\t}\n\t// returns Number or undefined if no constraint\n\thelpers$1.getConstraintWidth = function(domNode) {\n\t\treturn getConstraintDimension(domNode, 'max-width', 'clientWidth');\n\t};\n\t// returns Number or undefined if no constraint\n\thelpers$1.getConstraintHeight = function(domNode) {\n\t\treturn getConstraintDimension(domNode, 'max-height', 'clientHeight');\n\t};\n\t/**\n\t * @private\n \t */\n\thelpers$1._calculatePadding = function(container, padding, parentDimension) {\n\t\tpadding = helpers$1.getStyle(container, padding);\n\n\t\treturn padding.indexOf('%') > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);\n\t};\n\t/**\n\t * @private\n\t */\n\thelpers$1._getParentNode = function(domNode) {\n\t\tvar parent = domNode.parentNode;\n\t\tif (parent && parent.toString() === '[object ShadowRoot]') {\n\t\t\tparent = parent.host;\n\t\t}\n\t\treturn parent;\n\t};\n\thelpers$1.getMaximumWidth = function(domNode) {\n\t\tvar container = helpers$1._getParentNode(domNode);\n\t\tif (!container) {\n\t\t\treturn domNode.clientWidth;\n\t\t}\n\n\t\tvar clientWidth = container.clientWidth;\n\t\tvar paddingLeft = helpers$1._calculatePadding(container, 'padding-left', clientWidth);\n\t\tvar paddingRight = helpers$1._calculatePadding(container, 'padding-right', clientWidth);\n\n\t\tvar w = clientWidth - paddingLeft - paddingRight;\n\t\tvar cw = helpers$1.getConstraintWidth(domNode);\n\t\treturn isNaN(cw) ? w : Math.min(w, cw);\n\t};\n\thelpers$1.getMaximumHeight = function(domNode) {\n\t\tvar container = helpers$1._getParentNode(domNode);\n\t\tif (!container) {\n\t\t\treturn domNode.clientHeight;\n\t\t}\n\n\t\tvar clientHeight = container.clientHeight;\n\t\tvar paddingTop = helpers$1._calculatePadding(container, 'padding-top', clientHeight);\n\t\tvar paddingBottom = helpers$1._calculatePadding(container, 'padding-bottom', clientHeight);\n\n\t\tvar h = clientHeight - paddingTop - paddingBottom;\n\t\tvar ch = helpers$1.getConstraintHeight(domNode);\n\t\treturn isNaN(ch) ? h : Math.min(h, ch);\n\t};\n\thelpers$1.getStyle = function(el, property) {\n\t\treturn el.currentStyle ?\n\t\t\tel.currentStyle[property] :\n\t\t\tdocument.defaultView.getComputedStyle(el, null).getPropertyValue(property);\n\t};\n\thelpers$1.retinaScale = function(chart, forceRatio) {\n\t\tvar pixelRatio = chart.currentDevicePixelRatio = forceRatio || (typeof window !== 'undefined' && window.devicePixelRatio) || 1;\n\t\tif (pixelRatio === 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar canvas = chart.canvas;\n\t\tvar height = chart.height;\n\t\tvar width = chart.width;\n\n\t\tcanvas.height = height * pixelRatio;\n\t\tcanvas.width = width * pixelRatio;\n\t\tchart.ctx.scale(pixelRatio, pixelRatio);\n\n\t\t// If no style has been set on the canvas, the render size is used as display size,\n\t\t// making the chart visually bigger, so let's enforce it to the \"correct\" values.\n\t\t// See https://github.com/chartjs/Chart.js/issues/3575\n\t\tif (!canvas.style.height && !canvas.style.width) {\n\t\t\tcanvas.style.height = height + 'px';\n\t\t\tcanvas.style.width = width + 'px';\n\t\t}\n\t};\n\t// -- Canvas methods\n\thelpers$1.fontString = function(pixelSize, fontStyle, fontFamily) {\n\t\treturn fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n\t};\n\thelpers$1.longestText = function(ctx, font, arrayOfThings, cache) {\n\t\tcache = cache || {};\n\t\tvar data = cache.data = cache.data || {};\n\t\tvar gc = cache.garbageCollect = cache.garbageCollect || [];\n\n\t\tif (cache.font !== font) {\n\t\t\tdata = cache.data = {};\n\t\t\tgc = cache.garbageCollect = [];\n\t\t\tcache.font = font;\n\t\t}\n\n\t\tctx.font = font;\n\t\tvar longest = 0;\n\t\thelpers$1.each(arrayOfThings, function(thing) {\n\t\t\t// Undefined strings and arrays should not be measured\n\t\t\tif (thing !== undefined && thing !== null && helpers$1.isArray(thing) !== true) {\n\t\t\t\tlongest = helpers$1.measureText(ctx, data, gc, longest, thing);\n\t\t\t} else if (helpers$1.isArray(thing)) {\n\t\t\t\t// if it is an array lets measure each element\n\t\t\t\t// to do maybe simplify this function a bit so we can do this more recursively?\n\t\t\t\thelpers$1.each(thing, function(nestedThing) {\n\t\t\t\t\t// Undefined strings and arrays should not be measured\n\t\t\t\t\tif (nestedThing !== undefined && nestedThing !== null && !helpers$1.isArray(nestedThing)) {\n\t\t\t\t\t\tlongest = helpers$1.measureText(ctx, data, gc, longest, nestedThing);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tvar gcLen = gc.length / 2;\n\t\tif (gcLen > arrayOfThings.length) {\n\t\t\tfor (var i = 0; i < gcLen; i++) {\n\t\t\t\tdelete data[gc[i]];\n\t\t\t}\n\t\t\tgc.splice(0, gcLen);\n\t\t}\n\t\treturn longest;\n\t};\n\thelpers$1.measureText = function(ctx, data, gc, longest, string) {\n\t\tvar textWidth = data[string];\n\t\tif (!textWidth) {\n\t\t\ttextWidth = data[string] = ctx.measureText(string).width;\n\t\t\tgc.push(string);\n\t\t}\n\t\tif (textWidth > longest) {\n\t\t\tlongest = textWidth;\n\t\t}\n\t\treturn longest;\n\t};\n\thelpers$1.numberOfLabelLines = function(arrayOfThings) {\n\t\tvar numberOfLines = 1;\n\t\thelpers$1.each(arrayOfThings, function(thing) {\n\t\t\tif (helpers$1.isArray(thing)) {\n\t\t\t\tif (thing.length > numberOfLines) {\n\t\t\t\t\tnumberOfLines = thing.length;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn numberOfLines;\n\t};\n\n\thelpers$1.color = !chartjsColor ?\n\t\tfunction(value) {\n\t\t\tconsole.error('Color.js not found!');\n\t\t\treturn value;\n\t\t} :\n\t\tfunction(value) {\n\t\t\t/* global CanvasGradient */\n\t\t\tif (value instanceof CanvasGradient) {\n\t\t\t\tvalue = core_defaults.global.defaultColor;\n\t\t\t}\n\n\t\t\treturn chartjsColor(value);\n\t\t};\n\n\thelpers$1.getHoverColor = function(colorValue) {\n\t\t/* global CanvasPattern */\n\t\treturn (colorValue instanceof CanvasPattern || colorValue instanceof CanvasGradient) ?\n\t\t\tcolorValue :\n\t\t\thelpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();\n\t};\n};\n\nfunction abstract() {\n\tthrow new Error(\n\t\t'This method is not implemented: either no adapter can ' +\n\t\t'be found or an incomplete integration was provided.'\n\t);\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\n\n/**\n * Currently supported unit string values.\n * @typedef {('millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year')}\n * @memberof Chart._adapters._date\n * @name Unit\n */\n\n/**\n * @class\n */\nfunction DateAdapter(options) {\n\tthis.options = options || {};\n}\n\nhelpers$1.extend(DateAdapter.prototype, /** @lends DateAdapter */ {\n\t/**\n\t * Returns a map of time formats for the supported formatting units defined\n\t * in Unit as well as 'datetime' representing a detailed date/time string.\n\t * @returns {{string: string}}\n\t */\n\tformats: abstract,\n\n\t/**\n\t * Parses the given `value` and return the associated timestamp.\n\t * @param {any} value - the value to parse (usually comes from the data)\n\t * @param {string} [format] - the expected data format\n\t * @returns {(number|null)}\n\t * @function\n\t */\n\tparse: abstract,\n\n\t/**\n\t * Returns the formatted date in the specified `format` for a given `timestamp`.\n\t * @param {number} timestamp - the timestamp to format\n\t * @param {string} format - the date/time token\n\t * @return {string}\n\t * @function\n\t */\n\tformat: abstract,\n\n\t/**\n\t * Adds the specified `amount` of `unit` to the given `timestamp`.\n\t * @param {number} timestamp - the input timestamp\n\t * @param {number} amount - the amount to add\n\t * @param {Unit} unit - the unit as string\n\t * @return {number}\n\t * @function\n\t */\n\tadd: abstract,\n\n\t/**\n\t * Returns the number of `unit` between the given timestamps.\n\t * @param {number} max - the input timestamp (reference)\n\t * @param {number} min - the timestamp to substract\n\t * @param {Unit} unit - the unit as string\n\t * @return {number}\n\t * @function\n\t */\n\tdiff: abstract,\n\n\t/**\n\t * Returns start of `unit` for the given `timestamp`.\n\t * @param {number} timestamp - the input timestamp\n\t * @param {Unit} unit - the unit as string\n\t * @param {number} [weekday] - the ISO day of the week with 1 being Monday\n\t * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n\t * @function\n\t */\n\tstartOf: abstract,\n\n\t/**\n\t * Returns end of `unit` for the given `timestamp`.\n\t * @param {number} timestamp - the input timestamp\n\t * @param {Unit} unit - the unit as string\n\t * @function\n\t */\n\tendOf: abstract,\n\n\t// DEPRECATIONS\n\n\t/**\n\t * Provided for backward compatibility for scale.getValueForPixel(),\n\t * this method should be overridden only by the moment adapter.\n\t * @deprecated since version 2.8.0\n\t * @todo remove at version 3\n\t * @private\n\t */\n\t_create: function(value) {\n\t\treturn value;\n\t}\n});\n\nDateAdapter.override = function(members) {\n\thelpers$1.extend(DateAdapter.prototype, members);\n};\n\nvar _date = DateAdapter;\n\nvar core_adapters = {\n\t_date: _date\n};\n\n/**\n * Namespace to hold static tick generation functions\n * @namespace Chart.Ticks\n */\nvar core_ticks = {\n\t/**\n\t * Namespace to hold formatters for different types of ticks\n\t * @namespace Chart.Ticks.formatters\n\t */\n\tformatters: {\n\t\t/**\n\t\t * Formatter for value labels\n\t\t * @method Chart.Ticks.formatters.values\n\t\t * @param value the value to display\n\t\t * @return {string|string[]} the label to display\n\t\t */\n\t\tvalues: function(value) {\n\t\t\treturn helpers$1.isArray(value) ? value : '' + value;\n\t\t},\n\n\t\t/**\n\t\t * Formatter for linear numeric ticks\n\t\t * @method Chart.Ticks.formatters.linear\n\t\t * @param tickValue {number} the value to be formatted\n\t\t * @param index {number} the position of the tickValue parameter in the ticks array\n\t\t * @param ticks {number[]} the list of ticks being converted\n\t\t * @return {string} string representation of the tickValue parameter\n\t\t */\n\t\tlinear: function(tickValue, index, ticks) {\n\t\t\t// If we have lots of ticks, don't use the ones\n\t\t\tvar delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];\n\n\t\t\t// If we have a number like 2.5 as the delta, figure out how many decimal places we need\n\t\t\tif (Math.abs(delta) > 1) {\n\t\t\t\tif (tickValue !== Math.floor(tickValue)) {\n\t\t\t\t\t// not an integer\n\t\t\t\t\tdelta = tickValue - Math.floor(tickValue);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar logDelta = helpers$1.log10(Math.abs(delta));\n\t\t\tvar tickString = '';\n\n\t\t\tif (tickValue !== 0) {\n\t\t\t\tvar maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));\n\t\t\t\tif (maxTick < 1e-4) { // all ticks are small numbers; use scientific notation\n\t\t\t\t\tvar logTick = helpers$1.log10(Math.abs(tickValue));\n\t\t\t\t\ttickString = tickValue.toExponential(Math.floor(logTick) - Math.floor(logDelta));\n\t\t\t\t} else {\n\t\t\t\t\tvar numDecimal = -1 * Math.floor(logDelta);\n\t\t\t\t\tnumDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places\n\t\t\t\t\ttickString = tickValue.toFixed(numDecimal);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttickString = '0'; // never show decimal places for 0\n\t\t\t}\n\n\t\t\treturn tickString;\n\t\t},\n\n\t\tlogarithmic: function(tickValue, index, ticks) {\n\t\t\tvar remain = tickValue / (Math.pow(10, Math.floor(helpers$1.log10(tickValue))));\n\n\t\t\tif (tickValue === 0) {\n\t\t\t\treturn '0';\n\t\t\t} else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {\n\t\t\t\treturn tickValue.toExponential();\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\t}\n};\n\nvar valueOrDefault$9 = helpers$1.valueOrDefault;\nvar valueAtIndexOrDefault = helpers$1.valueAtIndexOrDefault;\n\ncore_defaults._set('scale', {\n\tdisplay: true,\n\tposition: 'left',\n\toffset: false,\n\n\t// grid line settings\n\tgridLines: {\n\t\tdisplay: true,\n\t\tcolor: 'rgba(0, 0, 0, 0.1)',\n\t\tlineWidth: 1,\n\t\tdrawBorder: true,\n\t\tdrawOnChartArea: true,\n\t\tdrawTicks: true,\n\t\ttickMarkLength: 10,\n\t\tzeroLineWidth: 1,\n\t\tzeroLineColor: 'rgba(0,0,0,0.25)',\n\t\tzeroLineBorderDash: [],\n\t\tzeroLineBorderDashOffset: 0.0,\n\t\toffsetGridLines: false,\n\t\tborderDash: [],\n\t\tborderDashOffset: 0.0\n\t},\n\n\t// scale label\n\tscaleLabel: {\n\t\t// display property\n\t\tdisplay: false,\n\n\t\t// actual label\n\t\tlabelString: '',\n\n\t\t// top/bottom padding\n\t\tpadding: {\n\t\t\ttop: 4,\n\t\t\tbottom: 4\n\t\t}\n\t},\n\n\t// label settings\n\tticks: {\n\t\tbeginAtZero: false,\n\t\tminRotation: 0,\n\t\tmaxRotation: 50,\n\t\tmirror: false,\n\t\tpadding: 0,\n\t\treverse: false,\n\t\tdisplay: true,\n\t\tautoSkip: true,\n\t\tautoSkipPadding: 0,\n\t\tlabelOffset: 0,\n\t\t// We pass through arrays to be rendered as multiline labels, we convert Others to strings here.\n\t\tcallback: core_ticks.formatters.values,\n\t\tminor: {},\n\t\tmajor: {}\n\t}\n});\n\nfunction labelsFromTicks(ticks) {\n\tvar labels = [];\n\tvar i, ilen;\n\n\tfor (i = 0, ilen = ticks.length; i < ilen; ++i) {\n\t\tlabels.push(ticks[i].label);\n\t}\n\n\treturn labels;\n}\n\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n\tvar lineValue = scale.getPixelForTick(index);\n\n\tif (offsetGridLines) {\n\t\tif (scale.getTicks().length === 1) {\n\t\t\tlineValue -= scale.isHorizontal() ?\n\t\t\t\tMath.max(lineValue - scale.left, scale.right - lineValue) :\n\t\t\t\tMath.max(lineValue - scale.top, scale.bottom - lineValue);\n\t\t} else if (index === 0) {\n\t\t\tlineValue -= (scale.getPixelForTick(1) - lineValue) / 2;\n\t\t} else {\n\t\t\tlineValue -= (lineValue - scale.getPixelForTick(index - 1)) / 2;\n\t\t}\n\t}\n\treturn lineValue;\n}\n\nfunction computeTextSize(context, tick, font) {\n\treturn helpers$1.isArray(tick) ?\n\t\thelpers$1.longestText(context, font, tick) :\n\t\tcontext.measureText(tick).width;\n}\n\nvar core_scale = core_element.extend({\n\t/**\n\t * Get the padding needed for the scale\n\t * @method getPadding\n\t * @private\n\t * @returns {Padding} the necessary padding\n\t */\n\tgetPadding: function() {\n\t\tvar me = this;\n\t\treturn {\n\t\t\tleft: me.paddingLeft || 0,\n\t\t\ttop: me.paddingTop || 0,\n\t\t\tright: me.paddingRight || 0,\n\t\t\tbottom: me.paddingBottom || 0\n\t\t};\n\t},\n\n\t/**\n\t * Returns the scale tick objects ({label, major})\n\t * @since 2.7\n\t */\n\tgetTicks: function() {\n\t\treturn this._ticks;\n\t},\n\n\t// These methods are ordered by lifecyle. Utilities then follow.\n\t// Any function defined here is inherited by all scale types.\n\t// Any function can be extended by the scale type\n\n\tmergeTicksOptions: function() {\n\t\tvar ticks = this.options.ticks;\n\t\tif (ticks.minor === false) {\n\t\t\tticks.minor = {\n\t\t\t\tdisplay: false\n\t\t\t};\n\t\t}\n\t\tif (ticks.major === false) {\n\t\t\tticks.major = {\n\t\t\t\tdisplay: false\n\t\t\t};\n\t\t}\n\t\tfor (var key in ticks) {\n\t\t\tif (key !== 'major' && key !== 'minor') {\n\t\t\t\tif (typeof ticks.minor[key] === 'undefined') {\n\t\t\t\t\tticks.minor[key] = ticks[key];\n\t\t\t\t}\n\t\t\t\tif (typeof ticks.major[key] === 'undefined') {\n\t\t\t\t\tticks.major[key] = ticks[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tbeforeUpdate: function() {\n\t\thelpers$1.callback(this.options.beforeUpdate, [this]);\n\t},\n\n\tupdate: function(maxWidth, maxHeight, margins) {\n\t\tvar me = this;\n\t\tvar i, ilen, labels, label, ticks, tick;\n\n\t\t// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\t\tme.beforeUpdate();\n\n\t\t// Absorb the master measurements\n\t\tme.maxWidth = maxWidth;\n\t\tme.maxHeight = maxHeight;\n\t\tme.margins = helpers$1.extend({\n\t\t\tleft: 0,\n\t\t\tright: 0,\n\t\t\ttop: 0,\n\t\t\tbottom: 0\n\t\t}, margins);\n\n\t\tme._maxLabelLines = 0;\n\t\tme.longestLabelWidth = 0;\n\t\tme.longestTextCache = me.longestTextCache || {};\n\n\t\t// Dimensions\n\t\tme.beforeSetDimensions();\n\t\tme.setDimensions();\n\t\tme.afterSetDimensions();\n\n\t\t// Data min/max\n\t\tme.beforeDataLimits();\n\t\tme.determineDataLimits();\n\t\tme.afterDataLimits();\n\n\t\t// Ticks - `this.ticks` is now DEPRECATED!\n\t\t// Internal ticks are now stored as objects in the PRIVATE `this._ticks` member\n\t\t// and must not be accessed directly from outside this class. `this.ticks` being\n\t\t// around for long time and not marked as private, we can't change its structure\n\t\t// without unexpected breaking changes. If you need to access the scale ticks,\n\t\t// use scale.getTicks() instead.\n\n\t\tme.beforeBuildTicks();\n\n\t\t// New implementations should return an array of objects but for BACKWARD COMPAT,\n\t\t// we still support no return (`this.ticks` internally set by calling this method).\n\t\tticks = me.buildTicks() || [];\n\n\t\t// Allow modification of ticks in callback.\n\t\tticks = me.afterBuildTicks(ticks) || ticks;\n\n\t\tme.beforeTickToLabelConversion();\n\n\t\t// New implementations should return the formatted tick labels but for BACKWARD\n\t\t// COMPAT, we still support no return (`this.ticks` internally changed by calling\n\t\t// this method and supposed to contain only string values).\n\t\tlabels = me.convertTicksToLabels(ticks) || me.ticks;\n\n\t\tme.afterTickToLabelConversion();\n\n\t\tme.ticks = labels;   // BACKWARD COMPATIBILITY\n\n\t\t// IMPORTANT: from this point, we consider that `this.ticks` will NEVER change!\n\n\t\t// BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)\n\t\tfor (i = 0, ilen = labels.length; i < ilen; ++i) {\n\t\t\tlabel = labels[i];\n\t\t\ttick = ticks[i];\n\t\t\tif (!tick) {\n\t\t\t\tticks.push(tick = {\n\t\t\t\t\tlabel: label,\n\t\t\t\t\tmajor: false\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\ttick.label = label;\n\t\t\t}\n\t\t}\n\n\t\tme._ticks = ticks;\n\n\t\t// Tick Rotation\n\t\tme.beforeCalculateTickRotation();\n\t\tme.calculateTickRotation();\n\t\tme.afterCalculateTickRotation();\n\t\t// Fit\n\t\tme.beforeFit();\n\t\tme.fit();\n\t\tme.afterFit();\n\t\t//\n\t\tme.afterUpdate();\n\n\t\treturn me.minSize;\n\n\t},\n\tafterUpdate: function() {\n\t\thelpers$1.callback(this.options.afterUpdate, [this]);\n\t},\n\n\t//\n\n\tbeforeSetDimensions: function() {\n\t\thelpers$1.callback(this.options.beforeSetDimensions, [this]);\n\t},\n\tsetDimensions: function() {\n\t\tvar me = this;\n\t\t// Set the unconstrained dimension before label rotation\n\t\tif (me.isHorizontal()) {\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.width = me.maxWidth;\n\t\t\tme.left = 0;\n\t\t\tme.right = me.width;\n\t\t} else {\n\t\t\tme.height = me.maxHeight;\n\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.top = 0;\n\t\t\tme.bottom = me.height;\n\t\t}\n\n\t\t// Reset padding\n\t\tme.paddingLeft = 0;\n\t\tme.paddingTop = 0;\n\t\tme.paddingRight = 0;\n\t\tme.paddingBottom = 0;\n\t},\n\tafterSetDimensions: function() {\n\t\thelpers$1.callback(this.options.afterSetDimensions, [this]);\n\t},\n\n\t// Data limits\n\tbeforeDataLimits: function() {\n\t\thelpers$1.callback(this.options.beforeDataLimits, [this]);\n\t},\n\tdetermineDataLimits: helpers$1.noop,\n\tafterDataLimits: function() {\n\t\thelpers$1.callback(this.options.afterDataLimits, [this]);\n\t},\n\n\t//\n\tbeforeBuildTicks: function() {\n\t\thelpers$1.callback(this.options.beforeBuildTicks, [this]);\n\t},\n\tbuildTicks: helpers$1.noop,\n\tafterBuildTicks: function(ticks) {\n\t\tvar me = this;\n\t\t// ticks is empty for old axis implementations here\n\t\tif (helpers$1.isArray(ticks) && ticks.length) {\n\t\t\treturn helpers$1.callback(me.options.afterBuildTicks, [me, ticks]);\n\t\t}\n\t\t// Support old implementations (that modified `this.ticks` directly in buildTicks)\n\t\tme.ticks = helpers$1.callback(me.options.afterBuildTicks, [me, me.ticks]) || me.ticks;\n\t\treturn ticks;\n\t},\n\n\tbeforeTickToLabelConversion: function() {\n\t\thelpers$1.callback(this.options.beforeTickToLabelConversion, [this]);\n\t},\n\tconvertTicksToLabels: function() {\n\t\tvar me = this;\n\t\t// Convert ticks to strings\n\t\tvar tickOpts = me.options.ticks;\n\t\tme.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);\n\t},\n\tafterTickToLabelConversion: function() {\n\t\thelpers$1.callback(this.options.afterTickToLabelConversion, [this]);\n\t},\n\n\t//\n\n\tbeforeCalculateTickRotation: function() {\n\t\thelpers$1.callback(this.options.beforeCalculateTickRotation, [this]);\n\t},\n\tcalculateTickRotation: function() {\n\t\tvar me = this;\n\t\tvar context = me.ctx;\n\t\tvar tickOpts = me.options.ticks;\n\t\tvar labels = labelsFromTicks(me._ticks);\n\n\t\t// Get the width of each grid by calculating the difference\n\t\t// between x offsets between 0 and 1.\n\t\tvar tickFont = helpers$1.options._parseFont(tickOpts);\n\t\tcontext.font = tickFont.string;\n\n\t\tvar labelRotation = tickOpts.minRotation || 0;\n\n\t\tif (labels.length && me.options.display && me.isHorizontal()) {\n\t\t\tvar originalLabelWidth = helpers$1.longestText(context, tickFont.string, labels, me.longestTextCache);\n\t\t\tvar labelWidth = originalLabelWidth;\n\t\t\tvar cosRotation, sinRotation;\n\n\t\t\t// Allow 3 pixels x2 padding either side for label readability\n\t\t\tvar tickWidth = me.getPixelForTick(1) - me.getPixelForTick(0) - 6;\n\n\t\t\t// Max label rotation can be set or default to 90 - also act as a loop counter\n\t\t\twhile (labelWidth > tickWidth && labelRotation < tickOpts.maxRotation) {\n\t\t\t\tvar angleRadians = helpers$1.toRadians(labelRotation);\n\t\t\t\tcosRotation = Math.cos(angleRadians);\n\t\t\t\tsinRotation = Math.sin(angleRadians);\n\n\t\t\t\tif (sinRotation * originalLabelWidth > me.maxHeight) {\n\t\t\t\t\t// go back one step\n\t\t\t\t\tlabelRotation--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlabelRotation++;\n\t\t\t\tlabelWidth = cosRotation * originalLabelWidth;\n\t\t\t}\n\t\t}\n\n\t\tme.labelRotation = labelRotation;\n\t},\n\tafterCalculateTickRotation: function() {\n\t\thelpers$1.callback(this.options.afterCalculateTickRotation, [this]);\n\t},\n\n\t//\n\n\tbeforeFit: function() {\n\t\thelpers$1.callback(this.options.beforeFit, [this]);\n\t},\n\tfit: function() {\n\t\tvar me = this;\n\t\t// Reset\n\t\tvar minSize = me.minSize = {\n\t\t\twidth: 0,\n\t\t\theight: 0\n\t\t};\n\n\t\tvar labels = labelsFromTicks(me._ticks);\n\n\t\tvar opts = me.options;\n\t\tvar tickOpts = opts.ticks;\n\t\tvar scaleLabelOpts = opts.scaleLabel;\n\t\tvar gridLineOpts = opts.gridLines;\n\t\tvar display = me._isVisible();\n\t\tvar position = opts.position;\n\t\tvar isHorizontal = me.isHorizontal();\n\n\t\tvar parseFont = helpers$1.options._parseFont;\n\t\tvar tickFont = parseFont(tickOpts);\n\t\tvar tickMarkLength = opts.gridLines.tickMarkLength;\n\n\t\t// Width\n\t\tif (isHorizontal) {\n\t\t\t// subtract the margins to line up with the chartArea if we are a full width scale\n\t\t\tminSize.width = me.isFullWidth() ? me.maxWidth - me.margins.left - me.margins.right : me.maxWidth;\n\t\t} else {\n\t\t\tminSize.width = display && gridLineOpts.drawTicks ? tickMarkLength : 0;\n\t\t}\n\n\t\t// height\n\t\tif (isHorizontal) {\n\t\t\tminSize.height = display && gridLineOpts.drawTicks ? tickMarkLength : 0;\n\t\t} else {\n\t\t\tminSize.height = me.maxHeight; // fill all the height\n\t\t}\n\n\t\t// Are we showing a title for the scale?\n\t\tif (scaleLabelOpts.display && display) {\n\t\t\tvar scaleLabelFont = parseFont(scaleLabelOpts);\n\t\t\tvar scaleLabelPadding = helpers$1.options.toPadding(scaleLabelOpts.padding);\n\t\t\tvar deltaHeight = scaleLabelFont.lineHeight + scaleLabelPadding.height;\n\n\t\t\tif (isHorizontal) {\n\t\t\t\tminSize.height += deltaHeight;\n\t\t\t} else {\n\t\t\t\tminSize.width += deltaHeight;\n\t\t\t}\n\t\t}\n\n\t\t// Don't bother fitting the ticks if we are not showing the labels\n\t\tif (tickOpts.display && display) {\n\t\t\tvar largestTextWidth = helpers$1.longestText(me.ctx, tickFont.string, labels, me.longestTextCache);\n\t\t\tvar tallestLabelHeightInLines = helpers$1.numberOfLabelLines(labels);\n\t\t\tvar lineSpace = tickFont.size * 0.5;\n\t\t\tvar tickPadding = me.options.ticks.padding;\n\n\t\t\t// Store max number of lines and widest label for _autoSkip\n\t\t\tme._maxLabelLines = tallestLabelHeightInLines;\n\t\t\tme.longestLabelWidth = largestTextWidth;\n\n\t\t\tif (isHorizontal) {\n\t\t\t\tvar angleRadians = helpers$1.toRadians(me.labelRotation);\n\t\t\t\tvar cosRotation = Math.cos(angleRadians);\n\t\t\t\tvar sinRotation = Math.sin(angleRadians);\n\n\t\t\t\t// TODO - improve this calculation\n\t\t\t\tvar labelHeight = (sinRotation * largestTextWidth)\n\t\t\t\t\t+ (tickFont.lineHeight * tallestLabelHeightInLines)\n\t\t\t\t\t+ lineSpace; // padding\n\n\t\t\t\tminSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);\n\n\t\t\t\tme.ctx.font = tickFont.string;\n\t\t\t\tvar firstLabelWidth = computeTextSize(me.ctx, labels[0], tickFont.string);\n\t\t\t\tvar lastLabelWidth = computeTextSize(me.ctx, labels[labels.length - 1], tickFont.string);\n\t\t\t\tvar offsetLeft = me.getPixelForTick(0) - me.left;\n\t\t\t\tvar offsetRight = me.right - me.getPixelForTick(labels.length - 1);\n\t\t\t\tvar paddingLeft, paddingRight;\n\n\t\t\t\t// Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n\t\t\t\t// which means that the right padding is dominated by the font height\n\t\t\t\tif (me.labelRotation !== 0) {\n\t\t\t\t\tpaddingLeft = position === 'bottom' ? (cosRotation * firstLabelWidth) : (cosRotation * lineSpace);\n\t\t\t\t\tpaddingRight = position === 'bottom' ? (cosRotation * lineSpace) : (cosRotation * lastLabelWidth);\n\t\t\t\t} else {\n\t\t\t\t\tpaddingLeft = firstLabelWidth / 2;\n\t\t\t\t\tpaddingRight = lastLabelWidth / 2;\n\t\t\t\t}\n\t\t\t\tme.paddingLeft = Math.max(paddingLeft - offsetLeft, 0) + 3; // add 3 px to move away from canvas edges\n\t\t\t\tme.paddingRight = Math.max(paddingRight - offsetRight, 0) + 3;\n\t\t\t} else {\n\t\t\t\t// A vertical axis is more constrained by the width. Labels are the\n\t\t\t\t// dominant factor here, so get that length first and account for padding\n\t\t\t\tif (tickOpts.mirror) {\n\t\t\t\t\tlargestTextWidth = 0;\n\t\t\t\t} else {\n\t\t\t\t\t// use lineSpace for consistency with horizontal axis\n\t\t\t\t\t// tickPadding is not implemented for horizontal\n\t\t\t\t\tlargestTextWidth += tickPadding + lineSpace;\n\t\t\t\t}\n\n\t\t\t\tminSize.width = Math.min(me.maxWidth, minSize.width + largestTextWidth);\n\n\t\t\t\tme.paddingTop = tickFont.size / 2;\n\t\t\t\tme.paddingBottom = tickFont.size / 2;\n\t\t\t}\n\t\t}\n\n\t\tme.handleMargins();\n\n\t\tme.width = minSize.width;\n\t\tme.height = minSize.height;\n\t},\n\n\t/**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n\thandleMargins: function() {\n\t\tvar me = this;\n\t\tif (me.margins) {\n\t\t\tme.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);\n\t\t\tme.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);\n\t\t\tme.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);\n\t\t\tme.paddingBottom = Math.max(me.paddingBottom - me.margins.bottom, 0);\n\t\t}\n\t},\n\n\tafterFit: function() {\n\t\thelpers$1.callback(this.options.afterFit, [this]);\n\t},\n\n\t// Shared Methods\n\tisHorizontal: function() {\n\t\treturn this.options.position === 'top' || this.options.position === 'bottom';\n\t},\n\tisFullWidth: function() {\n\t\treturn (this.options.fullWidth);\n\t},\n\n\t// Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not\n\tgetRightValue: function(rawValue) {\n\t\t// Null and undefined values first\n\t\tif (helpers$1.isNullOrUndef(rawValue)) {\n\t\t\treturn NaN;\n\t\t}\n\t\t// isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values\n\t\tif ((typeof rawValue === 'number' || rawValue instanceof Number) && !isFinite(rawValue)) {\n\t\t\treturn NaN;\n\t\t}\n\t\t// If it is in fact an object, dive in one more level\n\t\tif (rawValue) {\n\t\t\tif (this.isHorizontal()) {\n\t\t\t\tif (rawValue.x !== undefined) {\n\t\t\t\t\treturn this.getRightValue(rawValue.x);\n\t\t\t\t}\n\t\t\t} else if (rawValue.y !== undefined) {\n\t\t\t\treturn this.getRightValue(rawValue.y);\n\t\t\t}\n\t\t}\n\n\t\t// Value is good, return it\n\t\treturn rawValue;\n\t},\n\n\t/**\n\t * Used to get the value to display in the tooltip for the data at the given index\n\t * @param index\n\t * @param datasetIndex\n\t */\n\tgetLabelForIndex: helpers$1.noop,\n\n\t/**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param value\n\t * @param index\n\t * @param datasetIndex\n\t */\n\tgetPixelForValue: helpers$1.noop,\n\n\t/**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param pixel\n\t */\n\tgetValueForPixel: helpers$1.noop,\n\n\t/**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t */\n\tgetPixelForTick: function(index) {\n\t\tvar me = this;\n\t\tvar offset = me.options.offset;\n\t\tif (me.isHorizontal()) {\n\t\t\tvar innerWidth = me.width - (me.paddingLeft + me.paddingRight);\n\t\t\tvar tickWidth = innerWidth / Math.max((me._ticks.length - (offset ? 0 : 1)), 1);\n\t\t\tvar pixel = (tickWidth * index) + me.paddingLeft;\n\n\t\t\tif (offset) {\n\t\t\t\tpixel += tickWidth / 2;\n\t\t\t}\n\n\t\t\tvar finalVal = me.left + pixel;\n\t\t\tfinalVal += me.isFullWidth() ? me.margins.left : 0;\n\t\t\treturn finalVal;\n\t\t}\n\t\tvar innerHeight = me.height - (me.paddingTop + me.paddingBottom);\n\t\treturn me.top + (index * (innerHeight / (me._ticks.length - 1)));\n\t},\n\n\t/**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t */\n\tgetPixelForDecimal: function(decimal) {\n\t\tvar me = this;\n\t\tif (me.isHorizontal()) {\n\t\t\tvar innerWidth = me.width - (me.paddingLeft + me.paddingRight);\n\t\t\tvar valueOffset = (innerWidth * decimal) + me.paddingLeft;\n\n\t\t\tvar finalVal = me.left + valueOffset;\n\t\t\tfinalVal += me.isFullWidth() ? me.margins.left : 0;\n\t\t\treturn finalVal;\n\t\t}\n\t\treturn me.top + (decimal * me.height);\n\t},\n\n\t/**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t */\n\tgetBasePixel: function() {\n\t\treturn this.getPixelForValue(this.getBaseValue());\n\t},\n\n\tgetBaseValue: function() {\n\t\tvar me = this;\n\t\tvar min = me.min;\n\t\tvar max = me.max;\n\n\t\treturn me.beginAtZero ? 0 :\n\t\t\tmin < 0 && max < 0 ? max :\n\t\t\tmin > 0 && max > 0 ? min :\n\t\t\t0;\n\t},\n\n\t/**\n\t * Returns a subset of ticks to be plotted to avoid overlapping labels.\n\t * @private\n\t */\n\t_autoSkip: function(ticks) {\n\t\tvar me = this;\n\t\tvar isHorizontal = me.isHorizontal();\n\t\tvar optionTicks = me.options.ticks.minor;\n\t\tvar tickCount = ticks.length;\n\t\tvar skipRatio = false;\n\t\tvar maxTicks = optionTicks.maxTicksLimit;\n\n\t\t// Total space needed to display all ticks. First and last ticks are\n\t\t// drawn as their center at end of axis, so tickCount-1\n\t\tvar ticksLength = me._tickSize() * (tickCount - 1);\n\n\t\t// Axis length\n\t\tvar axisLength = isHorizontal\n\t\t\t? me.width - (me.paddingLeft + me.paddingRight)\n\t\t\t: me.height - (me.paddingTop + me.PaddingBottom);\n\n\t\tvar result = [];\n\t\tvar i, tick;\n\n\t\tif (ticksLength > axisLength) {\n\t\t\tskipRatio = 1 + Math.floor(ticksLength / axisLength);\n\t\t}\n\n\t\t// if they defined a max number of optionTicks,\n\t\t// increase skipRatio until that number is met\n\t\tif (tickCount > maxTicks) {\n\t\t\tskipRatio = Math.max(skipRatio, 1 + Math.floor(tickCount / maxTicks));\n\t\t}\n\n\t\tfor (i = 0; i < tickCount; i++) {\n\t\t\ttick = ticks[i];\n\n\t\t\tif (skipRatio > 1 && i % skipRatio > 0) {\n\t\t\t\t// leave tick in place but make sure it's not displayed (#4635)\n\t\t\t\tdelete tick.label;\n\t\t\t}\n\t\t\tresult.push(tick);\n\t\t}\n\t\treturn result;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_tickSize: function() {\n\t\tvar me = this;\n\t\tvar isHorizontal = me.isHorizontal();\n\t\tvar optionTicks = me.options.ticks.minor;\n\n\t\t// Calculate space needed by label in axis direction.\n\t\tvar rot = helpers$1.toRadians(me.labelRotation);\n\t\tvar cos = Math.abs(Math.cos(rot));\n\t\tvar sin = Math.abs(Math.sin(rot));\n\n\t\tvar padding = optionTicks.autoSkipPadding || 0;\n\t\tvar w = (me.longestLabelWidth + padding) || 0;\n\n\t\tvar tickFont = helpers$1.options._parseFont(optionTicks);\n\t\tvar h = (me._maxLabelLines * tickFont.lineHeight + padding) || 0;\n\n\t\t// Calculate space needed for 1 tick in axis direction.\n\t\treturn isHorizontal\n\t\t\t? h * cos > w * sin ? w / cos : h / sin\n\t\t\t: h * sin < w * cos ? h / cos : w / sin;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_isVisible: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar display = me.options.display;\n\t\tvar i, ilen, meta;\n\n\t\tif (display !== 'auto') {\n\t\t\treturn !!display;\n\t\t}\n\n\t\t// When 'auto', the scale is visible if at least one associated dataset is visible.\n\t\tfor (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n\t\t\tif (chart.isDatasetVisible(i)) {\n\t\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\t\tif (meta.xAxisID === me.id || meta.yAxisID === me.id) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t},\n\n\t/**\n\t * Actually draw the scale on the canvas\n\t * @param {object} chartArea - the area of the chart to draw full grid lines on\n\t */\n\tdraw: function(chartArea) {\n\t\tvar me = this;\n\t\tvar options = me.options;\n\n\t\tif (!me._isVisible()) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar chart = me.chart;\n\t\tvar context = me.ctx;\n\t\tvar globalDefaults = core_defaults.global;\n\t\tvar defaultFontColor = globalDefaults.defaultFontColor;\n\t\tvar optionTicks = options.ticks.minor;\n\t\tvar optionMajorTicks = options.ticks.major || optionTicks;\n\t\tvar gridLines = options.gridLines;\n\t\tvar scaleLabel = options.scaleLabel;\n\t\tvar position = options.position;\n\n\t\tvar isRotated = me.labelRotation !== 0;\n\t\tvar isMirrored = optionTicks.mirror;\n\t\tvar isHorizontal = me.isHorizontal();\n\n\t\tvar parseFont = helpers$1.options._parseFont;\n\t\tvar ticks = optionTicks.display && optionTicks.autoSkip ? me._autoSkip(me.getTicks()) : me.getTicks();\n\t\tvar tickFontColor = valueOrDefault$9(optionTicks.fontColor, defaultFontColor);\n\t\tvar tickFont = parseFont(optionTicks);\n\t\tvar lineHeight = tickFont.lineHeight;\n\t\tvar majorTickFontColor = valueOrDefault$9(optionMajorTicks.fontColor, defaultFontColor);\n\t\tvar majorTickFont = parseFont(optionMajorTicks);\n\t\tvar tickPadding = optionTicks.padding;\n\t\tvar labelOffset = optionTicks.labelOffset;\n\n\t\tvar tl = gridLines.drawTicks ? gridLines.tickMarkLength : 0;\n\n\t\tvar scaleLabelFontColor = valueOrDefault$9(scaleLabel.fontColor, defaultFontColor);\n\t\tvar scaleLabelFont = parseFont(scaleLabel);\n\t\tvar scaleLabelPadding = helpers$1.options.toPadding(scaleLabel.padding);\n\t\tvar labelRotationRadians = helpers$1.toRadians(me.labelRotation);\n\n\t\tvar itemsToDraw = [];\n\n\t\tvar axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;\n\t\tvar alignPixel = helpers$1._alignPixel;\n\t\tvar borderValue, tickStart, tickEnd;\n\n\t\tif (position === 'top') {\n\t\t\tborderValue = alignPixel(chart, me.bottom, axisWidth);\n\t\t\ttickStart = me.bottom - tl;\n\t\t\ttickEnd = borderValue - axisWidth / 2;\n\t\t} else if (position === 'bottom') {\n\t\t\tborderValue = alignPixel(chart, me.top, axisWidth);\n\t\t\ttickStart = borderValue + axisWidth / 2;\n\t\t\ttickEnd = me.top + tl;\n\t\t} else if (position === 'left') {\n\t\t\tborderValue = alignPixel(chart, me.right, axisWidth);\n\t\t\ttickStart = me.right - tl;\n\t\t\ttickEnd = borderValue - axisWidth / 2;\n\t\t} else {\n\t\t\tborderValue = alignPixel(chart, me.left, axisWidth);\n\t\t\ttickStart = borderValue + axisWidth / 2;\n\t\t\ttickEnd = me.left + tl;\n\t\t}\n\n\t\tvar epsilon = 0.0000001; // 0.0000001 is margin in pixels for Accumulated error.\n\n\t\thelpers$1.each(ticks, function(tick, index) {\n\t\t\t// autoskipper skipped this tick (#4635)\n\t\t\tif (helpers$1.isNullOrUndef(tick.label)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar label = tick.label;\n\t\t\tvar lineWidth, lineColor, borderDash, borderDashOffset;\n\t\t\tif (index === me.zeroLineIndex && options.offset === gridLines.offsetGridLines) {\n\t\t\t\t// Draw the first index specially\n\t\t\t\tlineWidth = gridLines.zeroLineWidth;\n\t\t\t\tlineColor = gridLines.zeroLineColor;\n\t\t\t\tborderDash = gridLines.zeroLineBorderDash || [];\n\t\t\t\tborderDashOffset = gridLines.zeroLineBorderDashOffset || 0.0;\n\t\t\t} else {\n\t\t\t\tlineWidth = valueAtIndexOrDefault(gridLines.lineWidth, index);\n\t\t\t\tlineColor = valueAtIndexOrDefault(gridLines.color, index);\n\t\t\t\tborderDash = gridLines.borderDash || [];\n\t\t\t\tborderDashOffset = gridLines.borderDashOffset || 0.0;\n\t\t\t}\n\n\t\t\t// Common properties\n\t\t\tvar tx1, ty1, tx2, ty2, x1, y1, x2, y2, labelX, labelY, textOffset, textAlign;\n\t\t\tvar labelCount = helpers$1.isArray(label) ? label.length : 1;\n\t\t\tvar lineValue = getPixelForGridLine(me, index, gridLines.offsetGridLines);\n\n\t\t\tif (isHorizontal) {\n\t\t\t\tvar labelYOffset = tl + tickPadding;\n\n\t\t\t\tif (lineValue < me.left - epsilon) {\n\t\t\t\t\tlineColor = 'rgba(0,0,0,0)';\n\t\t\t\t}\n\n\t\t\t\ttx1 = tx2 = x1 = x2 = alignPixel(chart, lineValue, lineWidth);\n\t\t\t\tty1 = tickStart;\n\t\t\t\tty2 = tickEnd;\n\t\t\t\tlabelX = me.getPixelForTick(index) + labelOffset; // x values for optionTicks (need to consider offsetLabel option)\n\n\t\t\t\tif (position === 'top') {\n\t\t\t\t\ty1 = alignPixel(chart, chartArea.top, axisWidth) + axisWidth / 2;\n\t\t\t\t\ty2 = chartArea.bottom;\n\t\t\t\t\ttextOffset = ((!isRotated ? 0.5 : 1) - labelCount) * lineHeight;\n\t\t\t\t\ttextAlign = !isRotated ? 'center' : 'left';\n\t\t\t\t\tlabelY = me.bottom - labelYOffset;\n\t\t\t\t} else {\n\t\t\t\t\ty1 = chartArea.top;\n\t\t\t\t\ty2 = alignPixel(chart, chartArea.bottom, axisWidth) - axisWidth / 2;\n\t\t\t\t\ttextOffset = (!isRotated ? 0.5 : 0) * lineHeight;\n\t\t\t\t\ttextAlign = !isRotated ? 'center' : 'right';\n\t\t\t\t\tlabelY = me.top + labelYOffset;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar labelXOffset = (isMirrored ? 0 : tl) + tickPadding;\n\n\t\t\t\tif (lineValue < me.top - epsilon) {\n\t\t\t\t\tlineColor = 'rgba(0,0,0,0)';\n\t\t\t\t}\n\n\t\t\t\ttx1 = tickStart;\n\t\t\t\ttx2 = tickEnd;\n\t\t\t\tty1 = ty2 = y1 = y2 = alignPixel(chart, lineValue, lineWidth);\n\t\t\t\tlabelY = me.getPixelForTick(index) + labelOffset;\n\t\t\t\ttextOffset = (1 - labelCount) * lineHeight / 2;\n\n\t\t\t\tif (position === 'left') {\n\t\t\t\t\tx1 = alignPixel(chart, chartArea.left, axisWidth) + axisWidth / 2;\n\t\t\t\t\tx2 = chartArea.right;\n\t\t\t\t\ttextAlign = isMirrored ? 'left' : 'right';\n\t\t\t\t\tlabelX = me.right - labelXOffset;\n\t\t\t\t} else {\n\t\t\t\t\tx1 = chartArea.left;\n\t\t\t\t\tx2 = alignPixel(chart, chartArea.right, axisWidth) - axisWidth / 2;\n\t\t\t\t\ttextAlign = isMirrored ? 'right' : 'left';\n\t\t\t\t\tlabelX = me.left + labelXOffset;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\titemsToDraw.push({\n\t\t\t\ttx1: tx1,\n\t\t\t\tty1: ty1,\n\t\t\t\ttx2: tx2,\n\t\t\t\tty2: ty2,\n\t\t\t\tx1: x1,\n\t\t\t\ty1: y1,\n\t\t\t\tx2: x2,\n\t\t\t\ty2: y2,\n\t\t\t\tlabelX: labelX,\n\t\t\t\tlabelY: labelY,\n\t\t\t\tglWidth: lineWidth,\n\t\t\t\tglColor: lineColor,\n\t\t\t\tglBorderDash: borderDash,\n\t\t\t\tglBorderDashOffset: borderDashOffset,\n\t\t\t\trotation: -1 * labelRotationRadians,\n\t\t\t\tlabel: label,\n\t\t\t\tmajor: tick.major,\n\t\t\t\ttextOffset: textOffset,\n\t\t\t\ttextAlign: textAlign\n\t\t\t});\n\t\t});\n\n\t\t// Draw all of the tick labels, tick marks, and grid lines at the correct places\n\t\thelpers$1.each(itemsToDraw, function(itemToDraw) {\n\t\t\tvar glWidth = itemToDraw.glWidth;\n\t\t\tvar glColor = itemToDraw.glColor;\n\n\t\t\tif (gridLines.display && glWidth && glColor) {\n\t\t\t\tcontext.save();\n\t\t\t\tcontext.lineWidth = glWidth;\n\t\t\t\tcontext.strokeStyle = glColor;\n\t\t\t\tif (context.setLineDash) {\n\t\t\t\t\tcontext.setLineDash(itemToDraw.glBorderDash);\n\t\t\t\t\tcontext.lineDashOffset = itemToDraw.glBorderDashOffset;\n\t\t\t\t}\n\n\t\t\t\tcontext.beginPath();\n\n\t\t\t\tif (gridLines.drawTicks) {\n\t\t\t\t\tcontext.moveTo(itemToDraw.tx1, itemToDraw.ty1);\n\t\t\t\t\tcontext.lineTo(itemToDraw.tx2, itemToDraw.ty2);\n\t\t\t\t}\n\n\t\t\t\tif (gridLines.drawOnChartArea) {\n\t\t\t\t\tcontext.moveTo(itemToDraw.x1, itemToDraw.y1);\n\t\t\t\t\tcontext.lineTo(itemToDraw.x2, itemToDraw.y2);\n\t\t\t\t}\n\n\t\t\t\tcontext.stroke();\n\t\t\t\tcontext.restore();\n\t\t\t}\n\n\t\t\tif (optionTicks.display) {\n\t\t\t\t// Make sure we draw text in the correct color and font\n\t\t\t\tcontext.save();\n\t\t\t\tcontext.translate(itemToDraw.labelX, itemToDraw.labelY);\n\t\t\t\tcontext.rotate(itemToDraw.rotation);\n\t\t\t\tcontext.font = itemToDraw.major ? majorTickFont.string : tickFont.string;\n\t\t\t\tcontext.fillStyle = itemToDraw.major ? majorTickFontColor : tickFontColor;\n\t\t\t\tcontext.textBaseline = 'middle';\n\t\t\t\tcontext.textAlign = itemToDraw.textAlign;\n\n\t\t\t\tvar label = itemToDraw.label;\n\t\t\t\tvar y = itemToDraw.textOffset;\n\t\t\t\tif (helpers$1.isArray(label)) {\n\t\t\t\t\tfor (var i = 0; i < label.length; ++i) {\n\t\t\t\t\t\t// We just make sure the multiline element is a string here..\n\t\t\t\t\t\tcontext.fillText('' + label[i], 0, y);\n\t\t\t\t\t\ty += lineHeight;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcontext.fillText(label, 0, y);\n\t\t\t\t}\n\t\t\t\tcontext.restore();\n\t\t\t}\n\t\t});\n\n\t\tif (scaleLabel.display) {\n\t\t\t// Draw the scale label\n\t\t\tvar scaleLabelX;\n\t\t\tvar scaleLabelY;\n\t\t\tvar rotation = 0;\n\t\t\tvar halfLineHeight = scaleLabelFont.lineHeight / 2;\n\n\t\t\tif (isHorizontal) {\n\t\t\t\tscaleLabelX = me.left + ((me.right - me.left) / 2); // midpoint of the width\n\t\t\t\tscaleLabelY = position === 'bottom'\n\t\t\t\t\t? me.bottom - halfLineHeight - scaleLabelPadding.bottom\n\t\t\t\t\t: me.top + halfLineHeight + scaleLabelPadding.top;\n\t\t\t} else {\n\t\t\t\tvar isLeft = position === 'left';\n\t\t\t\tscaleLabelX = isLeft\n\t\t\t\t\t? me.left + halfLineHeight + scaleLabelPadding.top\n\t\t\t\t\t: me.right - halfLineHeight - scaleLabelPadding.top;\n\t\t\t\tscaleLabelY = me.top + ((me.bottom - me.top) / 2);\n\t\t\t\trotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;\n\t\t\t}\n\n\t\t\tcontext.save();\n\t\t\tcontext.translate(scaleLabelX, scaleLabelY);\n\t\t\tcontext.rotate(rotation);\n\t\t\tcontext.textAlign = 'center';\n\t\t\tcontext.textBaseline = 'middle';\n\t\t\tcontext.fillStyle = scaleLabelFontColor; // render in correct colour\n\t\t\tcontext.font = scaleLabelFont.string;\n\t\t\tcontext.fillText(scaleLabel.labelString, 0, 0);\n\t\t\tcontext.restore();\n\t\t}\n\n\t\tif (axisWidth) {\n\t\t\t// Draw the line at the edge of the axis\n\t\t\tvar firstLineWidth = axisWidth;\n\t\t\tvar lastLineWidth = valueAtIndexOrDefault(gridLines.lineWidth, ticks.length - 1, 0);\n\t\t\tvar x1, x2, y1, y2;\n\n\t\t\tif (isHorizontal) {\n\t\t\t\tx1 = alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;\n\t\t\t\tx2 = alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;\n\t\t\t\ty1 = y2 = borderValue;\n\t\t\t} else {\n\t\t\t\ty1 = alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;\n\t\t\t\ty2 = alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;\n\t\t\t\tx1 = x2 = borderValue;\n\t\t\t}\n\n\t\t\tcontext.lineWidth = axisWidth;\n\t\t\tcontext.strokeStyle = valueAtIndexOrDefault(gridLines.color, 0);\n\t\t\tcontext.beginPath();\n\t\t\tcontext.moveTo(x1, y1);\n\t\t\tcontext.lineTo(x2, y2);\n\t\t\tcontext.stroke();\n\t\t}\n\t}\n});\n\nvar defaultConfig = {\n\tposition: 'bottom'\n};\n\nvar scale_category = core_scale.extend({\n\t/**\n\t* Internal function to get the correct labels. If data.xLabels or data.yLabels are defined, use those\n\t* else fall back to data.labels\n\t* @private\n\t*/\n\tgetLabels: function() {\n\t\tvar data = this.chart.data;\n\t\treturn this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels;\n\t},\n\n\tdetermineDataLimits: function() {\n\t\tvar me = this;\n\t\tvar labels = me.getLabels();\n\t\tme.minIndex = 0;\n\t\tme.maxIndex = labels.length - 1;\n\t\tvar findIndex;\n\n\t\tif (me.options.ticks.min !== undefined) {\n\t\t\t// user specified min value\n\t\t\tfindIndex = labels.indexOf(me.options.ticks.min);\n\t\t\tme.minIndex = findIndex !== -1 ? findIndex : me.minIndex;\n\t\t}\n\n\t\tif (me.options.ticks.max !== undefined) {\n\t\t\t// user specified max value\n\t\t\tfindIndex = labels.indexOf(me.options.ticks.max);\n\t\t\tme.maxIndex = findIndex !== -1 ? findIndex : me.maxIndex;\n\t\t}\n\n\t\tme.min = labels[me.minIndex];\n\t\tme.max = labels[me.maxIndex];\n\t},\n\n\tbuildTicks: function() {\n\t\tvar me = this;\n\t\tvar labels = me.getLabels();\n\t\t// If we are viewing some subset of labels, slice the original array\n\t\tme.ticks = (me.minIndex === 0 && me.maxIndex === labels.length - 1) ? labels : labels.slice(me.minIndex, me.maxIndex + 1);\n\t},\n\n\tgetLabelForIndex: function(index, datasetIndex) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\n\t\tif (chart.getDatasetMeta(datasetIndex).controller._getValueScaleId() === me.id) {\n\t\t\treturn me.getRightValue(chart.data.datasets[datasetIndex].data[index]);\n\t\t}\n\n\t\treturn me.ticks[index - me.minIndex];\n\t},\n\n\t// Used to get data value locations.  Value can either be an index or a numerical value\n\tgetPixelForValue: function(value, index) {\n\t\tvar me = this;\n\t\tvar offset = me.options.offset;\n\t\t// 1 is added because we need the length but we have the indexes\n\t\tvar offsetAmt = Math.max((me.maxIndex + 1 - me.minIndex - (offset ? 0 : 1)), 1);\n\n\t\t// If value is a data object, then index is the index in the data array,\n\t\t// not the index of the scale. We need to change that.\n\t\tvar valueCategory;\n\t\tif (value !== undefined && value !== null) {\n\t\t\tvalueCategory = me.isHorizontal() ? value.x : value.y;\n\t\t}\n\t\tif (valueCategory !== undefined || (value !== undefined && isNaN(index))) {\n\t\t\tvar labels = me.getLabels();\n\t\t\tvalue = valueCategory || value;\n\t\t\tvar idx = labels.indexOf(value);\n\t\t\tindex = idx !== -1 ? idx : index;\n\t\t}\n\n\t\tif (me.isHorizontal()) {\n\t\t\tvar valueWidth = me.width / offsetAmt;\n\t\t\tvar widthOffset = (valueWidth * (index - me.minIndex));\n\n\t\t\tif (offset) {\n\t\t\t\twidthOffset += (valueWidth / 2);\n\t\t\t}\n\n\t\t\treturn me.left + widthOffset;\n\t\t}\n\t\tvar valueHeight = me.height / offsetAmt;\n\t\tvar heightOffset = (valueHeight * (index - me.minIndex));\n\n\t\tif (offset) {\n\t\t\theightOffset += (valueHeight / 2);\n\t\t}\n\n\t\treturn me.top + heightOffset;\n\t},\n\n\tgetPixelForTick: function(index) {\n\t\treturn this.getPixelForValue(this.ticks[index], index + this.minIndex, null);\n\t},\n\n\tgetValueForPixel: function(pixel) {\n\t\tvar me = this;\n\t\tvar offset = me.options.offset;\n\t\tvar value;\n\t\tvar offsetAmt = Math.max((me._ticks.length - (offset ? 0 : 1)), 1);\n\t\tvar horz = me.isHorizontal();\n\t\tvar valueDimension = (horz ? me.width : me.height) / offsetAmt;\n\n\t\tpixel -= horz ? me.left : me.top;\n\n\t\tif (offset) {\n\t\t\tpixel -= (valueDimension / 2);\n\t\t}\n\n\t\tif (pixel <= 0) {\n\t\t\tvalue = 0;\n\t\t} else {\n\t\t\tvalue = Math.round(pixel / valueDimension);\n\t\t}\n\n\t\treturn value + me.minIndex;\n\t},\n\n\tgetBasePixel: function() {\n\t\treturn this.bottom;\n\t}\n});\n\n// INTERNAL: static default options, registered in src/index.js\nvar _defaults = defaultConfig;\nscale_category._defaults = _defaults;\n\nvar noop = helpers$1.noop;\nvar isNullOrUndef = helpers$1.isNullOrUndef;\n\n/**\n * Generate a set of linear ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {number[]} array of tick values\n */\nfunction generateTicks(generationOptions, dataRange) {\n\tvar ticks = [];\n\t// To get a \"nice\" value for the tick spacing, we will use the appropriately named\n\t// \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n\t// for details.\n\n\tvar MIN_SPACING = 1e-14;\n\tvar stepSize = generationOptions.stepSize;\n\tvar unit = stepSize || 1;\n\tvar maxNumSpaces = generationOptions.maxTicks - 1;\n\tvar min = generationOptions.min;\n\tvar max = generationOptions.max;\n\tvar precision = generationOptions.precision;\n\tvar rmin = dataRange.min;\n\tvar rmax = dataRange.max;\n\tvar spacing = helpers$1.niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;\n\tvar factor, niceMin, niceMax, numSpaces;\n\n\t// Beyond MIN_SPACING floating point numbers being to lose precision\n\t// such that we can't do the math necessary to generate ticks\n\tif (spacing < MIN_SPACING && isNullOrUndef(min) && isNullOrUndef(max)) {\n\t\treturn [rmin, rmax];\n\t}\n\n\tnumSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n\tif (numSpaces > maxNumSpaces) {\n\t\t// If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n\t\tspacing = helpers$1.niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;\n\t}\n\n\tif (stepSize || isNullOrUndef(precision)) {\n\t\t// If a precision is not specified, calculate factor based on spacing\n\t\tfactor = Math.pow(10, helpers$1._decimalPlaces(spacing));\n\t} else {\n\t\t// If the user specified a precision, round to that number of decimal places\n\t\tfactor = Math.pow(10, precision);\n\t\tspacing = Math.ceil(spacing * factor) / factor;\n\t}\n\n\tniceMin = Math.floor(rmin / spacing) * spacing;\n\tniceMax = Math.ceil(rmax / spacing) * spacing;\n\n\t// If min, max and stepSize is set and they make an evenly spaced scale use it.\n\tif (stepSize) {\n\t\t// If very close to our whole number, use it.\n\t\tif (!isNullOrUndef(min) && helpers$1.almostWhole(min / spacing, spacing / 1000)) {\n\t\t\tniceMin = min;\n\t\t}\n\t\tif (!isNullOrUndef(max) && helpers$1.almostWhole(max / spacing, spacing / 1000)) {\n\t\t\tniceMax = max;\n\t\t}\n\t}\n\n\tnumSpaces = (niceMax - niceMin) / spacing;\n\t// If very close to our rounded value, use it.\n\tif (helpers$1.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n\t\tnumSpaces = Math.round(numSpaces);\n\t} else {\n\t\tnumSpaces = Math.ceil(numSpaces);\n\t}\n\n\tniceMin = Math.round(niceMin * factor) / factor;\n\tniceMax = Math.round(niceMax * factor) / factor;\n\tticks.push(isNullOrUndef(min) ? niceMin : min);\n\tfor (var j = 1; j < numSpaces; ++j) {\n\t\tticks.push(Math.round((niceMin + j * spacing) * factor) / factor);\n\t}\n\tticks.push(isNullOrUndef(max) ? niceMax : max);\n\n\treturn ticks;\n}\n\nvar scale_linearbase = core_scale.extend({\n\tgetRightValue: function(value) {\n\t\tif (typeof value === 'string') {\n\t\t\treturn +value;\n\t\t}\n\t\treturn core_scale.prototype.getRightValue.call(this, value);\n\t},\n\n\thandleTickRangeOptions: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar tickOpts = opts.ticks;\n\n\t\t// If we are forcing it to begin at 0, but 0 will already be rendered on the chart,\n\t\t// do nothing since that would make the chart weird. If the user really wants a weird chart\n\t\t// axis, they can manually override it\n\t\tif (tickOpts.beginAtZero) {\n\t\t\tvar minSign = helpers$1.sign(me.min);\n\t\t\tvar maxSign = helpers$1.sign(me.max);\n\n\t\t\tif (minSign < 0 && maxSign < 0) {\n\t\t\t\t// move the top up to 0\n\t\t\t\tme.max = 0;\n\t\t\t} else if (minSign > 0 && maxSign > 0) {\n\t\t\t\t// move the bottom down to 0\n\t\t\t\tme.min = 0;\n\t\t\t}\n\t\t}\n\n\t\tvar setMin = tickOpts.min !== undefined || tickOpts.suggestedMin !== undefined;\n\t\tvar setMax = tickOpts.max !== undefined || tickOpts.suggestedMax !== undefined;\n\n\t\tif (tickOpts.min !== undefined) {\n\t\t\tme.min = tickOpts.min;\n\t\t} else if (tickOpts.suggestedMin !== undefined) {\n\t\t\tif (me.min === null) {\n\t\t\t\tme.min = tickOpts.suggestedMin;\n\t\t\t} else {\n\t\t\t\tme.min = Math.min(me.min, tickOpts.suggestedMin);\n\t\t\t}\n\t\t}\n\n\t\tif (tickOpts.max !== undefined) {\n\t\t\tme.max = tickOpts.max;\n\t\t} else if (tickOpts.suggestedMax !== undefined) {\n\t\t\tif (me.max === null) {\n\t\t\t\tme.max = tickOpts.suggestedMax;\n\t\t\t} else {\n\t\t\t\tme.max = Math.max(me.max, tickOpts.suggestedMax);\n\t\t\t}\n\t\t}\n\n\t\tif (setMin !== setMax) {\n\t\t\t// We set the min or the max but not both.\n\t\t\t// So ensure that our range is good\n\t\t\t// Inverted or 0 length range can happen when\n\t\t\t// ticks.min is set, and no datasets are visible\n\t\t\tif (me.min >= me.max) {\n\t\t\t\tif (setMin) {\n\t\t\t\t\tme.max = me.min + 1;\n\t\t\t\t} else {\n\t\t\t\t\tme.min = me.max - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (me.min === me.max) {\n\t\t\tme.max++;\n\n\t\t\tif (!tickOpts.beginAtZero) {\n\t\t\t\tme.min--;\n\t\t\t}\n\t\t}\n\t},\n\n\tgetTickLimit: function() {\n\t\tvar me = this;\n\t\tvar tickOpts = me.options.ticks;\n\t\tvar stepSize = tickOpts.stepSize;\n\t\tvar maxTicksLimit = tickOpts.maxTicksLimit;\n\t\tvar maxTicks;\n\n\t\tif (stepSize) {\n\t\t\tmaxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;\n\t\t} else {\n\t\t\tmaxTicks = me._computeTickLimit();\n\t\t\tmaxTicksLimit = maxTicksLimit || 11;\n\t\t}\n\n\t\tif (maxTicksLimit) {\n\t\t\tmaxTicks = Math.min(maxTicksLimit, maxTicks);\n\t\t}\n\n\t\treturn maxTicks;\n\t},\n\n\t_computeTickLimit: function() {\n\t\treturn Number.POSITIVE_INFINITY;\n\t},\n\n\thandleDirectionalChanges: noop,\n\n\tbuildTicks: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar tickOpts = opts.ticks;\n\n\t\t// Figure out what the max number of ticks we can support it is based on the size of\n\t\t// the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n\t\t// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n\t\t// the graph. Make sure we always have at least 2 ticks\n\t\tvar maxTicks = me.getTickLimit();\n\t\tmaxTicks = Math.max(2, maxTicks);\n\n\t\tvar numericGeneratorOptions = {\n\t\t\tmaxTicks: maxTicks,\n\t\t\tmin: tickOpts.min,\n\t\t\tmax: tickOpts.max,\n\t\t\tprecision: tickOpts.precision,\n\t\t\tstepSize: helpers$1.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)\n\t\t};\n\t\tvar ticks = me.ticks = generateTicks(numericGeneratorOptions, me);\n\n\t\tme.handleDirectionalChanges();\n\n\t\t// At this point, we need to update our max and min given the tick values since we have expanded the\n\t\t// range of the scale\n\t\tme.max = helpers$1.max(ticks);\n\t\tme.min = helpers$1.min(ticks);\n\n\t\tif (tickOpts.reverse) {\n\t\t\tticks.reverse();\n\n\t\t\tme.start = me.max;\n\t\t\tme.end = me.min;\n\t\t} else {\n\t\t\tme.start = me.min;\n\t\t\tme.end = me.max;\n\t\t}\n\t},\n\n\tconvertTicksToLabels: function() {\n\t\tvar me = this;\n\t\tme.ticksAsNumbers = me.ticks.slice();\n\t\tme.zeroLineIndex = me.ticks.indexOf(0);\n\n\t\tcore_scale.prototype.convertTicksToLabels.call(me);\n\t}\n});\n\nvar defaultConfig$1 = {\n\tposition: 'left',\n\tticks: {\n\t\tcallback: core_ticks.formatters.linear\n\t}\n};\n\nvar scale_linear = scale_linearbase.extend({\n\tdetermineDataLimits: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar chart = me.chart;\n\t\tvar data = chart.data;\n\t\tvar datasets = data.datasets;\n\t\tvar isHorizontal = me.isHorizontal();\n\t\tvar DEFAULT_MIN = 0;\n\t\tvar DEFAULT_MAX = 1;\n\n\t\tfunction IDMatches(meta) {\n\t\t\treturn isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;\n\t\t}\n\n\t\t// First Calculate the range\n\t\tme.min = null;\n\t\tme.max = null;\n\n\t\tvar hasStacks = opts.stacked;\n\t\tif (hasStacks === undefined) {\n\t\t\thelpers$1.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\tif (hasStacks) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&\n\t\t\t\t\tmeta.stack !== undefined) {\n\t\t\t\t\thasStacks = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (opts.stacked || hasStacks) {\n\t\t\tvar valuesPerStack = {};\n\n\t\t\thelpers$1.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\tvar key = [\n\t\t\t\t\tmeta.type,\n\t\t\t\t\t// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\n\t\t\t\t\t((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),\n\t\t\t\t\tmeta.stack\n\t\t\t\t].join('.');\n\n\t\t\t\tif (valuesPerStack[key] === undefined) {\n\t\t\t\t\tvaluesPerStack[key] = {\n\t\t\t\t\t\tpositiveValues: [],\n\t\t\t\t\t\tnegativeValues: []\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Store these per type\n\t\t\t\tvar positiveValues = valuesPerStack[key].positiveValues;\n\t\t\t\tvar negativeValues = valuesPerStack[key].negativeValues;\n\n\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n\t\t\t\t\thelpers$1.each(dataset.data, function(rawValue, index) {\n\t\t\t\t\t\tvar value = +me.getRightValue(rawValue);\n\t\t\t\t\t\tif (isNaN(value) || meta.data[index].hidden) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpositiveValues[index] = positiveValues[index] || 0;\n\t\t\t\t\t\tnegativeValues[index] = negativeValues[index] || 0;\n\n\t\t\t\t\t\tif (opts.relativePoints) {\n\t\t\t\t\t\t\tpositiveValues[index] = 100;\n\t\t\t\t\t\t} else if (value < 0) {\n\t\t\t\t\t\t\tnegativeValues[index] += value;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpositiveValues[index] += value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\thelpers$1.each(valuesPerStack, function(valuesForType) {\n\t\t\t\tvar values = valuesForType.positiveValues.concat(valuesForType.negativeValues);\n\t\t\t\tvar minVal = helpers$1.min(values);\n\t\t\t\tvar maxVal = helpers$1.max(values);\n\t\t\t\tme.min = me.min === null ? minVal : Math.min(me.min, minVal);\n\t\t\t\tme.max = me.max === null ? maxVal : Math.max(me.max, maxVal);\n\t\t\t});\n\n\t\t} else {\n\t\t\thelpers$1.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n\t\t\t\t\thelpers$1.each(dataset.data, function(rawValue, index) {\n\t\t\t\t\t\tvar value = +me.getRightValue(rawValue);\n\t\t\t\t\t\tif (isNaN(value) || meta.data[index].hidden) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (me.min === null) {\n\t\t\t\t\t\t\tme.min = value;\n\t\t\t\t\t\t} else if (value < me.min) {\n\t\t\t\t\t\t\tme.min = value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (me.max === null) {\n\t\t\t\t\t\t\tme.max = value;\n\t\t\t\t\t\t} else if (value > me.max) {\n\t\t\t\t\t\t\tme.max = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tme.min = isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;\n\t\tme.max = isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX;\n\n\t\t// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\n\t\tthis.handleTickRangeOptions();\n\t},\n\n\t// Returns the maximum number of ticks based on the scale dimension\n\t_computeTickLimit: function() {\n\t\tvar me = this;\n\t\tvar tickFont;\n\n\t\tif (me.isHorizontal()) {\n\t\t\treturn Math.ceil(me.width / 40);\n\t\t}\n\t\ttickFont = helpers$1.options._parseFont(me.options.ticks);\n\t\treturn Math.ceil(me.height / tickFont.lineHeight);\n\t},\n\n\t// Called after the ticks are built. We need\n\thandleDirectionalChanges: function() {\n\t\tif (!this.isHorizontal()) {\n\t\t\t// We are in a vertical orientation. The top value is the highest. So reverse the array\n\t\t\tthis.ticks.reverse();\n\t\t}\n\t},\n\n\tgetLabelForIndex: function(index, datasetIndex) {\n\t\treturn +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n\t},\n\n\t// Utils\n\tgetPixelForValue: function(value) {\n\t\t// This must be called after fit has been run so that\n\t\t// this.left, this.top, this.right, and this.bottom have been defined\n\t\tvar me = this;\n\t\tvar start = me.start;\n\n\t\tvar rightValue = +me.getRightValue(value);\n\t\tvar pixel;\n\t\tvar range = me.end - start;\n\n\t\tif (me.isHorizontal()) {\n\t\t\tpixel = me.left + (me.width / range * (rightValue - start));\n\t\t} else {\n\t\t\tpixel = me.bottom - (me.height / range * (rightValue - start));\n\t\t}\n\t\treturn pixel;\n\t},\n\n\tgetValueForPixel: function(pixel) {\n\t\tvar me = this;\n\t\tvar isHorizontal = me.isHorizontal();\n\t\tvar innerDimension = isHorizontal ? me.width : me.height;\n\t\tvar offset = (isHorizontal ? pixel - me.left : me.bottom - pixel) / innerDimension;\n\t\treturn me.start + ((me.end - me.start) * offset);\n\t},\n\n\tgetPixelForTick: function(index) {\n\t\treturn this.getPixelForValue(this.ticksAsNumbers[index]);\n\t}\n});\n\n// INTERNAL: static default options, registered in src/index.js\nvar _defaults$1 = defaultConfig$1;\nscale_linear._defaults = _defaults$1;\n\nvar valueOrDefault$a = helpers$1.valueOrDefault;\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {number[]} array of tick values\n */\nfunction generateTicks$1(generationOptions, dataRange) {\n\tvar ticks = [];\n\n\tvar tickVal = valueOrDefault$a(generationOptions.min, Math.pow(10, Math.floor(helpers$1.log10(dataRange.min))));\n\n\tvar endExp = Math.floor(helpers$1.log10(dataRange.max));\n\tvar endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));\n\tvar exp, significand;\n\n\tif (tickVal === 0) {\n\t\texp = Math.floor(helpers$1.log10(dataRange.minNotZero));\n\t\tsignificand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));\n\n\t\tticks.push(tickVal);\n\t\ttickVal = significand * Math.pow(10, exp);\n\t} else {\n\t\texp = Math.floor(helpers$1.log10(tickVal));\n\t\tsignificand = Math.floor(tickVal / Math.pow(10, exp));\n\t}\n\tvar precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n\n\tdo {\n\t\tticks.push(tickVal);\n\n\t\t++significand;\n\t\tif (significand === 10) {\n\t\t\tsignificand = 1;\n\t\t\t++exp;\n\t\t\tprecision = exp >= 0 ? 1 : precision;\n\t\t}\n\n\t\ttickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;\n\t} while (exp < endExp || (exp === endExp && significand < endSignificand));\n\n\tvar lastTick = valueOrDefault$a(generationOptions.max, tickVal);\n\tticks.push(lastTick);\n\n\treturn ticks;\n}\n\nvar defaultConfig$2 = {\n\tposition: 'left',\n\n\t// label settings\n\tticks: {\n\t\tcallback: core_ticks.formatters.logarithmic\n\t}\n};\n\n// TODO(v3): change this to positiveOrDefault\nfunction nonNegativeOrDefault(value, defaultValue) {\n\treturn helpers$1.isFinite(value) && value >= 0 ? value : defaultValue;\n}\n\nvar scale_logarithmic = core_scale.extend({\n\tdetermineDataLimits: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar chart = me.chart;\n\t\tvar data = chart.data;\n\t\tvar datasets = data.datasets;\n\t\tvar isHorizontal = me.isHorizontal();\n\t\tfunction IDMatches(meta) {\n\t\t\treturn isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;\n\t\t}\n\n\t\t// Calculate Range\n\t\tme.min = null;\n\t\tme.max = null;\n\t\tme.minNotZero = null;\n\n\t\tvar hasStacks = opts.stacked;\n\t\tif (hasStacks === undefined) {\n\t\t\thelpers$1.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\tif (hasStacks) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&\n\t\t\t\t\tmeta.stack !== undefined) {\n\t\t\t\t\thasStacks = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (opts.stacked || hasStacks) {\n\t\t\tvar valuesPerStack = {};\n\n\t\t\thelpers$1.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\tvar key = [\n\t\t\t\t\tmeta.type,\n\t\t\t\t\t// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\n\t\t\t\t\t((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),\n\t\t\t\t\tmeta.stack\n\t\t\t\t].join('.');\n\n\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n\t\t\t\t\tif (valuesPerStack[key] === undefined) {\n\t\t\t\t\t\tvaluesPerStack[key] = [];\n\t\t\t\t\t}\n\n\t\t\t\t\thelpers$1.each(dataset.data, function(rawValue, index) {\n\t\t\t\t\t\tvar values = valuesPerStack[key];\n\t\t\t\t\t\tvar value = +me.getRightValue(rawValue);\n\t\t\t\t\t\t// invalid, hidden and negative values are ignored\n\t\t\t\t\t\tif (isNaN(value) || meta.data[index].hidden || value < 0) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvalues[index] = values[index] || 0;\n\t\t\t\t\t\tvalues[index] += value;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\thelpers$1.each(valuesPerStack, function(valuesForType) {\n\t\t\t\tif (valuesForType.length > 0) {\n\t\t\t\t\tvar minVal = helpers$1.min(valuesForType);\n\t\t\t\t\tvar maxVal = helpers$1.max(valuesForType);\n\t\t\t\t\tme.min = me.min === null ? minVal : Math.min(me.min, minVal);\n\t\t\t\t\tme.max = me.max === null ? maxVal : Math.max(me.max, maxVal);\n\t\t\t\t}\n\t\t\t});\n\n\t\t} else {\n\t\t\thelpers$1.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n\t\t\t\t\thelpers$1.each(dataset.data, function(rawValue, index) {\n\t\t\t\t\t\tvar value = +me.getRightValue(rawValue);\n\t\t\t\t\t\t// invalid, hidden and negative values are ignored\n\t\t\t\t\t\tif (isNaN(value) || meta.data[index].hidden || value < 0) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (me.min === null) {\n\t\t\t\t\t\t\tme.min = value;\n\t\t\t\t\t\t} else if (value < me.min) {\n\t\t\t\t\t\t\tme.min = value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (me.max === null) {\n\t\t\t\t\t\t\tme.max = value;\n\t\t\t\t\t\t} else if (value > me.max) {\n\t\t\t\t\t\t\tme.max = value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (value !== 0 && (me.minNotZero === null || value < me.minNotZero)) {\n\t\t\t\t\t\t\tme.minNotZero = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Common base implementation to handle ticks.min, ticks.max\n\t\tthis.handleTickRangeOptions();\n\t},\n\n\thandleTickRangeOptions: function() {\n\t\tvar me = this;\n\t\tvar tickOpts = me.options.ticks;\n\t\tvar DEFAULT_MIN = 1;\n\t\tvar DEFAULT_MAX = 10;\n\n\t\tme.min = nonNegativeOrDefault(tickOpts.min, me.min);\n\t\tme.max = nonNegativeOrDefault(tickOpts.max, me.max);\n\n\t\tif (me.min === me.max) {\n\t\t\tif (me.min !== 0 && me.min !== null) {\n\t\t\t\tme.min = Math.pow(10, Math.floor(helpers$1.log10(me.min)) - 1);\n\t\t\t\tme.max = Math.pow(10, Math.floor(helpers$1.log10(me.max)) + 1);\n\t\t\t} else {\n\t\t\t\tme.min = DEFAULT_MIN;\n\t\t\t\tme.max = DEFAULT_MAX;\n\t\t\t}\n\t\t}\n\t\tif (me.min === null) {\n\t\t\tme.min = Math.pow(10, Math.floor(helpers$1.log10(me.max)) - 1);\n\t\t}\n\t\tif (me.max === null) {\n\t\t\tme.max = me.min !== 0\n\t\t\t\t? Math.pow(10, Math.floor(helpers$1.log10(me.min)) + 1)\n\t\t\t\t: DEFAULT_MAX;\n\t\t}\n\t\tif (me.minNotZero === null) {\n\t\t\tif (me.min > 0) {\n\t\t\t\tme.minNotZero = me.min;\n\t\t\t} else if (me.max < 1) {\n\t\t\t\tme.minNotZero = Math.pow(10, Math.floor(helpers$1.log10(me.max)));\n\t\t\t} else {\n\t\t\t\tme.minNotZero = DEFAULT_MIN;\n\t\t\t}\n\t\t}\n\t},\n\n\tbuildTicks: function() {\n\t\tvar me = this;\n\t\tvar tickOpts = me.options.ticks;\n\t\tvar reverse = !me.isHorizontal();\n\n\t\tvar generationOptions = {\n\t\t\tmin: nonNegativeOrDefault(tickOpts.min),\n\t\t\tmax: nonNegativeOrDefault(tickOpts.max)\n\t\t};\n\t\tvar ticks = me.ticks = generateTicks$1(generationOptions, me);\n\n\t\t// At this point, we need to update our max and min given the tick values since we have expanded the\n\t\t// range of the scale\n\t\tme.max = helpers$1.max(ticks);\n\t\tme.min = helpers$1.min(ticks);\n\n\t\tif (tickOpts.reverse) {\n\t\t\treverse = !reverse;\n\t\t\tme.start = me.max;\n\t\t\tme.end = me.min;\n\t\t} else {\n\t\t\tme.start = me.min;\n\t\t\tme.end = me.max;\n\t\t}\n\t\tif (reverse) {\n\t\t\tticks.reverse();\n\t\t}\n\t},\n\n\tconvertTicksToLabels: function() {\n\t\tthis.tickValues = this.ticks.slice();\n\n\t\tcore_scale.prototype.convertTicksToLabels.call(this);\n\t},\n\n\t// Get the correct tooltip label\n\tgetLabelForIndex: function(index, datasetIndex) {\n\t\treturn +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n\t},\n\n\tgetPixelForTick: function(index) {\n\t\treturn this.getPixelForValue(this.tickValues[index]);\n\t},\n\n\t/**\n\t * Returns the value of the first tick.\n\t * @param {number} value - The minimum not zero value.\n\t * @return {number} The first tick value.\n\t * @private\n\t */\n\t_getFirstTickValue: function(value) {\n\t\tvar exp = Math.floor(helpers$1.log10(value));\n\t\tvar significand = Math.floor(value / Math.pow(10, exp));\n\n\t\treturn significand * Math.pow(10, exp);\n\t},\n\n\tgetPixelForValue: function(value) {\n\t\tvar me = this;\n\t\tvar tickOpts = me.options.ticks;\n\t\tvar reverse = tickOpts.reverse;\n\t\tvar log10 = helpers$1.log10;\n\t\tvar firstTickValue = me._getFirstTickValue(me.minNotZero);\n\t\tvar offset = 0;\n\t\tvar innerDimension, pixel, start, end, sign;\n\n\t\tvalue = +me.getRightValue(value);\n\t\tif (reverse) {\n\t\t\tstart = me.end;\n\t\t\tend = me.start;\n\t\t\tsign = -1;\n\t\t} else {\n\t\t\tstart = me.start;\n\t\t\tend = me.end;\n\t\t\tsign = 1;\n\t\t}\n\t\tif (me.isHorizontal()) {\n\t\t\tinnerDimension = me.width;\n\t\t\tpixel = reverse ? me.right : me.left;\n\t\t} else {\n\t\t\tinnerDimension = me.height;\n\t\t\tsign *= -1; // invert, since the upper-left corner of the canvas is at pixel (0, 0)\n\t\t\tpixel = reverse ? me.top : me.bottom;\n\t\t}\n\t\tif (value !== start) {\n\t\t\tif (start === 0) { // include zero tick\n\t\t\t\toffset = valueOrDefault$a(tickOpts.fontSize, core_defaults.global.defaultFontSize);\n\t\t\t\tinnerDimension -= offset;\n\t\t\t\tstart = firstTickValue;\n\t\t\t}\n\t\t\tif (value !== 0) {\n\t\t\t\toffset += innerDimension / (log10(end) - log10(start)) * (log10(value) - log10(start));\n\t\t\t}\n\t\t\tpixel += sign * offset;\n\t\t}\n\t\treturn pixel;\n\t},\n\n\tgetValueForPixel: function(pixel) {\n\t\tvar me = this;\n\t\tvar tickOpts = me.options.ticks;\n\t\tvar reverse = tickOpts.reverse;\n\t\tvar log10 = helpers$1.log10;\n\t\tvar firstTickValue = me._getFirstTickValue(me.minNotZero);\n\t\tvar innerDimension, start, end, value;\n\n\t\tif (reverse) {\n\t\t\tstart = me.end;\n\t\t\tend = me.start;\n\t\t} else {\n\t\t\tstart = me.start;\n\t\t\tend = me.end;\n\t\t}\n\t\tif (me.isHorizontal()) {\n\t\t\tinnerDimension = me.width;\n\t\t\tvalue = reverse ? me.right - pixel : pixel - me.left;\n\t\t} else {\n\t\t\tinnerDimension = me.height;\n\t\t\tvalue = reverse ? pixel - me.top : me.bottom - pixel;\n\t\t}\n\t\tif (value !== start) {\n\t\t\tif (start === 0) { // include zero tick\n\t\t\t\tvar offset = valueOrDefault$a(tickOpts.fontSize, core_defaults.global.defaultFontSize);\n\t\t\t\tvalue -= offset;\n\t\t\t\tinnerDimension -= offset;\n\t\t\t\tstart = firstTickValue;\n\t\t\t}\n\t\t\tvalue *= log10(end) - log10(start);\n\t\t\tvalue /= innerDimension;\n\t\t\tvalue = Math.pow(10, log10(start) + value);\n\t\t}\n\t\treturn value;\n\t}\n});\n\n// INTERNAL: static default options, registered in src/index.js\nvar _defaults$2 = defaultConfig$2;\nscale_logarithmic._defaults = _defaults$2;\n\nvar valueOrDefault$b = helpers$1.valueOrDefault;\nvar valueAtIndexOrDefault$1 = helpers$1.valueAtIndexOrDefault;\nvar resolve$7 = helpers$1.options.resolve;\n\nvar defaultConfig$3 = {\n\tdisplay: true,\n\n\t// Boolean - Whether to animate scaling the chart from the centre\n\tanimate: true,\n\tposition: 'chartArea',\n\n\tangleLines: {\n\t\tdisplay: true,\n\t\tcolor: 'rgba(0, 0, 0, 0.1)',\n\t\tlineWidth: 1,\n\t\tborderDash: [],\n\t\tborderDashOffset: 0.0\n\t},\n\n\tgridLines: {\n\t\tcircular: false\n\t},\n\n\t// label settings\n\tticks: {\n\t\t// Boolean - Show a backdrop to the scale label\n\t\tshowLabelBackdrop: true,\n\n\t\t// String - The colour of the label backdrop\n\t\tbackdropColor: 'rgba(255,255,255,0.75)',\n\n\t\t// Number - The backdrop padding above & below the label in pixels\n\t\tbackdropPaddingY: 2,\n\n\t\t// Number - The backdrop padding to the side of the label in pixels\n\t\tbackdropPaddingX: 2,\n\n\t\tcallback: core_ticks.formatters.linear\n\t},\n\n\tpointLabels: {\n\t\t// Boolean - if true, show point labels\n\t\tdisplay: true,\n\n\t\t// Number - Point label font size in pixels\n\t\tfontSize: 10,\n\n\t\t// Function - Used to convert point labels\n\t\tcallback: function(label) {\n\t\t\treturn label;\n\t\t}\n\t}\n};\n\nfunction getValueCount(scale) {\n\tvar opts = scale.options;\n\treturn opts.angleLines.display || opts.pointLabels.display ? scale.chart.data.labels.length : 0;\n}\n\nfunction getTickBackdropHeight(opts) {\n\tvar tickOpts = opts.ticks;\n\n\tif (tickOpts.display && opts.display) {\n\t\treturn valueOrDefault$b(tickOpts.fontSize, core_defaults.global.defaultFontSize) + tickOpts.backdropPaddingY * 2;\n\t}\n\treturn 0;\n}\n\nfunction measureLabelSize(ctx, lineHeight, label) {\n\tif (helpers$1.isArray(label)) {\n\t\treturn {\n\t\t\tw: helpers$1.longestText(ctx, ctx.font, label),\n\t\t\th: label.length * lineHeight\n\t\t};\n\t}\n\n\treturn {\n\t\tw: ctx.measureText(label).width,\n\t\th: lineHeight\n\t};\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n\tif (angle === min || angle === max) {\n\t\treturn {\n\t\t\tstart: pos - (size / 2),\n\t\t\tend: pos + (size / 2)\n\t\t};\n\t} else if (angle < min || angle > max) {\n\t\treturn {\n\t\t\tstart: pos - size,\n\t\t\tend: pos\n\t\t};\n\t}\n\n\treturn {\n\t\tstart: pos,\n\t\tend: pos + size\n\t};\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n\t// Right, this is really confusing and there is a lot of maths going on here\n\t// The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n\t//\n\t// Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n\t//\n\t// Solution:\n\t//\n\t// We assume the radius of the polygon is half the size of the canvas at first\n\t// at each index we check if the text overlaps.\n\t//\n\t// Where it does, we store that angle and that index.\n\t//\n\t// After finding the largest index and angle we calculate how much we need to remove\n\t// from the shape radius to move the point inwards by that x.\n\t//\n\t// We average the left and right distances to get the maximum shape radius that can fit in the box\n\t// along with labels.\n\t//\n\t// Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n\t// on each side, removing that from the size, halving it and adding the left x protrusion width.\n\t//\n\t// This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n\t// and position it in the most space efficient manner\n\t//\n\t// https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n\tvar plFont = helpers$1.options._parseFont(scale.options.pointLabels);\n\n\t// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n\t// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n\tvar furthestLimits = {\n\t\tl: 0,\n\t\tr: scale.width,\n\t\tt: 0,\n\t\tb: scale.height - scale.paddingTop\n\t};\n\tvar furthestAngles = {};\n\tvar i, textSize, pointPosition;\n\n\tscale.ctx.font = plFont.string;\n\tscale._pointLabelSizes = [];\n\n\tvar valueCount = getValueCount(scale);\n\tfor (i = 0; i < valueCount; i++) {\n\t\tpointPosition = scale.getPointPosition(i, scale.drawingArea + 5);\n\t\ttextSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale.pointLabels[i] || '');\n\t\tscale._pointLabelSizes[i] = textSize;\n\n\t\t// Add quarter circle to make degree 0 mean top of circle\n\t\tvar angleRadians = scale.getIndexAngle(i);\n\t\tvar angle = helpers$1.toDegrees(angleRadians) % 360;\n\t\tvar hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n\t\tvar vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n\n\t\tif (hLimits.start < furthestLimits.l) {\n\t\t\tfurthestLimits.l = hLimits.start;\n\t\t\tfurthestAngles.l = angleRadians;\n\t\t}\n\n\t\tif (hLimits.end > furthestLimits.r) {\n\t\t\tfurthestLimits.r = hLimits.end;\n\t\t\tfurthestAngles.r = angleRadians;\n\t\t}\n\n\t\tif (vLimits.start < furthestLimits.t) {\n\t\t\tfurthestLimits.t = vLimits.start;\n\t\t\tfurthestAngles.t = angleRadians;\n\t\t}\n\n\t\tif (vLimits.end > furthestLimits.b) {\n\t\t\tfurthestLimits.b = vLimits.end;\n\t\t\tfurthestAngles.b = angleRadians;\n\t\t}\n\t}\n\n\tscale.setReductions(scale.drawingArea, furthestLimits, furthestAngles);\n}\n\nfunction getTextAlignForAngle(angle) {\n\tif (angle === 0 || angle === 180) {\n\t\treturn 'center';\n\t} else if (angle < 180) {\n\t\treturn 'left';\n\t}\n\n\treturn 'right';\n}\n\nfunction fillText(ctx, text, position, lineHeight) {\n\tvar y = position.y + lineHeight / 2;\n\tvar i, ilen;\n\n\tif (helpers$1.isArray(text)) {\n\t\tfor (i = 0, ilen = text.length; i < ilen; ++i) {\n\t\t\tctx.fillText(text[i], position.x, y);\n\t\t\ty += lineHeight;\n\t\t}\n\t} else {\n\t\tctx.fillText(text, position.x, y);\n\t}\n}\n\nfunction adjustPointPositionForLabelHeight(angle, textSize, position) {\n\tif (angle === 90 || angle === 270) {\n\t\tposition.y -= (textSize.h / 2);\n\t} else if (angle > 270 || angle < 90) {\n\t\tposition.y -= textSize.h;\n\t}\n}\n\nfunction drawPointLabels(scale) {\n\tvar ctx = scale.ctx;\n\tvar opts = scale.options;\n\tvar angleLineOpts = opts.angleLines;\n\tvar gridLineOpts = opts.gridLines;\n\tvar pointLabelOpts = opts.pointLabels;\n\tvar lineWidth = valueOrDefault$b(angleLineOpts.lineWidth, gridLineOpts.lineWidth);\n\tvar lineColor = valueOrDefault$b(angleLineOpts.color, gridLineOpts.color);\n\tvar tickBackdropHeight = getTickBackdropHeight(opts);\n\n\tctx.save();\n\tctx.lineWidth = lineWidth;\n\tctx.strokeStyle = lineColor;\n\tif (ctx.setLineDash) {\n\t\tctx.setLineDash(resolve$7([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));\n\t\tctx.lineDashOffset = resolve$7([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0.0]);\n\t}\n\n\tvar outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);\n\n\t// Point Label Font\n\tvar plFont = helpers$1.options._parseFont(pointLabelOpts);\n\n\tctx.font = plFont.string;\n\tctx.textBaseline = 'middle';\n\n\tfor (var i = getValueCount(scale) - 1; i >= 0; i--) {\n\t\tif (angleLineOpts.display && lineWidth && lineColor) {\n\t\t\tvar outerPosition = scale.getPointPosition(i, outerDistance);\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(scale.xCenter, scale.yCenter);\n\t\t\tctx.lineTo(outerPosition.x, outerPosition.y);\n\t\t\tctx.stroke();\n\t\t}\n\n\t\tif (pointLabelOpts.display) {\n\t\t\t// Extra pixels out for some label spacing\n\t\t\tvar extra = (i === 0 ? tickBackdropHeight / 2 : 0);\n\t\t\tvar pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + 5);\n\n\t\t\t// Keep this in loop since we may support array properties here\n\t\t\tvar pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i, core_defaults.global.defaultFontColor);\n\t\t\tctx.fillStyle = pointLabelFontColor;\n\n\t\t\tvar angleRadians = scale.getIndexAngle(i);\n\t\t\tvar angle = helpers$1.toDegrees(angleRadians);\n\t\t\tctx.textAlign = getTextAlignForAngle(angle);\n\t\t\tadjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);\n\t\t\tfillText(ctx, scale.pointLabels[i] || '', pointLabelPosition, plFont.lineHeight);\n\t\t}\n\t}\n\tctx.restore();\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, index) {\n\tvar ctx = scale.ctx;\n\tvar circular = gridLineOpts.circular;\n\tvar valueCount = getValueCount(scale);\n\tvar lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1);\n\tvar lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1);\n\tvar pointPosition;\n\n\tif ((!circular && !valueCount) || !lineColor || !lineWidth) {\n\t\treturn;\n\t}\n\n\tctx.save();\n\tctx.strokeStyle = lineColor;\n\tctx.lineWidth = lineWidth;\n\tif (ctx.setLineDash) {\n\t\tctx.setLineDash(gridLineOpts.borderDash || []);\n\t\tctx.lineDashOffset = gridLineOpts.borderDashOffset || 0.0;\n\t}\n\n\tctx.beginPath();\n\tif (circular) {\n\t\t// Draw circular arcs between the points\n\t\tctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);\n\t} else {\n\t\t// Draw straight lines connecting each index\n\t\tpointPosition = scale.getPointPosition(0, radius);\n\t\tctx.moveTo(pointPosition.x, pointPosition.y);\n\n\t\tfor (var i = 1; i < valueCount; i++) {\n\t\t\tpointPosition = scale.getPointPosition(i, radius);\n\t\t\tctx.lineTo(pointPosition.x, pointPosition.y);\n\t\t}\n\t}\n\tctx.closePath();\n\tctx.stroke();\n\tctx.restore();\n}\n\nfunction numberOrZero(param) {\n\treturn helpers$1.isNumber(param) ? param : 0;\n}\n\nvar scale_radialLinear = scale_linearbase.extend({\n\tsetDimensions: function() {\n\t\tvar me = this;\n\n\t\t// Set the unconstrained dimension before label rotation\n\t\tme.width = me.maxWidth;\n\t\tme.height = me.maxHeight;\n\t\tme.paddingTop = getTickBackdropHeight(me.options) / 2;\n\t\tme.xCenter = Math.floor(me.width / 2);\n\t\tme.yCenter = Math.floor((me.height - me.paddingTop) / 2);\n\t\tme.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;\n\t},\n\n\tdetermineDataLimits: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar min = Number.POSITIVE_INFINITY;\n\t\tvar max = Number.NEGATIVE_INFINITY;\n\n\t\thelpers$1.each(chart.data.datasets, function(dataset, datasetIndex) {\n\t\t\tif (chart.isDatasetVisible(datasetIndex)) {\n\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\n\t\t\t\thelpers$1.each(dataset.data, function(rawValue, index) {\n\t\t\t\t\tvar value = +me.getRightValue(rawValue);\n\t\t\t\t\tif (isNaN(value) || meta.data[index].hidden) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tmin = Math.min(value, min);\n\t\t\t\t\tmax = Math.max(value, max);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tme.min = (min === Number.POSITIVE_INFINITY ? 0 : min);\n\t\tme.max = (max === Number.NEGATIVE_INFINITY ? 0 : max);\n\n\t\t// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\n\t\tme.handleTickRangeOptions();\n\t},\n\n\t// Returns the maximum number of ticks based on the scale dimension\n\t_computeTickLimit: function() {\n\t\treturn Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n\t},\n\n\tconvertTicksToLabels: function() {\n\t\tvar me = this;\n\n\t\tscale_linearbase.prototype.convertTicksToLabels.call(me);\n\n\t\t// Point labels\n\t\tme.pointLabels = me.chart.data.labels.map(me.options.pointLabels.callback, me);\n\t},\n\n\tgetLabelForIndex: function(index, datasetIndex) {\n\t\treturn +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n\t},\n\n\tfit: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\n\t\tif (opts.display && opts.pointLabels.display) {\n\t\t\tfitWithPointLabels(me);\n\t\t} else {\n\t\t\tme.setCenterPoint(0, 0, 0, 0);\n\t\t}\n\t},\n\n\t/**\n\t * Set radius reductions and determine new radius and center point\n\t * @private\n\t */\n\tsetReductions: function(largestPossibleRadius, furthestLimits, furthestAngles) {\n\t\tvar me = this;\n\t\tvar radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);\n\t\tvar radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);\n\t\tvar radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);\n\t\tvar radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);\n\n\t\tradiusReductionLeft = numberOrZero(radiusReductionLeft);\n\t\tradiusReductionRight = numberOrZero(radiusReductionRight);\n\t\tradiusReductionTop = numberOrZero(radiusReductionTop);\n\t\tradiusReductionBottom = numberOrZero(radiusReductionBottom);\n\n\t\tme.drawingArea = Math.min(\n\t\t\tMath.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),\n\t\t\tMath.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));\n\t\tme.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);\n\t},\n\n\tsetCenterPoint: function(leftMovement, rightMovement, topMovement, bottomMovement) {\n\t\tvar me = this;\n\t\tvar maxRight = me.width - rightMovement - me.drawingArea;\n\t\tvar maxLeft = leftMovement + me.drawingArea;\n\t\tvar maxTop = topMovement + me.drawingArea;\n\t\tvar maxBottom = (me.height - me.paddingTop) - bottomMovement - me.drawingArea;\n\n\t\tme.xCenter = Math.floor(((maxLeft + maxRight) / 2) + me.left);\n\t\tme.yCenter = Math.floor(((maxTop + maxBottom) / 2) + me.top + me.paddingTop);\n\t},\n\n\tgetIndexAngle: function(index) {\n\t\tvar angleMultiplier = (Math.PI * 2) / getValueCount(this);\n\t\tvar startAngle = this.chart.options && this.chart.options.startAngle ?\n\t\t\tthis.chart.options.startAngle :\n\t\t\t0;\n\n\t\tvar startAngleRadians = startAngle * Math.PI * 2 / 360;\n\n\t\t// Start from the top instead of right, so remove a quarter of the circle\n\t\treturn index * angleMultiplier + startAngleRadians;\n\t},\n\n\tgetDistanceFromCenterForValue: function(value) {\n\t\tvar me = this;\n\n\t\tif (value === null) {\n\t\t\treturn 0; // null always in center\n\t\t}\n\n\t\t// Take into account half font size + the yPadding of the top value\n\t\tvar scalingFactor = me.drawingArea / (me.max - me.min);\n\t\tif (me.options.ticks.reverse) {\n\t\t\treturn (me.max - value) * scalingFactor;\n\t\t}\n\t\treturn (value - me.min) * scalingFactor;\n\t},\n\n\tgetPointPosition: function(index, distanceFromCenter) {\n\t\tvar me = this;\n\t\tvar thisAngle = me.getIndexAngle(index) - (Math.PI / 2);\n\t\treturn {\n\t\t\tx: Math.cos(thisAngle) * distanceFromCenter + me.xCenter,\n\t\t\ty: Math.sin(thisAngle) * distanceFromCenter + me.yCenter\n\t\t};\n\t},\n\n\tgetPointPositionForValue: function(index, value) {\n\t\treturn this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n\t},\n\n\tgetBasePosition: function() {\n\t\tvar me = this;\n\t\tvar min = me.min;\n\t\tvar max = me.max;\n\n\t\treturn me.getPointPositionForValue(0,\n\t\t\tme.beginAtZero ? 0 :\n\t\t\tmin < 0 && max < 0 ? max :\n\t\t\tmin > 0 && max > 0 ? min :\n\t\t\t0);\n\t},\n\n\tdraw: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar gridLineOpts = opts.gridLines;\n\t\tvar tickOpts = opts.ticks;\n\n\t\tif (opts.display) {\n\t\t\tvar ctx = me.ctx;\n\t\t\tvar startAngle = this.getIndexAngle(0);\n\t\t\tvar tickFont = helpers$1.options._parseFont(tickOpts);\n\n\t\t\tif (opts.angleLines.display || opts.pointLabels.display) {\n\t\t\t\tdrawPointLabels(me);\n\t\t\t}\n\n\t\t\thelpers$1.each(me.ticks, function(label, index) {\n\t\t\t\t// Don't draw a centre value (if it is minimum)\n\t\t\t\tif (index > 0 || tickOpts.reverse) {\n\t\t\t\t\tvar yCenterOffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);\n\n\t\t\t\t\t// Draw circular lines around the scale\n\t\t\t\t\tif (gridLineOpts.display && index !== 0) {\n\t\t\t\t\t\tdrawRadiusLine(me, gridLineOpts, yCenterOffset, index);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tickOpts.display) {\n\t\t\t\t\t\tvar tickFontColor = valueOrDefault$b(tickOpts.fontColor, core_defaults.global.defaultFontColor);\n\t\t\t\t\t\tctx.font = tickFont.string;\n\n\t\t\t\t\t\tctx.save();\n\t\t\t\t\t\tctx.translate(me.xCenter, me.yCenter);\n\t\t\t\t\t\tctx.rotate(startAngle);\n\n\t\t\t\t\t\tif (tickOpts.showLabelBackdrop) {\n\t\t\t\t\t\t\tvar labelWidth = ctx.measureText(label).width;\n\t\t\t\t\t\t\tctx.fillStyle = tickOpts.backdropColor;\n\t\t\t\t\t\t\tctx.fillRect(\n\t\t\t\t\t\t\t\t-labelWidth / 2 - tickOpts.backdropPaddingX,\n\t\t\t\t\t\t\t\t-yCenterOffset - tickFont.size / 2 - tickOpts.backdropPaddingY,\n\t\t\t\t\t\t\t\tlabelWidth + tickOpts.backdropPaddingX * 2,\n\t\t\t\t\t\t\t\ttickFont.size + tickOpts.backdropPaddingY * 2\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\t\tctx.textBaseline = 'middle';\n\t\t\t\t\t\tctx.fillStyle = tickFontColor;\n\t\t\t\t\t\tctx.fillText(label, 0, -yCenterOffset);\n\t\t\t\t\t\tctx.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n});\n\n// INTERNAL: static default options, registered in src/index.js\nvar _defaults$3 = defaultConfig$3;\nscale_radialLinear._defaults = _defaults$3;\n\nvar valueOrDefault$c = helpers$1.valueOrDefault;\n\n// Integer constants are from the ES6 spec.\nvar MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;\nvar MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\n\nvar INTERVALS = {\n\tmillisecond: {\n\t\tcommon: true,\n\t\tsize: 1,\n\t\tsteps: [1, 2, 5, 10, 20, 50, 100, 250, 500]\n\t},\n\tsecond: {\n\t\tcommon: true,\n\t\tsize: 1000,\n\t\tsteps: [1, 2, 5, 10, 15, 30]\n\t},\n\tminute: {\n\t\tcommon: true,\n\t\tsize: 60000,\n\t\tsteps: [1, 2, 5, 10, 15, 30]\n\t},\n\thour: {\n\t\tcommon: true,\n\t\tsize: 3600000,\n\t\tsteps: [1, 2, 3, 6, 12]\n\t},\n\tday: {\n\t\tcommon: true,\n\t\tsize: 86400000,\n\t\tsteps: [1, 2, 5]\n\t},\n\tweek: {\n\t\tcommon: false,\n\t\tsize: 604800000,\n\t\tsteps: [1, 2, 3, 4]\n\t},\n\tmonth: {\n\t\tcommon: true,\n\t\tsize: 2.628e9,\n\t\tsteps: [1, 2, 3]\n\t},\n\tquarter: {\n\t\tcommon: false,\n\t\tsize: 7.884e9,\n\t\tsteps: [1, 2, 3, 4]\n\t},\n\tyear: {\n\t\tcommon: true,\n\t\tsize: 3.154e10\n\t}\n};\n\nvar UNITS = Object.keys(INTERVALS);\n\nfunction sorter(a, b) {\n\treturn a - b;\n}\n\nfunction arrayUnique(items) {\n\tvar hash = {};\n\tvar out = [];\n\tvar i, ilen, item;\n\n\tfor (i = 0, ilen = items.length; i < ilen; ++i) {\n\t\titem = items[i];\n\t\tif (!hash[item]) {\n\t\t\thash[item] = true;\n\t\t\tout.push(item);\n\t\t}\n\t}\n\n\treturn out;\n}\n\n/**\n * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n * extremity (left + width or top + height). Note that it would be more optimized to directly\n * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n *\n * @param {number[]} timestamps - timestamps sorted from lowest to highest.\n * @param {string} distribution - If 'linear', timestamps will be spread linearly along the min\n * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.\n * If 'series', timestamps will be positioned at the same distance from each other. In this\n * case, only timestamps that break the time linearity are registered, meaning that in the\n * best case, all timestamps are linear, the table contains only min and max.\n */\nfunction buildLookupTable(timestamps, min, max, distribution) {\n\tif (distribution === 'linear' || !timestamps.length) {\n\t\treturn [\n\t\t\t{time: min, pos: 0},\n\t\t\t{time: max, pos: 1}\n\t\t];\n\t}\n\n\tvar table = [];\n\tvar items = [min];\n\tvar i, ilen, prev, curr, next;\n\n\tfor (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n\t\tcurr = timestamps[i];\n\t\tif (curr > min && curr < max) {\n\t\t\titems.push(curr);\n\t\t}\n\t}\n\n\titems.push(max);\n\n\tfor (i = 0, ilen = items.length; i < ilen; ++i) {\n\t\tnext = items[i + 1];\n\t\tprev = items[i - 1];\n\t\tcurr = items[i];\n\n\t\t// only add points that breaks the scale linearity\n\t\tif (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {\n\t\t\ttable.push({time: curr, pos: i / (ilen - 1)});\n\t\t}\n\t}\n\n\treturn table;\n}\n\n// @see adapted from https://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/\nfunction lookup(table, key, value) {\n\tvar lo = 0;\n\tvar hi = table.length - 1;\n\tvar mid, i0, i1;\n\n\twhile (lo >= 0 && lo <= hi) {\n\t\tmid = (lo + hi) >> 1;\n\t\ti0 = table[mid - 1] || null;\n\t\ti1 = table[mid];\n\n\t\tif (!i0) {\n\t\t\t// given value is outside table (before first item)\n\t\t\treturn {lo: null, hi: i1};\n\t\t} else if (i1[key] < value) {\n\t\t\tlo = mid + 1;\n\t\t} else if (i0[key] > value) {\n\t\t\thi = mid - 1;\n\t\t} else {\n\t\t\treturn {lo: i0, hi: i1};\n\t\t}\n\t}\n\n\t// given value is outside table (after last item)\n\treturn {lo: i1, hi: null};\n}\n\n/**\n * Linearly interpolates the given source `value` using the table items `skey` values and\n * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')\n * returns the position for a timestamp equal to 42. If value is out of bounds, values at\n * index [0, 1] or [n - 1, n] are used for the interpolation.\n */\nfunction interpolate$1(table, skey, sval, tkey) {\n\tvar range = lookup(table, skey, sval);\n\n\t// Note: the lookup table ALWAYS contains at least 2 items (min and max)\n\tvar prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;\n\tvar next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;\n\n\tvar span = next[skey] - prev[skey];\n\tvar ratio = span ? (sval - prev[skey]) / span : 0;\n\tvar offset = (next[tkey] - prev[tkey]) * ratio;\n\n\treturn prev[tkey] + offset;\n}\n\nfunction toTimestamp(scale, input) {\n\tvar adapter = scale._adapter;\n\tvar options = scale.options.time;\n\tvar parser = options.parser;\n\tvar format = parser || options.format;\n\tvar value = input;\n\n\tif (typeof parser === 'function') {\n\t\tvalue = parser(value);\n\t}\n\n\t// Only parse if its not a timestamp already\n\tif (!helpers$1.isFinite(value)) {\n\t\tvalue = typeof format === 'string'\n\t\t\t? adapter.parse(value, format)\n\t\t\t: adapter.parse(value);\n\t}\n\n\tif (value !== null) {\n\t\treturn +value;\n\t}\n\n\t// Labels are in an incompatible format and no `parser` has been provided.\n\t// The user might still use the deprecated `format` option for parsing.\n\tif (!parser && typeof format === 'function') {\n\t\tvalue = format(input);\n\n\t\t// `format` could return something else than a timestamp, if so, parse it\n\t\tif (!helpers$1.isFinite(value)) {\n\t\t\tvalue = adapter.parse(value);\n\t\t}\n\t}\n\n\treturn value;\n}\n\nfunction parse(scale, input) {\n\tif (helpers$1.isNullOrUndef(input)) {\n\t\treturn null;\n\t}\n\n\tvar options = scale.options.time;\n\tvar value = toTimestamp(scale, scale.getRightValue(input));\n\tif (value === null) {\n\t\treturn value;\n\t}\n\n\tif (options.round) {\n\t\tvalue = +scale._adapter.startOf(value, options.round);\n\t}\n\n\treturn value;\n}\n\n/**\n * Returns the number of unit to skip to be able to display up to `capacity` number of ticks\n * in `unit` for the given `min` / `max` range and respecting the interval steps constraints.\n */\nfunction determineStepSize(min, max, unit, capacity) {\n\tvar range = max - min;\n\tvar interval = INTERVALS[unit];\n\tvar milliseconds = interval.size;\n\tvar steps = interval.steps;\n\tvar i, ilen, factor;\n\n\tif (!steps) {\n\t\treturn Math.ceil(range / (capacity * milliseconds));\n\t}\n\n\tfor (i = 0, ilen = steps.length; i < ilen; ++i) {\n\t\tfactor = steps[i];\n\t\tif (Math.ceil(range / (milliseconds * factor)) <= capacity) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn factor;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n\tvar ilen = UNITS.length;\n\tvar i, interval, factor;\n\n\tfor (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n\t\tinterval = INTERVALS[UNITS[i]];\n\t\tfactor = interval.steps ? interval.steps[interval.steps.length - 1] : MAX_INTEGER;\n\n\t\tif (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n\t\t\treturn UNITS[i];\n\t\t}\n\t}\n\n\treturn UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n */\nfunction determineUnitForFormatting(scale, ticks, minUnit, min, max) {\n\tvar ilen = UNITS.length;\n\tvar i, unit;\n\n\tfor (i = ilen - 1; i >= UNITS.indexOf(minUnit); i--) {\n\t\tunit = UNITS[i];\n\t\tif (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= ticks.length) {\n\t\t\treturn unit;\n\t\t}\n\t}\n\n\treturn UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\nfunction determineMajorUnit(unit) {\n\tfor (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n\t\tif (INTERVALS[UNITS[i]].common) {\n\t\t\treturn UNITS[i];\n\t\t}\n\t}\n}\n\n/**\n * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n * `minor` unit, aligned on the `major` unit and using the given scale time `options`.\n * Important: this method can return ticks outside the min and max range, it's the\n * responsibility of the calling code to clamp values if needed.\n */\nfunction generate(scale, min, max, capacity) {\n\tvar adapter = scale._adapter;\n\tvar options = scale.options;\n\tvar timeOpts = options.time;\n\tvar minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);\n\tvar major = determineMajorUnit(minor);\n\tvar stepSize = valueOrDefault$c(timeOpts.stepSize, timeOpts.unitStepSize);\n\tvar weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n\tvar majorTicksEnabled = options.ticks.major.enabled;\n\tvar interval = INTERVALS[minor];\n\tvar first = min;\n\tvar last = max;\n\tvar ticks = [];\n\tvar time;\n\n\tif (!stepSize) {\n\t\tstepSize = determineStepSize(min, max, minor, capacity);\n\t}\n\n\t// For 'week' unit, handle the first day of week option\n\tif (weekday) {\n\t\tfirst = +adapter.startOf(first, 'isoWeek', weekday);\n\t\tlast = +adapter.startOf(last, 'isoWeek', weekday);\n\t}\n\n\t// Align first/last ticks on unit\n\tfirst = +adapter.startOf(first, weekday ? 'day' : minor);\n\tlast = +adapter.startOf(last, weekday ? 'day' : minor);\n\n\t// Make sure that the last tick include max\n\tif (last < max) {\n\t\tlast = +adapter.add(last, 1, minor);\n\t}\n\n\ttime = first;\n\n\tif (majorTicksEnabled && major && !weekday && !timeOpts.round) {\n\t\t// Align the first tick on the previous `minor` unit aligned on the `major` unit:\n\t\t// we first aligned time on the previous `major` unit then add the number of full\n\t\t// stepSize there is between first and the previous major time.\n\t\ttime = +adapter.startOf(time, major);\n\t\ttime = +adapter.add(time, ~~((first - time) / (interval.size * stepSize)) * stepSize, minor);\n\t}\n\n\tfor (; time < last; time = +adapter.add(time, stepSize, minor)) {\n\t\tticks.push(+time);\n\t}\n\n\tticks.push(+time);\n\n\treturn ticks;\n}\n\n/**\n * Returns the start and end offsets from edges in the form of {start, end}\n * where each value is a relative width to the scale and ranges between 0 and 1.\n * They add extra margins on the both sides by scaling down the original scale.\n * Offsets are added when the `offset` option is true.\n */\nfunction computeOffsets(table, ticks, min, max, options) {\n\tvar start = 0;\n\tvar end = 0;\n\tvar first, last;\n\n\tif (options.offset && ticks.length) {\n\t\tif (!options.time.min) {\n\t\t\tfirst = interpolate$1(table, 'time', ticks[0], 'pos');\n\t\t\tif (ticks.length === 1) {\n\t\t\t\tstart = 1 - first;\n\t\t\t} else {\n\t\t\t\tstart = (interpolate$1(table, 'time', ticks[1], 'pos') - first) / 2;\n\t\t\t}\n\t\t}\n\t\tif (!options.time.max) {\n\t\t\tlast = interpolate$1(table, 'time', ticks[ticks.length - 1], 'pos');\n\t\t\tif (ticks.length === 1) {\n\t\t\t\tend = last;\n\t\t\t} else {\n\t\t\t\tend = (last - interpolate$1(table, 'time', ticks[ticks.length - 2], 'pos')) / 2;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {start: start, end: end};\n}\n\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n\tvar ticks = [];\n\tvar i, ilen, value, major;\n\n\tfor (i = 0, ilen = values.length; i < ilen; ++i) {\n\t\tvalue = values[i];\n\t\tmajor = majorUnit ? value === +scale._adapter.startOf(value, majorUnit) : false;\n\n\t\tticks.push({\n\t\t\tvalue: value,\n\t\t\tmajor: major\n\t\t});\n\t}\n\n\treturn ticks;\n}\n\nvar defaultConfig$4 = {\n\tposition: 'bottom',\n\n\t/**\n\t * Data distribution along the scale:\n\t * - 'linear': data are spread according to their time (distances can vary),\n\t * - 'series': data are spread at the same distance from each other.\n\t * @see https://github.com/chartjs/Chart.js/pull/4507\n\t * @since 2.7.0\n\t */\n\tdistribution: 'linear',\n\n\t/**\n\t * Scale boundary strategy (bypassed by min/max time options)\n\t * - `data`: make sure data are fully visible, ticks outside are removed\n\t * - `ticks`: make sure ticks are fully visible, data outside are truncated\n\t * @see https://github.com/chartjs/Chart.js/pull/4556\n\t * @since 2.7.0\n\t */\n\tbounds: 'data',\n\n\tadapters: {},\n\ttime: {\n\t\tparser: false, // false == a pattern string from https://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment\n\t\tformat: false, // DEPRECATED false == date objects, moment object, callback or a pattern string from https://momentjs.com/docs/#/parsing/string-format/\n\t\tunit: false, // false == automatic or override with week, month, year, etc.\n\t\tround: false, // none, or override with week, month, year, etc.\n\t\tdisplayFormat: false, // DEPRECATED\n\t\tisoWeekday: false, // override week start day - see https://momentjs.com/docs/#/get-set/iso-weekday/\n\t\tminUnit: 'millisecond',\n\t\tdisplayFormats: {}\n\t},\n\tticks: {\n\t\tautoSkip: false,\n\n\t\t/**\n\t\t * Ticks generation input values:\n\t\t * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n\t\t * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n\t\t * - 'labels': generates ticks from user given `data.labels` values ONLY.\n\t\t * @see https://github.com/chartjs/Chart.js/pull/4507\n\t\t * @since 2.7.0\n\t\t */\n\t\tsource: 'auto',\n\n\t\tmajor: {\n\t\t\tenabled: false\n\t\t}\n\t}\n};\n\nvar scale_time = core_scale.extend({\n\tinitialize: function() {\n\t\tthis.mergeTicksOptions();\n\t\tcore_scale.prototype.initialize.call(this);\n\t},\n\n\tupdate: function() {\n\t\tvar me = this;\n\t\tvar options = me.options;\n\t\tvar time = options.time || (options.time = {});\n\t\tvar adapter = me._adapter = new core_adapters._date(options.adapters.date);\n\n\t\t// DEPRECATIONS: output a message only one time per update\n\t\tif (time.format) {\n\t\t\tconsole.warn('options.time.format is deprecated and replaced by options.time.parser.');\n\t\t}\n\n\t\t// Backward compatibility: before introducing adapter, `displayFormats` was\n\t\t// supposed to contain *all* unit/string pairs but this can't be resolved\n\t\t// when loading the scale (adapters are loaded afterward), so let's populate\n\t\t// missing formats on update\n\t\thelpers$1.mergeIf(time.displayFormats, adapter.formats());\n\n\t\treturn core_scale.prototype.update.apply(me, arguments);\n\t},\n\n\t/**\n\t * Allows data to be referenced via 't' attribute\n\t */\n\tgetRightValue: function(rawValue) {\n\t\tif (rawValue && rawValue.t !== undefined) {\n\t\t\trawValue = rawValue.t;\n\t\t}\n\t\treturn core_scale.prototype.getRightValue.call(this, rawValue);\n\t},\n\n\tdetermineDataLimits: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar adapter = me._adapter;\n\t\tvar timeOpts = me.options.time;\n\t\tvar unit = timeOpts.unit || 'day';\n\t\tvar min = MAX_INTEGER;\n\t\tvar max = MIN_INTEGER;\n\t\tvar timestamps = [];\n\t\tvar datasets = [];\n\t\tvar labels = [];\n\t\tvar i, j, ilen, jlen, data, timestamp;\n\t\tvar dataLabels = chart.data.labels || [];\n\n\t\t// Convert labels to timestamps\n\t\tfor (i = 0, ilen = dataLabels.length; i < ilen; ++i) {\n\t\t\tlabels.push(parse(me, dataLabels[i]));\n\t\t}\n\n\t\t// Convert data to timestamps\n\t\tfor (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n\t\t\tif (chart.isDatasetVisible(i)) {\n\t\t\t\tdata = chart.data.datasets[i].data;\n\n\t\t\t\t// Let's consider that all data have the same format.\n\t\t\t\tif (helpers$1.isObject(data[0])) {\n\t\t\t\t\tdatasets[i] = [];\n\n\t\t\t\t\tfor (j = 0, jlen = data.length; j < jlen; ++j) {\n\t\t\t\t\t\ttimestamp = parse(me, data[j]);\n\t\t\t\t\t\ttimestamps.push(timestamp);\n\t\t\t\t\t\tdatasets[i][j] = timestamp;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (j = 0, jlen = labels.length; j < jlen; ++j) {\n\t\t\t\t\t\ttimestamps.push(labels[j]);\n\t\t\t\t\t}\n\t\t\t\t\tdatasets[i] = labels.slice(0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdatasets[i] = [];\n\t\t\t}\n\t\t}\n\n\t\tif (labels.length) {\n\t\t\t// Sort labels **after** data have been converted\n\t\t\tlabels = arrayUnique(labels).sort(sorter);\n\t\t\tmin = Math.min(min, labels[0]);\n\t\t\tmax = Math.max(max, labels[labels.length - 1]);\n\t\t}\n\n\t\tif (timestamps.length) {\n\t\t\ttimestamps = arrayUnique(timestamps).sort(sorter);\n\t\t\tmin = Math.min(min, timestamps[0]);\n\t\t\tmax = Math.max(max, timestamps[timestamps.length - 1]);\n\t\t}\n\n\t\tmin = parse(me, timeOpts.min) || min;\n\t\tmax = parse(me, timeOpts.max) || max;\n\n\t\t// In case there is no valid min/max, set limits based on unit time option\n\t\tmin = min === MAX_INTEGER ? +adapter.startOf(Date.now(), unit) : min;\n\t\tmax = max === MIN_INTEGER ? +adapter.endOf(Date.now(), unit) + 1 : max;\n\n\t\t// Make sure that max is strictly higher than min (required by the lookup table)\n\t\tme.min = Math.min(min, max);\n\t\tme.max = Math.max(min + 1, max);\n\n\t\t// PRIVATE\n\t\tme._horizontal = me.isHorizontal();\n\t\tme._table = [];\n\t\tme._timestamps = {\n\t\t\tdata: timestamps,\n\t\t\tdatasets: datasets,\n\t\t\tlabels: labels\n\t\t};\n\t},\n\n\tbuildTicks: function() {\n\t\tvar me = this;\n\t\tvar min = me.min;\n\t\tvar max = me.max;\n\t\tvar options = me.options;\n\t\tvar timeOpts = options.time;\n\t\tvar timestamps = [];\n\t\tvar ticks = [];\n\t\tvar i, ilen, timestamp;\n\n\t\tswitch (options.ticks.source) {\n\t\tcase 'data':\n\t\t\ttimestamps = me._timestamps.data;\n\t\t\tbreak;\n\t\tcase 'labels':\n\t\t\ttimestamps = me._timestamps.labels;\n\t\t\tbreak;\n\t\tcase 'auto':\n\t\tdefault:\n\t\t\ttimestamps = generate(me, min, max, me.getLabelCapacity(min), options);\n\t\t}\n\n\t\tif (options.bounds === 'ticks' && timestamps.length) {\n\t\t\tmin = timestamps[0];\n\t\t\tmax = timestamps[timestamps.length - 1];\n\t\t}\n\n\t\t// Enforce limits with user min/max options\n\t\tmin = parse(me, timeOpts.min) || min;\n\t\tmax = parse(me, timeOpts.max) || max;\n\n\t\t// Remove ticks outside the min/max range\n\t\tfor (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n\t\t\ttimestamp = timestamps[i];\n\t\t\tif (timestamp >= min && timestamp <= max) {\n\t\t\t\tticks.push(timestamp);\n\t\t\t}\n\t\t}\n\n\t\tme.min = min;\n\t\tme.max = max;\n\n\t\t// PRIVATE\n\t\tme._unit = timeOpts.unit || determineUnitForFormatting(me, ticks, timeOpts.minUnit, me.min, me.max);\n\t\tme._majorUnit = determineMajorUnit(me._unit);\n\t\tme._table = buildLookupTable(me._timestamps.data, min, max, options.distribution);\n\t\tme._offsets = computeOffsets(me._table, ticks, min, max, options);\n\n\t\tif (options.ticks.reverse) {\n\t\t\tticks.reverse();\n\t\t}\n\n\t\treturn ticksFromTimestamps(me, ticks, me._majorUnit);\n\t},\n\n\tgetLabelForIndex: function(index, datasetIndex) {\n\t\tvar me = this;\n\t\tvar adapter = me._adapter;\n\t\tvar data = me.chart.data;\n\t\tvar timeOpts = me.options.time;\n\t\tvar label = data.labels && index < data.labels.length ? data.labels[index] : '';\n\t\tvar value = data.datasets[datasetIndex].data[index];\n\n\t\tif (helpers$1.isObject(value)) {\n\t\t\tlabel = me.getRightValue(value);\n\t\t}\n\t\tif (timeOpts.tooltipFormat) {\n\t\t\treturn adapter.format(toTimestamp(me, label), timeOpts.tooltipFormat);\n\t\t}\n\t\tif (typeof label === 'string') {\n\t\t\treturn label;\n\t\t}\n\t\treturn adapter.format(toTimestamp(me, label), timeOpts.displayFormats.datetime);\n\t},\n\n\t/**\n\t * Function to format an individual tick mark\n\t * @private\n\t */\n\ttickFormatFunction: function(time, index, ticks, format) {\n\t\tvar me = this;\n\t\tvar adapter = me._adapter;\n\t\tvar options = me.options;\n\t\tvar formats = options.time.displayFormats;\n\t\tvar minorFormat = formats[me._unit];\n\t\tvar majorUnit = me._majorUnit;\n\t\tvar majorFormat = formats[majorUnit];\n\t\tvar majorTime = +adapter.startOf(time, majorUnit);\n\t\tvar majorTickOpts = options.ticks.major;\n\t\tvar major = majorTickOpts.enabled && majorUnit && majorFormat && time === majorTime;\n\t\tvar label = adapter.format(time, format ? format : major ? majorFormat : minorFormat);\n\t\tvar tickOpts = major ? majorTickOpts : options.ticks.minor;\n\t\tvar formatter = valueOrDefault$c(tickOpts.callback, tickOpts.userCallback);\n\n\t\treturn formatter ? formatter(label, index, ticks) : label;\n\t},\n\n\tconvertTicksToLabels: function(ticks) {\n\t\tvar labels = [];\n\t\tvar i, ilen;\n\n\t\tfor (i = 0, ilen = ticks.length; i < ilen; ++i) {\n\t\t\tlabels.push(this.tickFormatFunction(ticks[i].value, i, ticks));\n\t\t}\n\n\t\treturn labels;\n\t},\n\n\t/**\n\t * @private\n\t */\n\tgetPixelForOffset: function(time) {\n\t\tvar me = this;\n\t\tvar isReverse = me.options.ticks.reverse;\n\t\tvar size = me._horizontal ? me.width : me.height;\n\t\tvar start = me._horizontal ? isReverse ? me.right : me.left : isReverse ? me.bottom : me.top;\n\t\tvar pos = interpolate$1(me._table, 'time', time, 'pos');\n\t\tvar offset = size * (me._offsets.start + pos) / (me._offsets.start + 1 + me._offsets.end);\n\n\t\treturn isReverse ? start - offset : start + offset;\n\t},\n\n\tgetPixelForValue: function(value, index, datasetIndex) {\n\t\tvar me = this;\n\t\tvar time = null;\n\n\t\tif (index !== undefined && datasetIndex !== undefined) {\n\t\t\ttime = me._timestamps.datasets[datasetIndex][index];\n\t\t}\n\n\t\tif (time === null) {\n\t\t\ttime = parse(me, value);\n\t\t}\n\n\t\tif (time !== null) {\n\t\t\treturn me.getPixelForOffset(time);\n\t\t}\n\t},\n\n\tgetPixelForTick: function(index) {\n\t\tvar ticks = this.getTicks();\n\t\treturn index >= 0 && index < ticks.length ?\n\t\t\tthis.getPixelForOffset(ticks[index].value) :\n\t\t\tnull;\n\t},\n\n\tgetValueForPixel: function(pixel) {\n\t\tvar me = this;\n\t\tvar size = me._horizontal ? me.width : me.height;\n\t\tvar start = me._horizontal ? me.left : me.top;\n\t\tvar pos = (size ? (pixel - start) / size : 0) * (me._offsets.start + 1 + me._offsets.start) - me._offsets.end;\n\t\tvar time = interpolate$1(me._table, 'pos', pos, 'time');\n\n\t\t// DEPRECATION, we should return time directly\n\t\treturn me._adapter._create(time);\n\t},\n\n\t/**\n\t * Crude approximation of what the label width might be\n\t * @private\n\t */\n\tgetLabelWidth: function(label) {\n\t\tvar me = this;\n\t\tvar ticksOpts = me.options.ticks;\n\t\tvar tickLabelWidth = me.ctx.measureText(label).width;\n\t\tvar angle = helpers$1.toRadians(ticksOpts.maxRotation);\n\t\tvar cosRotation = Math.cos(angle);\n\t\tvar sinRotation = Math.sin(angle);\n\t\tvar tickFontSize = valueOrDefault$c(ticksOpts.fontSize, core_defaults.global.defaultFontSize);\n\n\t\treturn (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tgetLabelCapacity: function(exampleTime) {\n\t\tvar me = this;\n\n\t\t// pick the longest format (milliseconds) for guestimation\n\t\tvar format = me.options.time.displayFormats.millisecond;\n\t\tvar exampleLabel = me.tickFormatFunction(exampleTime, 0, [], format);\n\t\tvar tickLabelWidth = me.getLabelWidth(exampleLabel);\n\t\tvar innerWidth = me.isHorizontal() ? me.width : me.height;\n\t\tvar capacity = Math.floor(innerWidth / tickLabelWidth);\n\n\t\treturn capacity > 0 ? capacity : 1;\n\t}\n});\n\n// INTERNAL: static default options, registered in src/index.js\nvar _defaults$4 = defaultConfig$4;\nscale_time._defaults = _defaults$4;\n\nvar scales = {\n\tcategory: scale_category,\n\tlinear: scale_linear,\n\tlogarithmic: scale_logarithmic,\n\tradialLinear: scale_radialLinear,\n\ttime: scale_time\n};\n\nvar FORMATS = {\n\tdatetime: 'MMM D, YYYY, h:mm:ss a',\n\tmillisecond: 'h:mm:ss.SSS a',\n\tsecond: 'h:mm:ss a',\n\tminute: 'h:mm a',\n\thour: 'hA',\n\tday: 'MMM D',\n\tweek: 'll',\n\tmonth: 'MMM YYYY',\n\tquarter: '[Q]Q - YYYY',\n\tyear: 'YYYY'\n};\n\ncore_adapters._date.override(typeof moment === 'function' ? {\n\t_id: 'moment', // DEBUG ONLY\n\n\tformats: function() {\n\t\treturn FORMATS;\n\t},\n\n\tparse: function(value, format) {\n\t\tif (typeof value === 'string' && typeof format === 'string') {\n\t\t\tvalue = moment(value, format);\n\t\t} else if (!(value instanceof moment)) {\n\t\t\tvalue = moment(value);\n\t\t}\n\t\treturn value.isValid() ? value.valueOf() : null;\n\t},\n\n\tformat: function(time, format) {\n\t\treturn moment(time).format(format);\n\t},\n\n\tadd: function(time, amount, unit) {\n\t\treturn moment(time).add(amount, unit).valueOf();\n\t},\n\n\tdiff: function(max, min, unit) {\n\t\treturn moment.duration(moment(max).diff(moment(min))).as(unit);\n\t},\n\n\tstartOf: function(time, unit, weekday) {\n\t\ttime = moment(time);\n\t\tif (unit === 'isoWeek') {\n\t\t\treturn time.isoWeekday(weekday).valueOf();\n\t\t}\n\t\treturn time.startOf(unit).valueOf();\n\t},\n\n\tendOf: function(time, unit) {\n\t\treturn moment(time).endOf(unit).valueOf();\n\t},\n\n\t// DEPRECATIONS\n\n\t/**\n\t * Provided for backward compatibility with scale.getValueForPixel().\n\t * @deprecated since version 2.8.0\n\t * @todo remove at version 3\n\t * @private\n\t */\n\t_create: function(time) {\n\t\treturn moment(time);\n\t},\n} : {});\n\ncore_defaults._set('global', {\n\tplugins: {\n\t\tfiller: {\n\t\t\tpropagate: true\n\t\t}\n\t}\n});\n\nvar mappers = {\n\tdataset: function(source) {\n\t\tvar index = source.fill;\n\t\tvar chart = source.chart;\n\t\tvar meta = chart.getDatasetMeta(index);\n\t\tvar visible = meta && chart.isDatasetVisible(index);\n\t\tvar points = (visible && meta.dataset._children) || [];\n\t\tvar length = points.length || 0;\n\n\t\treturn !length ? null : function(point, i) {\n\t\t\treturn (i < length && points[i]._view) || null;\n\t\t};\n\t},\n\n\tboundary: function(source) {\n\t\tvar boundary = source.boundary;\n\t\tvar x = boundary ? boundary.x : null;\n\t\tvar y = boundary ? boundary.y : null;\n\n\t\treturn function(point) {\n\t\t\treturn {\n\t\t\t\tx: x === null ? point.x : x,\n\t\t\t\ty: y === null ? point.y : y,\n\t\t\t};\n\t\t};\n\t}\n};\n\n// @todo if (fill[0] === '#')\nfunction decodeFill(el, index, count) {\n\tvar model = el._model || {};\n\tvar fill = model.fill;\n\tvar target;\n\n\tif (fill === undefined) {\n\t\tfill = !!model.backgroundColor;\n\t}\n\n\tif (fill === false || fill === null) {\n\t\treturn false;\n\t}\n\n\tif (fill === true) {\n\t\treturn 'origin';\n\t}\n\n\ttarget = parseFloat(fill, 10);\n\tif (isFinite(target) && Math.floor(target) === target) {\n\t\tif (fill[0] === '-' || fill[0] === '+') {\n\t\t\ttarget = index + target;\n\t\t}\n\n\t\tif (target === index || target < 0 || target >= count) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn target;\n\t}\n\n\tswitch (fill) {\n\t// compatibility\n\tcase 'bottom':\n\t\treturn 'start';\n\tcase 'top':\n\t\treturn 'end';\n\tcase 'zero':\n\t\treturn 'origin';\n\t// supported boundaries\n\tcase 'origin':\n\tcase 'start':\n\tcase 'end':\n\t\treturn fill;\n\t// invalid fill values\n\tdefault:\n\t\treturn false;\n\t}\n}\n\nfunction computeBoundary(source) {\n\tvar model = source.el._model || {};\n\tvar scale = source.el._scale || {};\n\tvar fill = source.fill;\n\tvar target = null;\n\tvar horizontal;\n\n\tif (isFinite(fill)) {\n\t\treturn null;\n\t}\n\n\t// Backward compatibility: until v3, we still need to support boundary values set on\n\t// the model (scaleTop, scaleBottom and scaleZero) because some external plugins and\n\t// controllers might still use it (e.g. the Smith chart).\n\n\tif (fill === 'start') {\n\t\ttarget = model.scaleBottom === undefined ? scale.bottom : model.scaleBottom;\n\t} else if (fill === 'end') {\n\t\ttarget = model.scaleTop === undefined ? scale.top : model.scaleTop;\n\t} else if (model.scaleZero !== undefined) {\n\t\ttarget = model.scaleZero;\n\t} else if (scale.getBasePosition) {\n\t\ttarget = scale.getBasePosition();\n\t} else if (scale.getBasePixel) {\n\t\ttarget = scale.getBasePixel();\n\t}\n\n\tif (target !== undefined && target !== null) {\n\t\tif (target.x !== undefined && target.y !== undefined) {\n\t\t\treturn target;\n\t\t}\n\n\t\tif (helpers$1.isFinite(target)) {\n\t\t\thorizontal = scale.isHorizontal();\n\t\t\treturn {\n\t\t\t\tx: horizontal ? target : null,\n\t\t\t\ty: horizontal ? null : target\n\t\t\t};\n\t\t}\n\t}\n\n\treturn null;\n}\n\nfunction resolveTarget(sources, index, propagate) {\n\tvar source = sources[index];\n\tvar fill = source.fill;\n\tvar visited = [index];\n\tvar target;\n\n\tif (!propagate) {\n\t\treturn fill;\n\t}\n\n\twhile (fill !== false && visited.indexOf(fill) === -1) {\n\t\tif (!isFinite(fill)) {\n\t\t\treturn fill;\n\t\t}\n\n\t\ttarget = sources[fill];\n\t\tif (!target) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (target.visible) {\n\t\t\treturn fill;\n\t\t}\n\n\t\tvisited.push(fill);\n\t\tfill = target.fill;\n\t}\n\n\treturn false;\n}\n\nfunction createMapper(source) {\n\tvar fill = source.fill;\n\tvar type = 'dataset';\n\n\tif (fill === false) {\n\t\treturn null;\n\t}\n\n\tif (!isFinite(fill)) {\n\t\ttype = 'boundary';\n\t}\n\n\treturn mappers[type](source);\n}\n\nfunction isDrawable(point) {\n\treturn point && !point.skip;\n}\n\nfunction drawArea(ctx, curve0, curve1, len0, len1) {\n\tvar i;\n\n\tif (!len0 || !len1) {\n\t\treturn;\n\t}\n\n\t// building first area curve (normal)\n\tctx.moveTo(curve0[0].x, curve0[0].y);\n\tfor (i = 1; i < len0; ++i) {\n\t\thelpers$1.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);\n\t}\n\n\t// joining the two area curves\n\tctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y);\n\n\t// building opposite area curve (reverse)\n\tfor (i = len1 - 1; i > 0; --i) {\n\t\thelpers$1.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);\n\t}\n}\n\nfunction doFill(ctx, points, mapper, view, color, loop) {\n\tvar count = points.length;\n\tvar span = view.spanGaps;\n\tvar curve0 = [];\n\tvar curve1 = [];\n\tvar len0 = 0;\n\tvar len1 = 0;\n\tvar i, ilen, index, p0, p1, d0, d1;\n\n\tctx.beginPath();\n\n\tfor (i = 0, ilen = (count + !!loop); i < ilen; ++i) {\n\t\tindex = i % count;\n\t\tp0 = points[index]._view;\n\t\tp1 = mapper(p0, index, view);\n\t\td0 = isDrawable(p0);\n\t\td1 = isDrawable(p1);\n\n\t\tif (d0 && d1) {\n\t\t\tlen0 = curve0.push(p0);\n\t\t\tlen1 = curve1.push(p1);\n\t\t} else if (len0 && len1) {\n\t\t\tif (!span) {\n\t\t\t\tdrawArea(ctx, curve0, curve1, len0, len1);\n\t\t\t\tlen0 = len1 = 0;\n\t\t\t\tcurve0 = [];\n\t\t\t\tcurve1 = [];\n\t\t\t} else {\n\t\t\t\tif (d0) {\n\t\t\t\t\tcurve0.push(p0);\n\t\t\t\t}\n\t\t\t\tif (d1) {\n\t\t\t\t\tcurve1.push(p1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tdrawArea(ctx, curve0, curve1, len0, len1);\n\n\tctx.closePath();\n\tctx.fillStyle = color;\n\tctx.fill();\n}\n\nvar plugin_filler = {\n\tid: 'filler',\n\n\tafterDatasetsUpdate: function(chart, options) {\n\t\tvar count = (chart.data.datasets || []).length;\n\t\tvar propagate = options.propagate;\n\t\tvar sources = [];\n\t\tvar meta, i, el, source;\n\n\t\tfor (i = 0; i < count; ++i) {\n\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\tel = meta.dataset;\n\t\t\tsource = null;\n\n\t\t\tif (el && el._model && el instanceof elements.Line) {\n\t\t\t\tsource = {\n\t\t\t\t\tvisible: chart.isDatasetVisible(i),\n\t\t\t\t\tfill: decodeFill(el, i, count),\n\t\t\t\t\tchart: chart,\n\t\t\t\t\tel: el\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tmeta.$filler = source;\n\t\t\tsources.push(source);\n\t\t}\n\n\t\tfor (i = 0; i < count; ++i) {\n\t\t\tsource = sources[i];\n\t\t\tif (!source) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tsource.fill = resolveTarget(sources, i, propagate);\n\t\t\tsource.boundary = computeBoundary(source);\n\t\t\tsource.mapper = createMapper(source);\n\t\t}\n\t},\n\n\tbeforeDatasetDraw: function(chart, args) {\n\t\tvar meta = args.meta.$filler;\n\t\tif (!meta) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar ctx = chart.ctx;\n\t\tvar el = meta.el;\n\t\tvar view = el._view;\n\t\tvar points = el._children || [];\n\t\tvar mapper = meta.mapper;\n\t\tvar color = view.backgroundColor || core_defaults.global.defaultColor;\n\n\t\tif (mapper && color && points.length) {\n\t\t\thelpers$1.canvas.clipArea(ctx, chart.chartArea);\n\t\t\tdoFill(ctx, points, mapper, view, color, el._loop);\n\t\t\thelpers$1.canvas.unclipArea(ctx);\n\t\t}\n\t}\n};\n\nvar noop$1 = helpers$1.noop;\nvar valueOrDefault$d = helpers$1.valueOrDefault;\n\ncore_defaults._set('global', {\n\tlegend: {\n\t\tdisplay: true,\n\t\tposition: 'top',\n\t\tfullWidth: true,\n\t\treverse: false,\n\t\tweight: 1000,\n\n\t\t// a callback that will handle\n\t\tonClick: function(e, legendItem) {\n\t\t\tvar index = legendItem.datasetIndex;\n\t\t\tvar ci = this.chart;\n\t\t\tvar meta = ci.getDatasetMeta(index);\n\n\t\t\t// See controller.isDatasetVisible comment\n\t\t\tmeta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;\n\n\t\t\t// We hid a dataset ... rerender the chart\n\t\t\tci.update();\n\t\t},\n\n\t\tonHover: null,\n\t\tonLeave: null,\n\n\t\tlabels: {\n\t\t\tboxWidth: 40,\n\t\t\tpadding: 10,\n\t\t\t// Generates labels shown in the legend\n\t\t\t// Valid properties to return:\n\t\t\t// text : text to display\n\t\t\t// fillStyle : fill of coloured box\n\t\t\t// strokeStyle: stroke of coloured box\n\t\t\t// hidden : if this legend item refers to a hidden item\n\t\t\t// lineCap : cap style for line\n\t\t\t// lineDash\n\t\t\t// lineDashOffset :\n\t\t\t// lineJoin :\n\t\t\t// lineWidth :\n\t\t\tgenerateLabels: function(chart) {\n\t\t\t\tvar data = chart.data;\n\t\t\t\treturn helpers$1.isArray(data.datasets) ? data.datasets.map(function(dataset, i) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttext: dataset.label,\n\t\t\t\t\t\tfillStyle: (!helpers$1.isArray(dataset.backgroundColor) ? dataset.backgroundColor : dataset.backgroundColor[0]),\n\t\t\t\t\t\thidden: !chart.isDatasetVisible(i),\n\t\t\t\t\t\tlineCap: dataset.borderCapStyle,\n\t\t\t\t\t\tlineDash: dataset.borderDash,\n\t\t\t\t\t\tlineDashOffset: dataset.borderDashOffset,\n\t\t\t\t\t\tlineJoin: dataset.borderJoinStyle,\n\t\t\t\t\t\tlineWidth: dataset.borderWidth,\n\t\t\t\t\t\tstrokeStyle: dataset.borderColor,\n\t\t\t\t\t\tpointStyle: dataset.pointStyle,\n\n\t\t\t\t\t\t// Below is extra data used for toggling the datasets\n\t\t\t\t\t\tdatasetIndex: i\n\t\t\t\t\t};\n\t\t\t\t}, this) : [];\n\t\t\t}\n\t\t}\n\t},\n\n\tlegendCallback: function(chart) {\n\t\tvar text = [];\n\t\ttext.push('<ul class=\"' + chart.id + '-legend\">');\n\t\tfor (var i = 0; i < chart.data.datasets.length; i++) {\n\t\t\ttext.push('<li><span style=\"background-color:' + chart.data.datasets[i].backgroundColor + '\"></span>');\n\t\t\tif (chart.data.datasets[i].label) {\n\t\t\t\ttext.push(chart.data.datasets[i].label);\n\t\t\t}\n\t\t\ttext.push('</li>');\n\t\t}\n\t\ttext.push('</ul>');\n\t\treturn text.join('');\n\t}\n});\n\n/**\n * Helper function to get the box width based on the usePointStyle option\n * @param {object} labelopts - the label options on the legend\n * @param {number} fontSize - the label font size\n * @return {number} width of the color box area\n */\nfunction getBoxWidth(labelOpts, fontSize) {\n\treturn labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ?\n\t\tfontSize :\n\t\tlabelOpts.boxWidth;\n}\n\n/**\n * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!\n */\nvar Legend = core_element.extend({\n\n\tinitialize: function(config) {\n\t\thelpers$1.extend(this, config);\n\n\t\t// Contains hit boxes for each dataset (in dataset order)\n\t\tthis.legendHitBoxes = [];\n\n\t\t/**\n \t\t * @private\n \t\t */\n\t\tthis._hoveredItem = null;\n\n\t\t// Are we in doughnut mode which has a different data type\n\t\tthis.doughnutMode = false;\n\t},\n\n\t// These methods are ordered by lifecycle. Utilities then follow.\n\t// Any function defined here is inherited by all legend types.\n\t// Any function can be extended by the legend type\n\n\tbeforeUpdate: noop$1,\n\tupdate: function(maxWidth, maxHeight, margins) {\n\t\tvar me = this;\n\n\t\t// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\t\tme.beforeUpdate();\n\n\t\t// Absorb the master measurements\n\t\tme.maxWidth = maxWidth;\n\t\tme.maxHeight = maxHeight;\n\t\tme.margins = margins;\n\n\t\t// Dimensions\n\t\tme.beforeSetDimensions();\n\t\tme.setDimensions();\n\t\tme.afterSetDimensions();\n\t\t// Labels\n\t\tme.beforeBuildLabels();\n\t\tme.buildLabels();\n\t\tme.afterBuildLabels();\n\n\t\t// Fit\n\t\tme.beforeFit();\n\t\tme.fit();\n\t\tme.afterFit();\n\t\t//\n\t\tme.afterUpdate();\n\n\t\treturn me.minSize;\n\t},\n\tafterUpdate: noop$1,\n\n\t//\n\n\tbeforeSetDimensions: noop$1,\n\tsetDimensions: function() {\n\t\tvar me = this;\n\t\t// Set the unconstrained dimension before label rotation\n\t\tif (me.isHorizontal()) {\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.width = me.maxWidth;\n\t\t\tme.left = 0;\n\t\t\tme.right = me.width;\n\t\t} else {\n\t\t\tme.height = me.maxHeight;\n\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.top = 0;\n\t\t\tme.bottom = me.height;\n\t\t}\n\n\t\t// Reset padding\n\t\tme.paddingLeft = 0;\n\t\tme.paddingTop = 0;\n\t\tme.paddingRight = 0;\n\t\tme.paddingBottom = 0;\n\n\t\t// Reset minSize\n\t\tme.minSize = {\n\t\t\twidth: 0,\n\t\t\theight: 0\n\t\t};\n\t},\n\tafterSetDimensions: noop$1,\n\n\t//\n\n\tbeforeBuildLabels: noop$1,\n\tbuildLabels: function() {\n\t\tvar me = this;\n\t\tvar labelOpts = me.options.labels || {};\n\t\tvar legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];\n\n\t\tif (labelOpts.filter) {\n\t\t\tlegendItems = legendItems.filter(function(item) {\n\t\t\t\treturn labelOpts.filter(item, me.chart.data);\n\t\t\t});\n\t\t}\n\n\t\tif (me.options.reverse) {\n\t\t\tlegendItems.reverse();\n\t\t}\n\n\t\tme.legendItems = legendItems;\n\t},\n\tafterBuildLabels: noop$1,\n\n\t//\n\n\tbeforeFit: noop$1,\n\tfit: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar labelOpts = opts.labels;\n\t\tvar display = opts.display;\n\n\t\tvar ctx = me.ctx;\n\n\t\tvar labelFont = helpers$1.options._parseFont(labelOpts);\n\t\tvar fontSize = labelFont.size;\n\n\t\t// Reset hit boxes\n\t\tvar hitboxes = me.legendHitBoxes = [];\n\n\t\tvar minSize = me.minSize;\n\t\tvar isHorizontal = me.isHorizontal();\n\n\t\tif (isHorizontal) {\n\t\t\tminSize.width = me.maxWidth; // fill all the width\n\t\t\tminSize.height = display ? 10 : 0;\n\t\t} else {\n\t\t\tminSize.width = display ? 10 : 0;\n\t\t\tminSize.height = me.maxHeight; // fill all the height\n\t\t}\n\n\t\t// Increase sizes here\n\t\tif (display) {\n\t\t\tctx.font = labelFont.string;\n\n\t\t\tif (isHorizontal) {\n\t\t\t\t// Labels\n\n\t\t\t\t// Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n\t\t\t\tvar lineWidths = me.lineWidths = [0];\n\t\t\t\tvar totalHeight = 0;\n\n\t\t\t\tctx.textAlign = 'left';\n\t\t\t\tctx.textBaseline = 'top';\n\n\t\t\t\thelpers$1.each(me.legendItems, function(legendItem, i) {\n\t\t\t\t\tvar boxWidth = getBoxWidth(labelOpts, fontSize);\n\t\t\t\t\tvar width = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n\t\t\t\t\tif (i === 0 || lineWidths[lineWidths.length - 1] + width + labelOpts.padding > minSize.width) {\n\t\t\t\t\t\ttotalHeight += fontSize + labelOpts.padding;\n\t\t\t\t\t\tlineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = labelOpts.padding;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Store the hitbox width and height here. Final position will be updated in `draw`\n\t\t\t\t\thitboxes[i] = {\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\twidth: width,\n\t\t\t\t\t\theight: fontSize\n\t\t\t\t\t};\n\n\t\t\t\t\tlineWidths[lineWidths.length - 1] += width + labelOpts.padding;\n\t\t\t\t});\n\n\t\t\t\tminSize.height += totalHeight;\n\n\t\t\t} else {\n\t\t\t\tvar vPadding = labelOpts.padding;\n\t\t\t\tvar columnWidths = me.columnWidths = [];\n\t\t\t\tvar totalWidth = labelOpts.padding;\n\t\t\t\tvar currentColWidth = 0;\n\t\t\t\tvar currentColHeight = 0;\n\t\t\t\tvar itemHeight = fontSize + vPadding;\n\n\t\t\t\thelpers$1.each(me.legendItems, function(legendItem, i) {\n\t\t\t\t\tvar boxWidth = getBoxWidth(labelOpts, fontSize);\n\t\t\t\t\tvar itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n\t\t\t\t\t// If too tall, go to new column\n\t\t\t\t\tif (i > 0 && currentColHeight + itemHeight > minSize.height - vPadding) {\n\t\t\t\t\t\ttotalWidth += currentColWidth + labelOpts.padding;\n\t\t\t\t\t\tcolumnWidths.push(currentColWidth); // previous column width\n\n\t\t\t\t\t\tcurrentColWidth = 0;\n\t\t\t\t\t\tcurrentColHeight = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Get max width\n\t\t\t\t\tcurrentColWidth = Math.max(currentColWidth, itemWidth);\n\t\t\t\t\tcurrentColHeight += itemHeight;\n\n\t\t\t\t\t// Store the hitbox width and height here. Final position will be updated in `draw`\n\t\t\t\t\thitboxes[i] = {\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\twidth: itemWidth,\n\t\t\t\t\t\theight: fontSize\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\ttotalWidth += currentColWidth;\n\t\t\t\tcolumnWidths.push(currentColWidth);\n\t\t\t\tminSize.width += totalWidth;\n\t\t\t}\n\t\t}\n\n\t\tme.width = minSize.width;\n\t\tme.height = minSize.height;\n\t},\n\tafterFit: noop$1,\n\n\t// Shared Methods\n\tisHorizontal: function() {\n\t\treturn this.options.position === 'top' || this.options.position === 'bottom';\n\t},\n\n\t// Actually draw the legend on the canvas\n\tdraw: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar labelOpts = opts.labels;\n\t\tvar globalDefaults = core_defaults.global;\n\t\tvar defaultColor = globalDefaults.defaultColor;\n\t\tvar lineDefault = globalDefaults.elements.line;\n\t\tvar legendWidth = me.width;\n\t\tvar lineWidths = me.lineWidths;\n\n\t\tif (opts.display) {\n\t\t\tvar ctx = me.ctx;\n\t\t\tvar fontColor = valueOrDefault$d(labelOpts.fontColor, globalDefaults.defaultFontColor);\n\t\t\tvar labelFont = helpers$1.options._parseFont(labelOpts);\n\t\t\tvar fontSize = labelFont.size;\n\t\t\tvar cursor;\n\n\t\t\t// Canvas setup\n\t\t\tctx.textAlign = 'left';\n\t\t\tctx.textBaseline = 'middle';\n\t\t\tctx.lineWidth = 0.5;\n\t\t\tctx.strokeStyle = fontColor; // for strikethrough effect\n\t\t\tctx.fillStyle = fontColor; // render in correct colour\n\t\t\tctx.font = labelFont.string;\n\n\t\t\tvar boxWidth = getBoxWidth(labelOpts, fontSize);\n\t\t\tvar hitboxes = me.legendHitBoxes;\n\n\t\t\t// current position\n\t\t\tvar drawLegendBox = function(x, y, legendItem) {\n\t\t\t\tif (isNaN(boxWidth) || boxWidth <= 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Set the ctx for the box\n\t\t\t\tctx.save();\n\n\t\t\t\tvar lineWidth = valueOrDefault$d(legendItem.lineWidth, lineDefault.borderWidth);\n\t\t\t\tctx.fillStyle = valueOrDefault$d(legendItem.fillStyle, defaultColor);\n\t\t\t\tctx.lineCap = valueOrDefault$d(legendItem.lineCap, lineDefault.borderCapStyle);\n\t\t\t\tctx.lineDashOffset = valueOrDefault$d(legendItem.lineDashOffset, lineDefault.borderDashOffset);\n\t\t\t\tctx.lineJoin = valueOrDefault$d(legendItem.lineJoin, lineDefault.borderJoinStyle);\n\t\t\t\tctx.lineWidth = lineWidth;\n\t\t\t\tctx.strokeStyle = valueOrDefault$d(legendItem.strokeStyle, defaultColor);\n\n\t\t\t\tif (ctx.setLineDash) {\n\t\t\t\t\t// IE 9 and 10 do not support line dash\n\t\t\t\t\tctx.setLineDash(valueOrDefault$d(legendItem.lineDash, lineDefault.borderDash));\n\t\t\t\t}\n\n\t\t\t\tif (opts.labels && opts.labels.usePointStyle) {\n\t\t\t\t\t// Recalculate x and y for drawPoint() because its expecting\n\t\t\t\t\t// x and y to be center of figure (instead of top left)\n\t\t\t\t\tvar radius = boxWidth * Math.SQRT2 / 2;\n\t\t\t\t\tvar centerX = x + boxWidth / 2;\n\t\t\t\t\tvar centerY = y + fontSize / 2;\n\n\t\t\t\t\t// Draw pointStyle as legend symbol\n\t\t\t\t\thelpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);\n\t\t\t\t} else {\n\t\t\t\t\t// Draw box as legend symbol\n\t\t\t\t\tif (lineWidth !== 0) {\n\t\t\t\t\t\tctx.strokeRect(x, y, boxWidth, fontSize);\n\t\t\t\t\t}\n\t\t\t\t\tctx.fillRect(x, y, boxWidth, fontSize);\n\t\t\t\t}\n\n\t\t\t\tctx.restore();\n\t\t\t};\n\t\t\tvar fillText = function(x, y, legendItem, textWidth) {\n\t\t\t\tvar halfFontSize = fontSize / 2;\n\t\t\t\tvar xLeft = boxWidth + halfFontSize + x;\n\t\t\t\tvar yMiddle = y + halfFontSize;\n\n\t\t\t\tctx.fillText(legendItem.text, xLeft, yMiddle);\n\n\t\t\t\tif (legendItem.hidden) {\n\t\t\t\t\t// Strikethrough the text if hidden\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.lineWidth = 2;\n\t\t\t\t\tctx.moveTo(xLeft, yMiddle);\n\t\t\t\t\tctx.lineTo(xLeft + textWidth, yMiddle);\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Horizontal\n\t\t\tvar isHorizontal = me.isHorizontal();\n\t\t\tif (isHorizontal) {\n\t\t\t\tcursor = {\n\t\t\t\t\tx: me.left + ((legendWidth - lineWidths[0]) / 2) + labelOpts.padding,\n\t\t\t\t\ty: me.top + labelOpts.padding,\n\t\t\t\t\tline: 0\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tcursor = {\n\t\t\t\t\tx: me.left + labelOpts.padding,\n\t\t\t\t\ty: me.top + labelOpts.padding,\n\t\t\t\t\tline: 0\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar itemHeight = fontSize + labelOpts.padding;\n\t\t\thelpers$1.each(me.legendItems, function(legendItem, i) {\n\t\t\t\tvar textWidth = ctx.measureText(legendItem.text).width;\n\t\t\t\tvar width = boxWidth + (fontSize / 2) + textWidth;\n\t\t\t\tvar x = cursor.x;\n\t\t\t\tvar y = cursor.y;\n\n\t\t\t\t// Use (me.left + me.minSize.width) and (me.top + me.minSize.height)\n\t\t\t\t// instead of me.right and me.bottom because me.width and me.height\n\t\t\t\t// may have been changed since me.minSize was calculated\n\t\t\t\tif (isHorizontal) {\n\t\t\t\t\tif (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {\n\t\t\t\t\t\ty = cursor.y += itemHeight;\n\t\t\t\t\t\tcursor.line++;\n\t\t\t\t\t\tx = cursor.x = me.left + ((legendWidth - lineWidths[cursor.line]) / 2) + labelOpts.padding;\n\t\t\t\t\t}\n\t\t\t\t} else if (i > 0 && y + itemHeight > me.top + me.minSize.height) {\n\t\t\t\t\tx = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;\n\t\t\t\t\ty = cursor.y = me.top + labelOpts.padding;\n\t\t\t\t\tcursor.line++;\n\t\t\t\t}\n\n\t\t\t\tdrawLegendBox(x, y, legendItem);\n\n\t\t\t\thitboxes[i].left = x;\n\t\t\t\thitboxes[i].top = y;\n\n\t\t\t\t// Fill the actual label\n\t\t\t\tfillText(x, y, legendItem, textWidth);\n\n\t\t\t\tif (isHorizontal) {\n\t\t\t\t\tcursor.x += width + labelOpts.padding;\n\t\t\t\t} else {\n\t\t\t\t\tcursor.y += itemHeight;\n\t\t\t\t}\n\n\t\t\t});\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getLegendItemAt: function(x, y) {\n\t\tvar me = this;\n\t\tvar i, hitBox, lh;\n\n\t\tif (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {\n\t\t\t// See if we are touching one of the dataset boxes\n\t\t\tlh = me.legendHitBoxes;\n\t\t\tfor (i = 0; i < lh.length; ++i) {\n\t\t\t\thitBox = lh[i];\n\n\t\t\t\tif (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {\n\t\t\t\t\t// Touching an element\n\t\t\t\t\treturn me.legendItems[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\n\t/**\n\t * Handle an event\n\t * @private\n\t * @param {IEvent} event - The event to handle\n\t */\n\thandleEvent: function(e) {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar type = e.type === 'mouseup' ? 'click' : e.type;\n\t\tvar hoveredItem;\n\n\t\tif (type === 'mousemove') {\n\t\t\tif (!opts.onHover && !opts.onLeave) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (type === 'click') {\n\t\t\tif (!opts.onClick) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\t// Chart event already has relative position in it\n\t\thoveredItem = me._getLegendItemAt(e.x, e.y);\n\n\t\tif (type === 'click') {\n\t\t\tif (hoveredItem && opts.onClick) {\n\t\t\t\t// use e.native for backwards compatibility\n\t\t\t\topts.onClick.call(me, e.native, hoveredItem);\n\t\t\t}\n\t\t} else {\n\t\t\tif (opts.onLeave && hoveredItem !== me._hoveredItem) {\n\t\t\t\tif (me._hoveredItem) {\n\t\t\t\t\topts.onLeave.call(me, e.native, me._hoveredItem);\n\t\t\t\t}\n\t\t\t\tme._hoveredItem = hoveredItem;\n\t\t\t}\n\n\t\t\tif (opts.onHover && hoveredItem) {\n\t\t\t\t// use e.native for backwards compatibility\n\t\t\t\topts.onHover.call(me, e.native, hoveredItem);\n\t\t\t}\n\t\t}\n\t}\n});\n\nfunction createNewLegendAndAttach(chart, legendOpts) {\n\tvar legend = new Legend({\n\t\tctx: chart.ctx,\n\t\toptions: legendOpts,\n\t\tchart: chart\n\t});\n\n\tcore_layouts.configure(chart, legend, legendOpts);\n\tcore_layouts.addBox(chart, legend);\n\tchart.legend = legend;\n}\n\nvar plugin_legend = {\n\tid: 'legend',\n\n\t/**\n\t * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making\n\t * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of\n\t * the plugin, which one will be re-exposed in the chart.js file.\n\t * https://github.com/chartjs/Chart.js/pull/2640\n\t * @private\n\t */\n\t_element: Legend,\n\n\tbeforeInit: function(chart) {\n\t\tvar legendOpts = chart.options.legend;\n\n\t\tif (legendOpts) {\n\t\t\tcreateNewLegendAndAttach(chart, legendOpts);\n\t\t}\n\t},\n\n\tbeforeUpdate: function(chart) {\n\t\tvar legendOpts = chart.options.legend;\n\t\tvar legend = chart.legend;\n\n\t\tif (legendOpts) {\n\t\t\thelpers$1.mergeIf(legendOpts, core_defaults.global.legend);\n\n\t\t\tif (legend) {\n\t\t\t\tcore_layouts.configure(chart, legend, legendOpts);\n\t\t\t\tlegend.options = legendOpts;\n\t\t\t} else {\n\t\t\t\tcreateNewLegendAndAttach(chart, legendOpts);\n\t\t\t}\n\t\t} else if (legend) {\n\t\t\tcore_layouts.removeBox(chart, legend);\n\t\t\tdelete chart.legend;\n\t\t}\n\t},\n\n\tafterEvent: function(chart, e) {\n\t\tvar legend = chart.legend;\n\t\tif (legend) {\n\t\t\tlegend.handleEvent(e);\n\t\t}\n\t}\n};\n\nvar noop$2 = helpers$1.noop;\n\ncore_defaults._set('global', {\n\ttitle: {\n\t\tdisplay: false,\n\t\tfontStyle: 'bold',\n\t\tfullWidth: true,\n\t\tpadding: 10,\n\t\tposition: 'top',\n\t\ttext: '',\n\t\tweight: 2000         // by default greater than legend (1000) to be above\n\t}\n});\n\n/**\n * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!\n */\nvar Title = core_element.extend({\n\tinitialize: function(config) {\n\t\tvar me = this;\n\t\thelpers$1.extend(me, config);\n\n\t\t// Contains hit boxes for each dataset (in dataset order)\n\t\tme.legendHitBoxes = [];\n\t},\n\n\t// These methods are ordered by lifecycle. Utilities then follow.\n\n\tbeforeUpdate: noop$2,\n\tupdate: function(maxWidth, maxHeight, margins) {\n\t\tvar me = this;\n\n\t\t// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\t\tme.beforeUpdate();\n\n\t\t// Absorb the master measurements\n\t\tme.maxWidth = maxWidth;\n\t\tme.maxHeight = maxHeight;\n\t\tme.margins = margins;\n\n\t\t// Dimensions\n\t\tme.beforeSetDimensions();\n\t\tme.setDimensions();\n\t\tme.afterSetDimensions();\n\t\t// Labels\n\t\tme.beforeBuildLabels();\n\t\tme.buildLabels();\n\t\tme.afterBuildLabels();\n\n\t\t// Fit\n\t\tme.beforeFit();\n\t\tme.fit();\n\t\tme.afterFit();\n\t\t//\n\t\tme.afterUpdate();\n\n\t\treturn me.minSize;\n\n\t},\n\tafterUpdate: noop$2,\n\n\t//\n\n\tbeforeSetDimensions: noop$2,\n\tsetDimensions: function() {\n\t\tvar me = this;\n\t\t// Set the unconstrained dimension before label rotation\n\t\tif (me.isHorizontal()) {\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.width = me.maxWidth;\n\t\t\tme.left = 0;\n\t\t\tme.right = me.width;\n\t\t} else {\n\t\t\tme.height = me.maxHeight;\n\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.top = 0;\n\t\t\tme.bottom = me.height;\n\t\t}\n\n\t\t// Reset padding\n\t\tme.paddingLeft = 0;\n\t\tme.paddingTop = 0;\n\t\tme.paddingRight = 0;\n\t\tme.paddingBottom = 0;\n\n\t\t// Reset minSize\n\t\tme.minSize = {\n\t\t\twidth: 0,\n\t\t\theight: 0\n\t\t};\n\t},\n\tafterSetDimensions: noop$2,\n\n\t//\n\n\tbeforeBuildLabels: noop$2,\n\tbuildLabels: noop$2,\n\tafterBuildLabels: noop$2,\n\n\t//\n\n\tbeforeFit: noop$2,\n\tfit: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar display = opts.display;\n\t\tvar minSize = me.minSize;\n\t\tvar lineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;\n\t\tvar fontOpts = helpers$1.options._parseFont(opts);\n\t\tvar textSize = display ? (lineCount * fontOpts.lineHeight) + (opts.padding * 2) : 0;\n\n\t\tif (me.isHorizontal()) {\n\t\t\tminSize.width = me.maxWidth; // fill all the width\n\t\t\tminSize.height = textSize;\n\t\t} else {\n\t\t\tminSize.width = textSize;\n\t\t\tminSize.height = me.maxHeight; // fill all the height\n\t\t}\n\n\t\tme.width = minSize.width;\n\t\tme.height = minSize.height;\n\n\t},\n\tafterFit: noop$2,\n\n\t// Shared Methods\n\tisHorizontal: function() {\n\t\tvar pos = this.options.position;\n\t\treturn pos === 'top' || pos === 'bottom';\n\t},\n\n\t// Actually draw the title block on the canvas\n\tdraw: function() {\n\t\tvar me = this;\n\t\tvar ctx = me.ctx;\n\t\tvar opts = me.options;\n\n\t\tif (opts.display) {\n\t\t\tvar fontOpts = helpers$1.options._parseFont(opts);\n\t\t\tvar lineHeight = fontOpts.lineHeight;\n\t\t\tvar offset = lineHeight / 2 + opts.padding;\n\t\t\tvar rotation = 0;\n\t\t\tvar top = me.top;\n\t\t\tvar left = me.left;\n\t\t\tvar bottom = me.bottom;\n\t\t\tvar right = me.right;\n\t\t\tvar maxWidth, titleX, titleY;\n\n\t\t\tctx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor); // render in correct colour\n\t\t\tctx.font = fontOpts.string;\n\n\t\t\t// Horizontal\n\t\t\tif (me.isHorizontal()) {\n\t\t\t\ttitleX = left + ((right - left) / 2); // midpoint of the width\n\t\t\t\ttitleY = top + offset;\n\t\t\t\tmaxWidth = right - left;\n\t\t\t} else {\n\t\t\t\ttitleX = opts.position === 'left' ? left + offset : right - offset;\n\t\t\t\ttitleY = top + ((bottom - top) / 2);\n\t\t\t\tmaxWidth = bottom - top;\n\t\t\t\trotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);\n\t\t\t}\n\n\t\t\tctx.save();\n\t\t\tctx.translate(titleX, titleY);\n\t\t\tctx.rotate(rotation);\n\t\t\tctx.textAlign = 'center';\n\t\t\tctx.textBaseline = 'middle';\n\n\t\t\tvar text = opts.text;\n\t\t\tif (helpers$1.isArray(text)) {\n\t\t\t\tvar y = 0;\n\t\t\t\tfor (var i = 0; i < text.length; ++i) {\n\t\t\t\t\tctx.fillText(text[i], 0, y, maxWidth);\n\t\t\t\t\ty += lineHeight;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tctx.fillText(text, 0, 0, maxWidth);\n\t\t\t}\n\n\t\t\tctx.restore();\n\t\t}\n\t}\n});\n\nfunction createNewTitleBlockAndAttach(chart, titleOpts) {\n\tvar title = new Title({\n\t\tctx: chart.ctx,\n\t\toptions: titleOpts,\n\t\tchart: chart\n\t});\n\n\tcore_layouts.configure(chart, title, titleOpts);\n\tcore_layouts.addBox(chart, title);\n\tchart.titleBlock = title;\n}\n\nvar plugin_title = {\n\tid: 'title',\n\n\t/**\n\t * Backward compatibility: since 2.1.5, the title is registered as a plugin, making\n\t * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of\n\t * the plugin, which one will be re-exposed in the chart.js file.\n\t * https://github.com/chartjs/Chart.js/pull/2640\n\t * @private\n\t */\n\t_element: Title,\n\n\tbeforeInit: function(chart) {\n\t\tvar titleOpts = chart.options.title;\n\n\t\tif (titleOpts) {\n\t\t\tcreateNewTitleBlockAndAttach(chart, titleOpts);\n\t\t}\n\t},\n\n\tbeforeUpdate: function(chart) {\n\t\tvar titleOpts = chart.options.title;\n\t\tvar titleBlock = chart.titleBlock;\n\n\t\tif (titleOpts) {\n\t\t\thelpers$1.mergeIf(titleOpts, core_defaults.global.title);\n\n\t\t\tif (titleBlock) {\n\t\t\t\tcore_layouts.configure(chart, titleBlock, titleOpts);\n\t\t\t\ttitleBlock.options = titleOpts;\n\t\t\t} else {\n\t\t\t\tcreateNewTitleBlockAndAttach(chart, titleOpts);\n\t\t\t}\n\t\t} else if (titleBlock) {\n\t\t\tcore_layouts.removeBox(chart, titleBlock);\n\t\t\tdelete chart.titleBlock;\n\t\t}\n\t}\n};\n\nvar plugins = {};\nvar filler = plugin_filler;\nvar legend = plugin_legend;\nvar title = plugin_title;\nplugins.filler = filler;\nplugins.legend = legend;\nplugins.title = title;\n\n/**\n * @namespace Chart\n */\n\n\ncore_controller.helpers = helpers$1;\n\n// @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!\ncore_helpers(core_controller);\n\ncore_controller._adapters = core_adapters;\ncore_controller.Animation = core_animation;\ncore_controller.animationService = core_animations;\ncore_controller.controllers = controllers;\ncore_controller.DatasetController = core_datasetController;\ncore_controller.defaults = core_defaults;\ncore_controller.Element = core_element;\ncore_controller.elements = elements;\ncore_controller.Interaction = core_interaction;\ncore_controller.layouts = core_layouts;\ncore_controller.platform = platform;\ncore_controller.plugins = core_plugins;\ncore_controller.Scale = core_scale;\ncore_controller.scaleService = core_scaleService;\ncore_controller.Ticks = core_ticks;\ncore_controller.Tooltip = core_tooltip;\n\n// Register built-in scales\n\ncore_controller.helpers.each(scales, function(scale, type) {\n\tcore_controller.scaleService.registerScaleType(type, scale, scale._defaults);\n});\n\n// Load to register built-in adapters (as side effects)\n\n\n// Loading built-in plugins\n\nfor (var k in plugins) {\n\tif (plugins.hasOwnProperty(k)) {\n\t\tcore_controller.plugins.register(plugins[k]);\n\t}\n}\n\ncore_controller.platform.initialize();\n\nvar src = core_controller;\nif (typeof window !== 'undefined') {\n\twindow.Chart = core_controller;\n}\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, not available anymore\n * @namespace Chart.Chart\n * @deprecated since version 2.8.0\n * @todo remove at version 3\n * @private\n */\ncore_controller.Chart = core_controller;\n\n/**\n * Provided for backward compatibility, not available anymore\n * @namespace Chart.Legend\n * @deprecated since version 2.1.5\n * @todo remove at version 3\n * @private\n */\ncore_controller.Legend = plugins.legend._element;\n\n/**\n * Provided for backward compatibility, not available anymore\n * @namespace Chart.Title\n * @deprecated since version 2.1.5\n * @todo remove at version 3\n * @private\n */\ncore_controller.Title = plugins.title._element;\n\n/**\n * Provided for backward compatibility, use Chart.plugins instead\n * @namespace Chart.pluginService\n * @deprecated since version 2.1.5\n * @todo remove at version 3\n * @private\n */\ncore_controller.pluginService = core_controller.plugins;\n\n/**\n * Provided for backward compatibility, inheriting from Chart.PlugingBase has no\n * effect, instead simply create/register plugins via plain JavaScript objects.\n * @interface Chart.PluginBase\n * @deprecated since version 2.5.0\n * @todo remove at version 3\n * @private\n */\ncore_controller.PluginBase = core_controller.Element.extend({});\n\n/**\n * Provided for backward compatibility, use Chart.helpers.canvas instead.\n * @namespace Chart.canvasHelpers\n * @deprecated since version 2.6.0\n * @todo remove at version 3\n * @private\n */\ncore_controller.canvasHelpers = core_controller.helpers.canvas;\n\n/**\n * Provided for backward compatibility, use Chart.layouts instead.\n * @namespace Chart.layoutService\n * @deprecated since version 2.7.3\n * @todo remove at version 3\n * @private\n */\ncore_controller.layoutService = core_controller.layouts;\n\n/**\n * Provided for backward compatibility, not available anymore.\n * @namespace Chart.LinearScaleBase\n * @deprecated since version 2.8\n * @todo remove at version 3\n * @private\n */\ncore_controller.LinearScaleBase = scale_linearbase;\n\n/**\n * Provided for backward compatibility, instead we should create a new Chart\n * by setting the type in the config (`new Chart(id, {type: '{chart-type}'}`).\n * @deprecated since version 2.8.0\n * @todo remove at version 3\n */\ncore_controller.helpers.each(\n\t[\n\t\t'Bar',\n\t\t'Bubble',\n\t\t'Doughnut',\n\t\t'Line',\n\t\t'PolarArea',\n\t\t'Radar',\n\t\t'Scatter'\n\t],\n\tfunction(klass) {\n\t\tcore_controller[klass] = function(ctx, cfg) {\n\t\t\treturn new core_controller(ctx, core_controller.helpers.merge(cfg || {}, {\n\t\t\t\ttype: klass.charAt(0).toLowerCase() + klass.slice(1)\n\t\t\t}));\n\t\t};\n\t}\n);\n\nreturn src;\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/chart.js/dist/Chart.js\n// module id = 2568\n// module chunks = 18","var baseAssignValue = require('./_baseAssignValue'),\n    createAggregator = require('./_createAggregator');\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The corresponding value of\n * each key is the last element responsible for generating the key. The\n * iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * var array = [\n *   { 'dir': 'left', 'code': 97 },\n *   { 'dir': 'right', 'code': 100 }\n * ];\n *\n * _.keyBy(array, function(o) {\n *   return String.fromCharCode(o.code);\n * });\n * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n *\n * _.keyBy(array, 'dir');\n * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n */\nvar keyBy = createAggregator(function(result, value, key) {\n  baseAssignValue(result, key, value);\n});\n\nmodule.exports = keyBy;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/keyBy.js\n// module id = 2569\n// module chunks = 18","var arrayAggregator = require('./_arrayAggregator'),\n    baseAggregator = require('./_baseAggregator'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nmodule.exports = createAggregator;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_createAggregator.js\n// module id = 2570\n// module chunks = 18","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayAggregator;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_arrayAggregator.js\n// module id = 2571\n// module chunks = 18","var baseEach = require('./_baseEach');\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseAggregator;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_baseAggregator.js\n// module id = 2572\n// module chunks = 18","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { Modal, Button, Icon } from 'antd';\r\nimport { StyledModal } from '../../components/UI/Antd';\r\nimport { closeJumpstartModal } from '../../actions/dashboardAction'\r\nclass JumpStartModal extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <StyledModal\r\n          title={this.props.jumpstartData.title}\r\n          visible={this.props.isModalOpen}\r\n          onOk={this.handleOk}\r\n          onCancel={this.props.closeJumpstartModal}\r\n        >\r\n          <p>{this.props.jumpstartData.title}</p>\r\n          <p>{this.props.jumpstartData.value}</p>\r\n        </StyledModal>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        isModalOpen: state.dashboardReducer.isModalOpen,\r\n        jumpstartData: state.dashboardReducer.jumpstartData\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        closeJumpstartModal\r\n    }, dispatch)\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(JumpStartModal);\n\n\n// WEBPACK FOOTER //\n// ./src/container/dashboard/jumpStartModal.js","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from \"redux\";\r\nimport classNames from 'classnames';\r\nimport { Icon } from 'antd'\r\nimport { Spring } from \"react-spring\";\r\nimport { openJumpstartModal } from \"../../actions/dashboardAction\";\r\nconst JumpStartDetail = (props) => {\r\n    return (\r\n        <div\r\n            className={'jumpstart-box test'}\r\n            onClick={() => props.openJumpstartModal(props.data)}\r\n        >\r\n            <Spring\r\n                delay={500}\r\n                from={{ opacity: 0, transform: ' scale(0.4)', }}\r\n                to={{ opacity: 1, transform: 'scale(1)' }}>\r\n                {styles => (\r\n                    <div style={styles}>\r\n                        <h3 style={{ color: '#aaa' }}>{props.data.title}</h3>\r\n                        <h2 style={{ color: '#eee' }}>{props.data.value}\r\n                            <span className={props.jumpstartStyle}>\r\n                                {props.data.progress > 0 ? <Icon type='caret-up' /> : <Icon type='caret-down' />}\r\n                                &nbsp;{props.data.progress}</span>\r\n                        </h2>\r\n                    </div>\r\n                )}\r\n            </Spring>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default connect(null, (dispatch) => bindActionCreators({ openJumpstartModal }, dispatch))(JumpStartDetail);\n\n\n// WEBPACK FOOTER //\n// ./src/container/dashboard/jumpStartDetail.js"],"sourceRoot":""}